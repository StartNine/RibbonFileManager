<plex:PlexWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:plex="clr-namespace:Start9.Api.Plex;assembly=Start9.Api"
        xmlns:disk="clr-namespace:Start9.Api.DiskItems;assembly=Start9.Api"
        xmlns:local="clr-namespace:RibbonFileManager"
        xmlns:Fluent="urn:fluent-ribbon"
        xmlns:apictrl="clr-namespace:Start9.Api.Controls;assembly=Start9.Api"
        x:Class="RibbonFileManager.MainWindow"
        mc:Ignorable="d"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="MainWindow" Height="500" Width="850" ShowToolBar="{Binding IsCollapsed, Converter={x:Static local:BoolInverterConverter.Instance}, FallbackValue=True, Source={x:Reference RibbonControl}}" ToolBarHeight="{Binding Height, Source={x:Reference RibbonControl}}" Loaded="MainWindow_Loaded">
    <!--plex:PlexWindow.Style>
        <Style TargetType="{x:Type local:MainWindow}" BasedOn="{DynamicResource PlexWindowStyle}"/>
    </plex:PlexWindow.Style-->
    <plex:PlexWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--ResourceDictionary Source="pack://application:,,,/Fluent;Component/Themes/Generic.xaml" /-->
                <ResourceDictionary Source="pack://application:,,,/RibbonFileManager;component/DefaultSkin.xaml"/>
                <!--ResourceDictionary Source="pack://application:,,,/RibbonFileManager;component/DarkLol.xaml"/-->
            </ResourceDictionary.MergedDictionaries>

            <local:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        </ResourceDictionary>
    </plex:PlexWindow.Resources>
    <!--plex:PlexWindow.BodyBrush>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="#FF181818"/>
            <GradientStop Offset="1" Color="#FF003059"/>
        </LinearGradientBrush>
    </plex:PlexWindow.BodyBrush-->
    <plex:PlexWindow.FullWindowContent>
        <!--Fluent:BackstageTabControl x:Name="RibbonBackstageTabs" Visibility="{Binding IsOpen, Source={x:Reference RibbonBackstage}, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=False}" Margin="0,100,0,0">
            <Fluent:BackstageTabItem Header="New" />
            <Fluent:BackstageTabItem Header="Print" />
            <Fluent:Button Header="Blue" />
        </Fluent:BackstageTabControl-->
        <!--Fluent:ApplicationMenu Visibility="{Binding IsOpen, Source={x:Reference RibbonBackstage}, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=False}"/-->
        <ContentControl x:Name="BackstageRoot" IsEnabled="{Binding IsOpen, FallbackValue=False, Source={x:Reference RibbonBackstage}}" Opacity="0" RenderTransformOrigin="0,0">
            <ContentControl.Style>
                <Style TargetType="{x:Type ContentControl}">
                    <Style.Resources>
                        <QuinticEase x:Key="ScaleEase" EasingMode="EaseOut"/>
                    </Style.Resources>
                    <Setter Property="Margin" Value="20"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ContentControl}">
                                <Grid>
                                    <Rectangle x:Name="BackgroundRectangle" StrokeThickness="1" IsHitTestVisible="False">
                                        <Rectangle.Fill>
                                            <VisualBrush TileMode="Tile" Viewport="0,0,2,2"
                                             Viewbox="0,0,2,2" ViewportUnits="Absolute"
                                             ViewboxUnits="Absolute">
                                                <VisualBrush.Visual>
                                                    <StackPanel Orientation="Vertical" Width="2">
                                                        <Rectangle Fill="#FFBDD7EF" Stroke="Transparent" StrokeThickness="0" Height="1" HorizontalAlignment="Stretch"/>
                                                        <Rectangle Fill="#FFB5C7E7" Stroke="Transparent" StrokeThickness="0" Height="1" HorizontalAlignment="Stretch"/>
                                                    </StackPanel>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Rectangle.Fill>
                                        <Rectangle.Effect>
                                            <DropShadowEffect x:Name="DropShadow" Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                                        </Rectangle.Effect>
                                        <Rectangle.OpacityMask>
                                            <VisualBrush>
                                                <VisualBrush.Visual>
                                                    <Grid Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="#01000000">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="50"/>
                                                            <ColumnDefinition/>
                                                        </Grid.ColumnDefinitions>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="50"/>
                                                            <RowDefinition/>
                                                        </Grid.RowDefinitions>
                                                        <Rectangle Grid.Column="0" Grid.Row="0" Margin="5,5,0,0" IsHitTestVisible="False">
                                                            <Rectangle.Fill>
                                                                <RadialGradientBrush Center="0,0" GradientOrigin="0,0" RadiusX="1" RadiusY="1">
                                                                    <GradientStop Offset="0.975" Color="Transparent"/>
                                                                    <GradientStop Offset="1" Color="White"/>
                                                                </RadialGradientBrush>
                                                            </Rectangle.Fill>
                                                        </Rectangle>
                                                        <Border Background="White" BorderBrush="Transparent" BorderThickness="0" CornerRadius="5,10,0,0" Grid.Column="1" Grid.Row="0"/>
                                                        <Border Background="White" BorderBrush="Transparent" BorderThickness="0" CornerRadius="5,0,0,10" Grid.Column="0" Grid.Row="1"/>
                                                        <Border Background="White" BorderBrush="Transparent" BorderThickness="0" CornerRadius="0,0,10,0" Grid.Column="1" Grid.Row="1"/>
                                                    </Grid>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Rectangle.OpacityMask>
                                    </Rectangle>
                                    <!--Border OpacityMask="{Binding OpacityMask, Source={x:Reference BackgroundRectangle}}" ClipToBounds="True" Margin="0" Padding="0" Background="Red" BorderBrush="Transparent" BorderThickness="0">
                                    </Border-->
                                    <ContentPresenter/>
                                    <!--IsChecked="{Binding IsEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}"-->
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <ScaleTransform x:Name="BackstageRootScaleTransform" ScaleX="0.75" ScaleY="0.75"/>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Static Visibility.Hidden}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.75" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.75" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
            <!--ToggleButton Width="100" Height="50" HorizontalAlignment="Left" VerticalAlignment="Top" IsChecked="{Binding IsOpen, Source={x:Reference RibbonBackstage}, Mode=TwoWay}">File</ToggleButton-->
            <!--Visibility="{Binding IsOpen, Source={x:Reference RibbonBackstage}, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=False}"-->
            <Fluent:BackstageTabControl x:Name="RibbonBackstageTabs">
                <!--Visibility="{Binding IsOpen, Source={x:Reference RibbonBackstage}, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=False}"-->
                <Fluent:Button x:Name="NewWindowButton" Header="New Window" Click="NewWindowButton_Click"/>
                <Fluent:Button x:Name="CloseWindowButton" Header="Close" Click="CloseWindowButton_Click"/>
                <!--Fluent:Button Header="New Window in New Process"/-->
                <Fluent:BackstageTabItem Header="Command prompt">
                    <StackPanel>
                        <Fluent:Button x:Name="OpenCmdButton" Header="Open command prompt" Click="OpenCmdButton_Click"/>
                        <Fluent:Button x:Name="OpenCmdAdminButton" Header="Open command prompt as administrator"/>
                    </StackPanel>
                </Fluent:BackstageTabItem>
                <Fluent:BackstageTabItem x:Name="PowerShellTabItem" Header="PowerShell">
                    <StackPanel>
                        <Fluent:Button x:Name="OpenPowerShellButton" Header="Open PowerShell" Click="OpenPowerShellButton_Click"/>
                        <Fluent:Button x:Name="OpenPowerShellAdminButton" Header="Open PowerShell as administrator"/>
                    </StackPanel>
                </Fluent:BackstageTabItem>
                <Fluent:BackstageTabItem Header="History" />
            </Fluent:BackstageTabControl>
        </ContentControl>
    </plex:PlexWindow.FullWindowContent>
    <plex:PlexWindow.TitleBarContent>
        <Fluent:RibbonTitleBar x:Name="RibbonTitleBar" Margin="48,0,64,0"/>
    </plex:PlexWindow.TitleBarContent>
    <plex:PlexWindow.ToolBarContent>
        <StackPanel Orientation="Vertical">
            <Fluent:Ribbon x:Name="RibbonControl" AutomaticStateManagement="True" IsAutomaticCollapseEnabled="True">
                <!--IsMinimizedChanged="RibbonControl_IsMinimizedChanged"-->
                <Fluent:Ribbon.Menu>
                    <Fluent:Backstage x:Name="RibbonBackstage" IsOpenChanged="RibbonBackstage_IsOpenChanged"/>
                </Fluent:Ribbon.Menu>
                <Fluent:RibbonTabItem Header="Home" ReduceOrder="Select,Clipboard,Open,Organize,New">
                    <Fluent:RibbonGroupBox x:Name="Clipboard" Header="Clipboard">
                        <Fluent:Button x:Name="CopyButton" Header="Copy" LargeIcon="{DynamicResource CopyButtonLargeIcon}" SizeDefinition="Large,Small" Click="CopyButton_Click"/>
                        <Fluent:Button x:Name="PasteButton" Header="Paste" LargeIcon="{DynamicResource PasteButtonLargeIcon}" SizeDefinition="Large,Small" Click="PasteButton_Click"/>
                        <Fluent:Button x:Name="CutButton" Header="Cut" Icon="{DynamicResource CutButtonIcon}" SizeDefinition="Middle,Small" Click="CutButton_Click"/>
                        <Fluent:Button x:Name="CopyPathButton" Header="Copy path" Icon="{DynamicResource CopyPathButtonIcon}" SizeDefinition="Middle,Small" Click="CopyPathButton_Click"/>
                        <Fluent:Button x:Name="PasteShortcutButton" Header="Paste shortcut" Icon="{DynamicResource PasteShortcutButtonIcon}" SizeDefinition="Middle,Small" Click="PasteShortcutButton_Click"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox x:Name="Organize" Header="Organize">
                        <Fluent:DropDownButton x:Name="MoveToButton" Header="Move to" LargeIcon="{DynamicResource MoveToButtonLargeIcon}" SizeDefinition="Large,Small"/>
                        <Fluent:DropDownButton x:Name="CopyToButton" Header="Copy to" LargeIcon="{DynamicResource CopyToButtonLargeIcon}" SizeDefinition="Large,Small"/>
                        <Fluent:SplitButton x:Name="DeleteButton" Header="Delet" LargeIcon="{DynamicResource DeletThisButtonLargeIcon}" SizeDefinition="Large,Small" Click="DeleteButton_Click">
                            <Fluent:MenuItem x:Name="RecycleMenuItem" Header="Recycle"/>
                            <Fluent:MenuItem x:Name="PermaDeleteItem" Header="Permenently Delete"/>
                        </Fluent:SplitButton>
                        <Fluent:Button x:Name="RenameButton" Header="Rename" LargeIcon="{DynamicResource RenameButtonLargeIcon}" SizeDefinition="Large,Small" Click="RenameButton_Click"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox x:Name="New" Header="New">
                        <Fluent:Button x:Name="NewFolderButton" Header="New folder" SizeDefinition="Large,Small" Click="NewFolderButton_Click"/>
                        <Fluent:DropDownButton x:Name="NewItemButton" Header="New item" SizeDefinition="Middle,Small"/>
                        <Fluent:DropDownButton x:Name="EasyAccessButton" Header="Easy Access" SizeDefinition="Middle,Small"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox x:Name="Open" Header="Open">
                        <Fluent:SplitButton x:Name="PropertiesButton" Header="Properties" SizeDefinition="Large,Small" Click="PropertiesButton_Click"/>
                        <Fluent:SplitButton x:Name="OpenButton" Header="Open" SizeDefinition="Middle,Small" Click="OpenButton_Click"/>
                        <Fluent:Button x:Name="EditButton" Header="Edit" SizeDefinition="Middle,Small" Click="EditButton_Click"/>
                        <Fluent:Button x:Name="HistoryButton" Header="History" SizeDefinition="Middle,Small" Click="HistoryButton_Click"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox x:Name="Select" Header="Select">
                        <Fluent:Button x:Name="SelectAllButton" Header="Select all" SizeDefinition="Middle,Small" Click="SelectAllButton_Click"/>
                        <Fluent:Button x:Name="SelectNoneButton" Header="Select none" SizeDefinition="Middle,Small" Click="SelectNoneButton_Click"/>
                        <Fluent:Button x:Name="InvertSelectionButton" Header="Invert selection" SizeDefinition="Middle,Small" Click="InvertSelectionButton_Click"/>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem Header="Share" ReduceOrder="ShareWith,Send,ShareBlank">
                    <Fluent:RibbonGroupBox x:Name="Send" Header="Send">
                        <Fluent:Button x:Name="EmailButton" Header="Email" SizeDefinition="Large,Large"/>
                        <Fluent:Button x:Name="Zip" Header="Zip" SizeDefinition="Large,Large"/>
                        <Fluent:Button x:Name="Burn" Header="Burn to disc" SizeDefinition="Middle,Small"/>
                        <Fluent:Button x:Name="Print" Header="Print" SizeDefinition="Middle,Small"/>
                        <Fluent:Button x:Name="Fax" Header="Fax" SizeDefinition="Middle,Small"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox x:Name="ShareWith" Header="Send">
                        <Fluent:Gallery/>
                        <Fluent:Button x:Name="StopSharingButton" Header="Stop sharing" SizeDefinition="Large,Large"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox x:Name="ShareBlank" Header="Send">
                        <Fluent:Button x:Name="AdvancedSecurityButton" Header="Advanced security" SizeDefinition="Large,Large"/>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem Header="View">
                    <Fluent:RibbonGroupBox Header="Panes">
                        <Fluent:Button Header="Test"/>
                        <Fluent:Button Header="Test"/>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Panes">
                        <Fluent:Button Header="Test"/>
                        <Fluent:Button Header="Test"/>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
            </Fluent:Ribbon>
            <DockPanel DockPanel.Dock="Top" Height="50">
                <StackPanel Orientation="Horizontal" Width="56" Height="34" Margin="15,0" VerticalAlignment="Center">
                    <StackPanel.Background>
                        <VisualBrush>
                            <VisualBrush.Visual>
                                <Path>
                                    <Path.Data>
                                        <PathGeometry Figures="m 12.327807 289.81714 c -5.4680527 0 -4.8553965 -1.76066 -7.9846772 -1.77066 -2.1058022 -0.0505 -4.30972111 1.76754 -4.3097212 4.45553 -8e-8 2.68799 2.2039189 4.50606 4.3097212 4.45553 3.1292805 -0.01 2.5166243 -1.77066 7.9846772 -1.77066 1.899459 0.0335 3.240643 -1.12201 3.240643 -2.68487 0 -1.56286 -1.341184 -2.71837 -3.240643 -2.68487 z" FillRule="NonZero"/>
                                    </Path.Data>
                                    <Path.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="#20000000" />
                                            <GradientStop Offset="1" Color="#60FFFFFF" />
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                </Path>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </StackPanel.Background>
                    <Button x:Name="BackButton" Style="{DynamicResource RoundButtonStyle}" Width="28" Height="28" Margin="3" Padding="-1,0,2,0" Content="{DynamicResource SmallBackArrowPathIcon}" Click="BackButton_Click" MouseRightButtonUp="BackButton_MouseRightButtonUp"/>
                    <Button x:Name="ForwardButton" Style="{DynamicResource RoundButtonStyle}" Width="17" Height="17" Margin="3" Padding="0,0,-1,0" Click="ForwardButton_Click" MouseRightButtonUp="ForwardButton_MouseRightButtonUp">
                        <ContentControl Content="{DynamicResource SmallForwardArrowPathIcon}">
                            <ContentControl.RenderTransform>
                                <ScaleTransform CenterX="7" CenterY="7" ScaleX="0.625" ScaleY="0.625"/>
                            </ContentControl.RenderTransform>
                        </ContentControl>
                    </Button>
                </StackPanel>
                <Grid VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="0,0,10,0">
                    <TextBox x:Name="AddressBox" VerticalAlignment="Center" Height="22" Style="{DynamicResource AddressBox}" PreviewMouseLeftButtonDown="AddressBox_PreviewMouseLeftButtonDown" LostFocus="AddressBox_LostFocus" KeyDown="AddressBox_KeyDown"/>
                    <!--Rectangle x:Name="BreadcrumbOuterSizingAid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="#01000000"/-->
                    <!--Border Width="{Binding Width, Source={x:Reference AddressBox}}" Height="{Binding Height, Source={x:Reference AddressBox}}" OpacityMask="{Binding OpacityMask, Source={x:Reference MaskGrid}}" BorderBrush="#01000000" BorderThickness="0,0,1,0"-->
                    <Grid HorizontalAlignment="Left" VerticalAlignment="Stretch">
                        <Rectangle x:Name="BreadcrumbSizingAid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsHitTestVisible="False"/>
                        <StackPanel x:Name="BreadcrumbsStackPanel" Orientation="Horizontal" HorizontalAlignment="Left">
                            <!-- IsHitTestVisible="False"-->
                            <StackPanel.OpacityMask>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <!--Grid Width="{Binding ActualWidth, Source={x:Reference AddressBox}}" Height="{Binding ActualHeight, Source={x:Reference AddressBox}}"-->
                                        <Border Background="Black" BorderBrush="Transparent" BorderThickness="1" CornerRadius="11,0,0,11" HorizontalAlignment="Left" Width="{Binding ActualWidth, Source={x:Reference BreadcrumbSizingAid}}" Height="{Binding ActualHeight, Source={x:Reference AddressBox}}"/>
                                        <!--/Grid-->
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </StackPanel.OpacityMask>
                        </StackPanel>
                    </Grid>
                    <!--/-->
                </Grid>
            </DockPanel>
        </StackPanel>
    </plex:PlexWindow.ToolBarContent>
    <DockPanel>
        <TreeView x:Name="NavigationPane" DockPanel.Dock="Left" Style="{DynamicResource NavigationPaneTreeViewStyle}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" SelectedItemChanged="NavigationPane_SelectedItemChanged">
            <TreeViewItem x:Name="FavoritesTreeViewItem" Header="Favorites" IsExpanded="True" ItemsSource="{Binding Favorites}" ItemTemplate="{DynamicResource NavigationFavoritesDataTemplate}" ItemContainerStyle="{DynamicResource NavigationFavoritesTreeViewItemStyle}"/>
            <TreeViewItem x:Name="ThisPcDiskTreeViewItem" IsExpanded="True" Header="Computer" ItemsSource="{Binding ComputerSubfolders}">
                <!--TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <EventSetter Event="Expanded" Handler="NavigationPane_Item_Expanded"/>
                    </Style>
                </TreeView.ItemContainerStyle-->
            </TreeViewItem>
        </TreeView>
        <Grid x:Name="DetailsPane" DockPanel.Dock="Top" Height="75">
            <Rectangle x:Name="DetailPaneSizingAid" VerticalAlignment="Stretch"/>
            <DockPanel>
                <Canvas x:Name="DetailsPaneIconCanvas" Width="{Binding ActualHeight, Source={x:Reference DetailPaneSizingAid}}" Background="Red" DockPanel.Dock="Left"/>
                <StackPanel Orientation="Vertical" DockPanel.Dock="Top">
                    <TextBlock x:Name="DetailsPaneFileNameTextBlock" Margin="10,10,0,0" FontSize="18"/>
                    <TextBlock x:Name="DetailsPaneFileTypeTextBlock" Margin="10,10,0,0"/>
                </StackPanel>
                <Rectangle/>
            </DockPanel>
        </Grid>
        <Grid x:Name="CurrentDirectoryGrid">
            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                <ListView x:Name="CurrentDirectoryListView" Style="{DynamicResource CurrentDirectoryListViewStyle}" SelectionMode="Extended" SelectionChanged="CurrentDirectoryListView_SelectionChanged" PreviewMouseLeftButtonDown="CurrentDirectoryListView_PreviewMouseLeftButtonDown" KeyDown="CurrentDirectoryListView_KeyDown" AllowDrop="True">
                    <ListView.ItemContainerStyle>
                        <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource CurrentDirectoryListViewItemStyle}">
                            <EventSetter Event="Control.MouseDoubleClick" Handler="CurrentDirectoryListView_Item_MouseDoubleClick"/>
                            <EventSetter Event="UIElement.MouseRightButtonUp" Handler="CurrentDirectoryListView_Item_MouseRightButtonUp"/>
                            <Setter Property="ContextMenu">
                                <Setter.Value>
                                    <apictrl:TouchableContextMenu>
                                        <MenuItem Header="Open" FontWeight="Bold">
                                            <MenuItem.Style>
                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource PlexMenuItemStyle}">
                                                    <EventSetter Event="UIElement.PreviewMouseLeftButtonUp" Handler="CurrentDirectoryListView_ItemContextMenu_Open_MouseLeftButtonUp"/>
                                                    <Setter Property="ItemContainerStyle" Value="{Binding Style, RelativeSource={RelativeSource Mode=Self}}"/>
                                                    <Setter Property="IsManipulationEnabled" Value="{Binding OpenedWithTouch, RelativeSource={RelativeSource AncestorType={x:Type apictrl:TouchableContextMenu}, Mode=FindAncestor}}"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsManipulationEnabled" Value="True">
                                                            <Setter Property="Height" Value="46.590925" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="Open with">
                                            <MenuItem.Items>
                                                
                                            </MenuItem.Items>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem Header="Share with">
                                            <MenuItem.Items>

                                            </MenuItem.Items>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem Header="Send to">
                                            <MenuItem.Items>

                                            </MenuItem.Items>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem Header="Cut">
                                            <MenuItem.Style>
                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource PlexMenuItemStyle}">
                                                    <EventSetter Event="UIElement.PreviewMouseLeftButtonUp" Handler="CurrentDirectoryListView_ItemContextMenu_Cut_MouseLeftButtonUp"/>
                                                    <Setter Property="ItemContainerStyle" Value="{Binding Style, RelativeSource={RelativeSource Mode=Self}}"/>
                                                    <Setter Property="IsManipulationEnabled" Value="{Binding OpenedWithTouch, RelativeSource={RelativeSource AncestorType={x:Type apictrl:TouchableContextMenu}, Mode=FindAncestor}}"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsManipulationEnabled" Value="True">
                                                            <Setter Property="Height" Value="46.590925" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="Copy">
                                            <MenuItem.Style>
                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource PlexMenuItemStyle}">
                                                    <EventSetter Event="UIElement.PreviewMouseLeftButtonUp" Handler="CurrentDirectoryListView_ItemContextMenu_Copy_MouseLeftButtonUp"/>
                                                    <Setter Property="ItemContainerStyle" Value="{Binding Style, RelativeSource={RelativeSource Mode=Self}}"/>
                                                    <Setter Property="IsManipulationEnabled" Value="{Binding OpenedWithTouch, RelativeSource={RelativeSource AncestorType={x:Type apictrl:TouchableContextMenu}, Mode=FindAncestor}}"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsManipulationEnabled" Value="True">
                                                            <Setter Property="Height" Value="46.590925" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem Header="Create shortcut"/>
                                        <MenuItem Header="Delete">
                                            <MenuItem.Style>
                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource PlexMenuItemStyle}">
                                                    <EventSetter Event="UIElement.PreviewMouseLeftButtonUp" Handler="CurrentDirectoryListView_ItemContextMenu_Delete_MouseLeftButtonUp"/>
                                                    <Setter Property="ItemContainerStyle" Value="{Binding Style, RelativeSource={RelativeSource Mode=Self}}"/>
                                                    <Setter Property="IsManipulationEnabled" Value="{Binding OpenedWithTouch, RelativeSource={RelativeSource AncestorType={x:Type apictrl:TouchableContextMenu}, Mode=FindAncestor}}"/>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsManipulationEnabled" Value="True">
                                                            <Setter Property="Height" Value="46.590925" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.Style>
                                        </MenuItem>
                                        <MenuItem Header="Rename"/>
                                        <Separator/>
                                        <MenuItem Header="Properties"/>
                                    </apictrl:TouchableContextMenu>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>
            </ScrollViewer>
            <Border x:Name="SelectionBorder" Background="#400000FF" BorderThickness="5" BorderBrush="#FF0000FF" CornerRadius="5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="0" Height="0" Visibility="Hidden"/>
        </Grid>
    </DockPanel>
</plex:PlexWindow>