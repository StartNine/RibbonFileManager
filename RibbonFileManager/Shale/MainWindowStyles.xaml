<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RibbonFileManager"
                    xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
                    xmlns:win="clr-namespace:Start9.UI.Wpf.Windows;assembly=Start9.UI.Wpf"
                    xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
                    xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                    xmlns:converters="clr-namespace:Fluent.Converters;assembly=Fluent"
                    xmlns:bread="clr-namespace:Start9.UI.Wpf.Breadcrumbs;assembly=Start9.UI.Wpf"
                    xmlns:rerr="clr-namespace:Start9.UI.Wpf.Rearranger;assembly=Start9.UI.Wpf"
                    xmlns:e="http://schemas.microsoft.com/xaml/behaviors">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Shale;component/Themes/Shale.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <conv:DoubleComparisonConverter x:Key="DoubleComparisonConverter"/>
    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <local:DriveFreeSpaceToUsedSpaceConverter x:Key="DriveFreeSpaceToUsedSpaceConverter"/>
    <local:DiskItemSubItemsTreeFilterConverter x:Key="DiskItemSubItemsTreeFilterConverter"/>
    <local:ObjectToTypeConverter x:Key="ObjectToTypeConverter"/>


    <!--#region Main Window Styles-->

    <Style x:Key="{x:Type local:MainWindow}" TargetType="{x:Type local:MainWindow}" BasedOn="{StaticResource {x:Type win:DecoratableWindow}}">
        <Setter Property="Padding" Value="0"/>
        <!--Setter Property="BorderThickness" Value="0,64,0,0"/-->
        <!--Setter Property="ShowTitlebarText" Value="{Binding ShowTitlebarText, Source={x:Static local:Config.Instance}}"/-->
        <Style.Triggers>
            <Trigger Property="InterfaceMode" Value="Ribbon">
                <Setter Property="TitlebarHeight" Value="62"/><!--54-->
                <!--Setter Property="Padding" Value="0,-24,0,0"/-->
                <!--Setter Property="BorderThickness" Value="0,54,0,0"/-->
            </Trigger>
            <Trigger Property="InterfaceMode" Value="CommandBar">
                <Setter Property="TitlebarHeight" Value="71"/><!--64-->
                <Setter Property="ShowTitlebarIcon" Value="{Binding ShowTitlebarText, Source={x:Static local:Config.Instance}}"/>
                <!--Setter Property="Padding" Value="0,-24,0,0"/-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RootGridStyle" TargetType="{x:Type Grid}">
        <!--Setter Property="Margin" Value="0,24,0,0"/--> <!--{Binding BorderThickness, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}/-->
    </Style>

    <Style x:Key="RearrangerStyle" TargetType="{x:Type rerr:Rearranger}" BasedOn="{StaticResource {x:Type rerr:Rearranger}}">
        <Setter Property="rerr:Rearranger.HideFrameWhenLocked" Value="True"/>
        <Setter Property="rerr:Rearranger.HideTitlebarWhenLocked" Value="True"/>
        <!--Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="-90"/>
            </Setter.Value>
        </Setter-->
    </Style>

    <!--#endregion Main Window Styles-->


    <!--#region Navigation Bar Styles-->

    <Style x:Key="NavigationBarBackgroundStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="rerr:Rearranger.HideFrameWhenLocked" Value="False"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <!--Rectangle x:Name="ShadowRectangle" VerticalAlignment="Top" Height="18" IsHitTestVisible="False" Grid.Column="0">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="BackgroundBorder" CornerRadius="3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                        </Border-->
                        <!--Grid x:Name="ContainerGrid" Margin="5"-->
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                        <!--/Grid-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="CommandBar">
                            <Setter TargetName="ShadowRectangle" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="BackgroundBorder" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ContainerGrid" Property="Margin" Value="0,0,0,5"/>
                        </DataTrigger-->
                        <!--DataTrigger Binding="{Binding IsMinimized, ElementName=Ribbon}" Value="True">
                            <Setter TargetName="ShadowRectangle" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon">
                <Setter Property="Panel.ZIndex" Value="999"/>
                <!--Setter Property="Height" Value="50"/-->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NavigationButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Style.Triggers>
            <!--DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon">
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </DataTrigger-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon"/>
                    <!--Condition Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, FallbackValue=True}" Value="False"/-->
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Path x:Key="NavigationBackButtonIcon" x:Shared="False" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 6 0 L 0 6 L 6 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" StrokeThickness="2"/>

    <Style x:Key="NavigationBackButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationButtonStyle}"/>

    <Path x:Key="NavigationForwardButtonIcon" x:Shared="False"  HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" StrokeThickness="2"/>

    <Style x:Key="NavigationForwardButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationButtonStyle}"/>

    <Path x:Key="NavigationHistoryButtonIcon" x:Shared="False" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 3 3 L 6 0 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:DropDownButton}}}"/>
    <!--M 0 0 L 6 6 L 12 0-->

    <Style x:Key="NavigationHistoryButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
        <!--Setter Property="Icon" Value="{StaticResource NavigationHistoryButtonIcon}"/-->
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Effect" Value="{DynamicResource DropShadow}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
                    <Grid Background="#01000000">
                        <!--Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000" Margin="{TemplateBinding Padding}">
                                <Label x:Name="Glyph" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="{TemplateBinding Content}"  FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" RenderOptions.EdgeMode="Aliased" IsTabStop="False" Margin="0" Padding="0" />
                            </Grid-->
                        <Grid x:Name="PART_ButtonBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="16" VerticalAlignment="Center" Content="{StaticResource NavigationHistoryButtonIcon}" Width="16" Margin="0" SnapsToDevicePixels="True" TextElement.Foreground="{TemplateBinding Foreground}"/>
                            <!--Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'-->
                            <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2 0 2 2" HasGlyph="{TemplateBinding HasTriangle}" Visibility="Collapsed"/>
                        </Grid>
                        <!--{converters:ObjectToImageConverter {Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}, '32,32', {Binding RelativeSource={RelativeSource TemplatedParent}}}-->
                        <Popup x:Name="PART_Popup" Placement="Left" VerticalOffset="{Binding ActualHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalOffset="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <Border CornerRadius="3" Margin="4,3,4,5" Effect="{DynamicResource DropShadow}">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderThickness="1" />
                                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" IsTabStop="False" Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" Margin="2,2,2,0"/>
                                                </ScrollViewer>
                                                <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                                    <Grid>
                                                        <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                        <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                    </Grid>
                                                </Border>
                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                    <!--Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/-->
                    <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
            </Trigger>
            <!--Trigger Property="IsDropDownOpen" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
            </Trigger-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Path x:Key="NavigationUpButtonIcon" x:Shared="False" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" StrokeThickness="2"/>

    <Style x:Key="NavigationUpButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationButtonStyle}"/>

    <Style x:Key="BreadcrumbsBarStyle" TargetType="{x:Type bread:BreadcrumbsBar}" BasedOn="{StaticResource {x:Type bread:BreadcrumbsBar}}">
        <Style.Resources>
            <HierarchicalDataTemplate DataType="{x:Type local:Location}">
                <TextBlock Text="{Binding Name}"/>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type local:DirectoryQuery}" ItemsSource="{Binding Item.SubItems}">
                <TextBlock Text="{Binding Name}"/>
                <HierarchicalDataTemplate.ItemTemplate>
                    <DataTemplate DataType="{x:Type local:DiskItem}">
                        <DockPanel>
                            <Rectangle Width="16" Height="16" Margin="0,0,4,0" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                            <TextBlock Text="{Binding ItemDisplayName}"/>
                        </DockPanel>
                    </DataTemplate>
                </HierarchicalDataTemplate.ItemTemplate>
            </HierarchicalDataTemplate>
        </Style.Resources>
    </Style>

    <Canvas x:Key="ActionBoxSearchIcon" x:Shared="False" Width="16" Height="16">
        <Path Data="M 0 7 L 7 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Top="9"/>
        <Ellipse Width="11" Height="11" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Left="5"/>
    </Canvas>

    <Path x:Key="CancelIconPath" x:Shared="False" Data="M 0 0 L 16 16 M 0 16 L 16 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Visibility="Collapsed"/>

    <Style x:Key="NavigationSearchBoxStyle" TargetType="{x:Type ui:ActionBox}" BasedOn="{StaticResource {x:Type ui:ActionBox}}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="ButtonContent" Value="{DynamicResource ActionBoxSearchIcon}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ButtonContent" Value="{DynamicResource CancelIconPath}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="zNavigationSearchBoxStyle" TargetType="{x:Type local:SearchBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SearchBox}">
                    <DockPanel>
                        <ToggleButton x:Name="PART_GoStopToggleButton" DockPanel.Dock="Right">
                            <ui:AttachedProperties.CornerCurves>
                                <ui:CornerCurves TopLeft="False" TopRight="True" BottomRight="True" BottomLeft="False"/>
                            </ui:AttachedProperties.CornerCurves>
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid>
                                                    <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="#FFB58888" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="#FFEEB3B3"/>
                                                                <GradientStop Offset="1" Color="#FFDAA4A4"/>
                                                            </LinearGradientBrush>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE0A8A8"/>
                                                                    <GradientStop Offset="1" Color="#FFCC9999"/>
                                                                </LinearGradientBrush>
                                                            </Border.Background>
                                                        </Border>
                                                        <!-- BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border-->
                                                    </Border>
                                                    <!--Border x:Name="CheckedIdleBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="#FFB58888" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="#FFEEB3B3"/>
                                                                <GradientStop Offset="1" Color="#FFDAA4A4"/>
                                                            </LinearGradientBrush>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE0A8A8"/>
                                                                    <GradientStop Offset="1" Color="#FFCC9999"/>
                                                                </LinearGradientBrush>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border-->
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <!--ContentControl Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False" IsTabStop="False" /-->
                                                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                        <Canvas x:Name="SearchIconCanvas" Width="16" Height="16">
                                                            <Path Data="M 0 7 L 7 0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Top="9"/>
                                                            <Ellipse Width="11" Height="11" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Left="5"/>
                                                        </Canvas>
                                                        <!--Canvas x:Name="SearchIconCanvas" Width="16" Height="16">
                                                            <Ellipse Width="10" Height="10" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Left="6" Canvas.Top="0"/>
                                                            <Path Data="M 0 8 L 8 0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Left="0" Canvas.Top="8"/>
                                                        </Canvas-->
                                                        <Path x:Name="CancelIconPath" Data="M 0 0 L 16 16 M 0 16 L 16 0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Visibility="Collapsed"/>
                                                    </Grid>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True" />
                                                            <Condition Property="IsPressed" Value="False" />
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.EnterActions>
                                                        <MultiTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.ExitActions>
                                                    </MultiTrigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                        <Setter TargetName="SearchIconCanvas" Property="Visibility" Value="Collapsed"/>
                                                        <Setter TargetName="CancelIconPath" Property="Visibility" Value="Visible"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="False"/>
                                                            <Condition Property="IsChecked" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.EnterActions>
                                                        <MultiTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.ExitActions>
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="False"/>
                                                            <Condition Property="IsChecked" Value="True"/>
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.EnterActions>
                                                        <MultiTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.ExitActions>
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <Grid>
                            <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,0,0,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1,1,0,1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,0,0,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1,1,0,1" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                </Border.Background>
                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1,1,0,1" Opacity="0">
                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="0" Padding="0" Background="Transparent" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                            <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1,1,0,1" Opacity="0">
                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                            </Border>
                            <Grid Margin="{TemplateBinding Padding}">
                                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="0" Padding="0"/>
                                <TextBlock x:Name="PART_WatermarkTextBlock" Text="{TemplateBinding WatermarkText}" Foreground="{TemplateBinding Foreground}" Opacity="0.5" VerticalAlignment="Center" TextAlignment="Left"/>
                            </Grid>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="PART_ContentHost" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="PART_ContentHost" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavigationAddressBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="5,0,0,0"/>
    </Style>

    <!--#endregion Navigation Bar Styles-->


    <!--#region Main Content Styles-->

    <Style x:Key="ToolbarBackgroundContentControlStyle" TargetType="ContentControl">
        <Setter Property="Panel.ZIndex" Value="9999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}"/>
                        <ContentPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="None">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource HorizontalPanelBackgroundGradientStops}"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="{DynamicResource HorizontalPanelBorderBrush}"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Style x:Key="FileLabelStyle" TargetType="Label">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border>
                        <AccessText Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextWrapping="Wrap" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <Control x:Key="DiskItemIconDisplayControl" x:Shared="False" HorizontalAlignment="Stretch" Height="{Binding ActualWidth, RelativeSource={RelativeSource Mode=Self}}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.BitmapScalingMode="NearestNeighbor" RenderTransformOrigin="0.5,0.5">
        <!--RenderOptions.EdgeMode="Aliased"-->
        <!--DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"-->
        <Control.Style>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Control}">
                            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <e:Interaction.Behaviors>
                                    <local:IconScaleBehavior ScaleTarget="{Binding Source={x:Reference ScaleableGrid}}"/>
                                </e:Interaction.Behaviors>
                                <!--Width="48" Height="48"-->
                                <Rectangle x:Name="IconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{Binding ItemExtraLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='48'}" RenderOptions.BitmapScalingMode="Linear"/>
                                <Grid x:Name="ScaleableGrid" Width="48" Height="48" RenderTransformOrigin="0.5,0.5">
                                    <Grid x:Name="FolderIconGrid" Width="48" Height="48" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                                        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                                        <Border x:Name="FirstChildIconBorder" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="32" Height="32" Margin="16,2,-16,2" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Effect="{DynamicResource IconInnerShadow}" RenderTransformOrigin="0,0" Visibility="Collapsed">
                                            <Rectangle x:Name="FirstChildIconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                        </Border>
                                        <Border x:Name="SecondChildIconBorder" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="32" Height="32" Margin="10,12,-10,-12" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Effect="{DynamicResource IconInnerShadow}" RenderTransformOrigin="0,0" Visibility="Collapsed">
                                            <Rectangle x:Name="SecondChildIconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                        </Border>
                                        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
                                    </Grid>
                                    <ContentPresenter x:Name="SpecialIconPresenter" Visibility="Collapsed" Content="{Binding SpecialIcon}"/>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ItemCategory}" Value="Directory"/>
                                        <Condition Binding="{Binding IsDrive}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="FolderIconGrid" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                                <!--DataTrigger Binding="{Binding FirstChildIcon}" Value="{x:Null}">
                                    <Setter TargetName="FirstChildIconBorder" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="FirstChildIconRectangle" Property="Fill" Value="Transparent"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SecondChildIcon}" Value="{x:Null}">
                                    <Setter TargetName="SecondChildIconBorder" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SecondChildIconRectangle" Property="Fill" Value="Transparent"/>
                                </DataTrigger-->
                                <DataTrigger Binding="{Binding HasSpecialIcon}" Value="True">
                                    <Setter TargetName="FolderIconGrid" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SpecialIconPresenter" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g0}" Value="True">
                                    <Setter TargetName="FirstChildIconBorder" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="FirstChildIconRectangle" Property="Fill" Value="{Binding SubItems[0].ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g1}" Value="True">
                                    <Setter TargetName="SecondChildIconBorder" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="SecondChildIconRectangle" Property="Fill" Value="{Binding SubItems[1].ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Control.Style>
    </Control>

    <Style x:Key="CurrentDirectoryListViewStyle" TargetType="{x:Type ListView}">
        <Style.Resources>
            <DataTemplate x:Key="CurrentDirectoryListViewColumnHeaderAscendingTemplate">
                <Grid>
                    <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" HorizontalAlignment="Left" TextAlignment="Left" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <RotateTransform Angle="-90"/>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="CurrentDirectoryListViewColumnHeaderDescendingTemplate">
                <Grid>
                    <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" HorizontalAlignment="Left" TextAlignment="Left" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <RotateTransform Angle="90"/>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
            </DataTemplate>

            <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Type ScrollViewer}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="GridViewHeaderRow" Height="0"/>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                          AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                          Grid.Column="0" Grid.Row="0" />
                                <ScrollContentPresenter Margin="{TemplateBinding Padding}" Grid.Column="0" Grid.Row="1"/>
                                <Rectangle x:Name="BottomShadow" VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False" Grid.Column="0" Grid.Row="1">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <ScrollBar x:Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2">
                                    <ui:AttachedProperties.CornerCurves>
                                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                                    </ui:AttachedProperties.CornerCurves>
                                </ScrollBar>
                                <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="2">
                                    <ui:AttachedProperties.CornerCurves>
                                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                                    </ui:AttachedProperties.CornerCurves>
                                </ScrollBar>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Details">
                                    <Setter TargetName="GridViewHeaderRow" Property="Height" Value="24"/>
                                </DataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="ComputedHorizontalScrollBarVisibility" Value="Visible"/>
                                        <Condition Property="ComputedVerticalScrollBarVisibility" Value="Visible"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="BottomShadow" Property="Grid.Column" Value="1"/>
                                    <Setter TargetName="BottomShadow" Property="Grid.Row" Value="1"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu x:Name="ItemContextMenu">
                    <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                    <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                    <Separator/>
                    <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                    <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                    <Separator/>
                    <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                    <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                    <Separator/>
                    <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                    <e:Interaction.Behaviors>
                        <local:ItemContextMenuBehavior OpenMenuItem="{Binding Source={x:Reference OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference RenameMenuItem}}" PropertiesMenuItem="{Binding Source={x:Reference PropertiesMenuItem}}"/>
                        <!--RenameTextBox="{Binding Source={x:Reference RenameTextBox}}"-->
                        <!--WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}, Mode=OneWay}"-->
                        <!--TargetItem="{Binding}"-->
                    </e:Interaction.Behaviors>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Panel.ZIndex" Value="-100"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="GridView.AllowsColumnReorder" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ScrollContentPresenter}}}"/>
                    <!--Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" KeyboardNavigation.DirectionalNavigation="Local" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"-->
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <!--DockPanel-->
                    <!--GridViewHeaderRowPresenter/>
                        < Columns="{TemplateBinding View.Columns}"
                                          ColumnHeaderContainerStyle="{TemplateBinding View.ColumnHeaderContainerStyle}"
                                          ColumnHeaderTemplate="{TemplateBinding View.ColumnHeaderTemplate}"
                                          ColumnHeaderTemplateSelector="{TemplateBinding View.ColumnHeaderTemplateSelector}"
                                          AllowsColumnReorder="{TemplateBinding View.AllowsColumnReorder}"
                                          ColumnHeaderContextMenu="{TemplateBinding View.ColumnHeaderContextMenu}"
                                          ColumnHeaderToolTip="{TemplateBinding View.ColumnHeaderToolTip}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"-->
                    <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                        <ItemsPresenter MaxWidth="{TemplateBinding ActualWidth}"/>
                        <!--WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" KeyboardNavigation.DirectionalNavigation="Local" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/-->
                    </ScrollViewer>
                    <!--/DockPanel-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                    <!--Setter Property="ContextMenu" Value="{DynamicResource ItemContextMenu}"/-->
                    <Setter Property="ui:AttachedProperties.CornerCurves">
                        <Setter.Value>
                            <ui:CornerCurves TopLeft="True" TopRight="True" BottomRight="True" BottomLeft="True"/>
                        </Setter.Value>
                    </Setter>
                    <!--Setter Property="Opacity" Value="0"/>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                    <Setter Property="LayoutTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX="0" ScaleY="1"/>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" To="1" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </Style.Triggers-->
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon">
                <Setter Property="ui:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <ui:CornerCurves TopLeft="False" TopRight="True" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="CommandBar">
                <Setter Property="ui:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Icons">
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid>
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <Grid>
                                <StackPanel x:Name="RootStackPanel" Orientation="Vertical">
                                    <e:Interaction.Behaviors>
                                        <local:ClickToOpenBehavior x:Name="ClickToOpen" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}" />
                                        <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                    </e:Interaction.Behaviors>
                                    <Grid>
                                        <ContentPresenter x:Name="IconContentPresenter" Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="{Binding Path=IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}, Mode=OneWay, FallbackValue=48}" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True">
                                            <e:Interaction.Behaviors>
                                                <local:RenderTargetBaitAndSwitchBehavior/>
                                            </e:Interaction.Behaviors>
                                        </ContentPresenter>
                                        <Grid x:Name="ChildIconsGrid" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Width="1" Height="{Binding ActualWidth, RelativeSource={RelativeSource Mode=Self}}" Margin="-3" UseLayoutRounding="True" Effect="{DynamicResource IconOuterShadow}">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Border Margin="1" CornerRadius="3" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" Grid.RowSpan="2">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                                </Border.Background>
                                                <Rectangle x:Name="Item0Icon" RadiusX="3" RadiusY="3" />
                                            </Border>
                                            <Border Margin="1" CornerRadius="3" Grid.Column="2" Grid.Row="0">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,3" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                                </Border.Background>
                                                <Rectangle x:Name="Item1Icon" RadiusX="3" RadiusY="3" />
                                            </Border>
                                            <Border Margin="1" CornerRadius="3" Grid.Column="2" Grid.Row="1">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,-1" EndPoint="0,2" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                                </Border.Background>
                                                <Rectangle x:Name="Item2Icon" RadiusX="3" RadiusY="3" />
                                            </Border>
                                            <Border Margin="1" CornerRadius="3" Grid.Column="2" Grid.Row="2">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,-2" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                                </Border.Background>
                                                <Rectangle x:Name="Item3Icon" RadiusX="3" RadiusY="3" />
                                            </Border>
                                            <Border Margin="1" CornerRadius="3" Grid.Column="1" Grid.Row="2">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,-2" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                                </Border.Background>
                                                <Rectangle x:Name="Item4Icon" RadiusX="3" RadiusY="3" />
                                            </Border>
                                            <Border Margin="1" CornerRadius="3" Grid.Column="0" Grid.Row="2">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,-2" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                                </Border.Background>
                                                <Rectangle x:Name="Item5Icon" RadiusX="3" RadiusY="3" />
                                            </Border>
                                        </Grid>
                                    </Grid>
                                    <Grid x:Name="NameGrid" Width="48">
                                        <Grid x:Name="InnerNameGrid" Margin="-3,3,-3,0" MaxHeight="57">
                                            <TextBlock x:Name="NameTextBlock" Text="{Binding ItemDisplayName}" HorizontalAlignment="Stretch" TextAlignment="Center" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" TextWrapping="Wrap"/>
                                            <!-- Style="{DynamicResource FileLabelStyle}"-->
                                            <!--TextElement.TextWrapping="Wrap"-->
                                            <!--{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}-->
                                            <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Stretch" MaxWidth="48" TextWrapping="Wrap">
                                                <e:Interaction.Behaviors>
                                                    <!--{Binding WindowContent, Source={x:Reference ClickToOpen}}-->
                                                    <local:ItemRenameBehavior TargetItem="{Binding}" IsRenaming="{Binding IsRenaming}"/>
                                                </e:Interaction.Behaviors>
                                            </TextBox>
                                        </Grid>
                                    </Grid>
                                </StackPanel>
                                <CheckBox x:Name="SelectionCheckBox" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="{Binding ShowItemSelectionCheckBoxes, Source={x:Static local:Config.Instance}, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <!--DataTrigger Binding="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}, FallbackValue=1.0}" Value="16">
                                    <Setter TargetName="RootStackPanel" Property="Orientation" Value="Horizontal"/>
                                    <Setter TargetName="RootStackPanel" Property="Width" Value="225"/>
                                    <Setter TargetName="NameGrid" Property="Width" Value="Auto"/>
                                    <Setter TargetName="InnerNameGrid" Property="Margin" Value="3,0,0,0"/>
                                </DataTrigger-->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ShowEnhancedFolderIcons, Source={x:Static local:Config.Instance}}" Value="True"/>
                                        <Condition Binding="{Binding IsVisible, ElementName=ChildIconsGrid}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ChildIconsGrid" Property="Width" Value="{Binding Path=IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}, Mode=OneWay, FallbackValue=48}"/>
                                </MultiDataTrigger>
                                <Trigger SourceName="RenameTextBox" Property="IsVisible" Value="True">
                                    <Setter TargetName="NameTextBlock" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="SelectionCheckBox" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding HasSpecialIcon}" Value="False"/>
                                        <Condition Binding="{Binding ItemCategory}" Value="Directory"/>
                                        <Condition Binding="{Binding IsDrive}" Value="False"/>
                                        <Condition Binding="{Binding ShowEnhancedFolderIcons, Source={x:Static local:Config.Instance}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="IconContentPresenter" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="ChildIconsGrid" Property="Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g0}" Value="True">
                                    <Setter TargetName="Item0Icon" Property="Fill" Value="{Binding SubItems[0].ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g1}" Value="True">
                                    <Setter TargetName="Item1Icon" Property="Fill" Value="{Binding SubItems[1].ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g2}" Value="True">
                                    <Setter TargetName="Item2Icon" Property="Fill" Value="{Binding SubItems[2].ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g3}" Value="True">
                                    <Setter TargetName="Item3Icon" Property="Fill" Value="{Binding SubItems[3].ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g4}" Value="True">
                                    <Setter TargetName="Item4Icon" Property="Fill" Value="{Binding SubItems[4].ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SubItems.Count, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter=g5}" Value="True">
                                    <Setter TargetName="Item5Icon" Property="Fill" Value="{Binding SubItems[5].ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Details">
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <DockPanel>
                                <GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns,RelativeSource={RelativeSource Mode=TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top"/>
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="View">
                    <Setter.Value>
                        <GridView>
                            <GridViewColumn Header="Name" Width="160">
                                <!-- DisplayMemberBinding="{Binding ItemDisplayName}"-->
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type local:DiskItem}">
                                        <DockPanel>
                                            <e:Interaction.Behaviors>
                                                <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                                <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                            </e:Interaction.Behaviors>
                                            <DockPanel.ContextMenu>
                                                <ContextMenu x:Name="ItemContextMenu">
                                                    <!-- Opened="TouchableContextMenu_Opened"-->
                                                    <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                                    <!--Click="OpenMenuItem_Click"-->
                                                    <!--Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}"-->
                                                    <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                                    <!-- Click="RunAsAdminMenuItem_Click"-->
                                                    <Separator/>
                                                    <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                                    <!-- Click="CopyMenuItem_Click"-->
                                                    <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                                    <!-- Click="CutMenuItem_Click"-->
                                                    <Separator/>
                                                    <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                                    <!-- Click="DeleteMenuItem_Click"-->
                                                    <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                                    <Separator/>
                                                    <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                                    <!-- Click="PropertiesMenuItem_Click"-->
                                                    <e:Interaction.Behaviors>
                                                        <local:ItemContextMenuBehavior WindowContent="{Binding Path=WindowContent, Source={x:Reference ClickToOpen}, Mode=OneWay}" OpenMenuItem="{Binding Source={x:Reference Name=OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference Name=RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference Name=CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference Name=CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference Name=RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference Name=RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference Name=PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                                    </e:Interaction.Behaviors>
                                                </ContextMenu>
                                            </DockPanel.ContextMenu>
                                            <Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" DockPanel.Dock="Left"/>
                                            <Grid>
                                                <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap" Margin="5,0,0,0"/>
                                                <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                                    <e:Interaction.Behaviors>
                                                        <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenaming}"/>
                                                    </e:Interaction.Behaviors>
                                                </TextBox>
                                            </Grid>
                                        </DockPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="Type" Width="120" DisplayMemberBinding="{Binding ItemDisplayType}"/>
                            <GridViewColumn Header="Size" Width="80" DisplayMemberBinding="{Binding FriendlyItemSize}"/>
                        </GridView>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Tiles">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <DockPanel Width="240" Height="42">
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <Grid DockPanel.Dock="Left">
                                    <ContentPresenter x:Name="IconContentPresenter" Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Center" Width="32" Height="32" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True">
                                        <e:Interaction.Behaviors>
                                            <local:RenderTargetBaitAndSwitchBehavior/>
                                        </e:Interaction.Behaviors>
                                    </ContentPresenter>
                                    <CheckBox x:Name="SelectionCheckBox" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="{Binding ShowItemSelectionCheckBoxes, Source={x:Static local:Config.Instance}, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="0" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                                </Grid>
                                <StackPanel Margin="5,0,0,0" Orientation="Vertical" VerticalAlignment="Center">
                                    <Grid>
                                        <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap"/>
                                        <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Stretch" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                            <e:Interaction.Behaviors>
                                                <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenaming}"/>
                                            </e:Interaction.Behaviors>
                                        </TextBox>
                                    </Grid>
                                    <ProgressBar x:Name="DriveSpaceProgressBar" HorizontalAlignment="Stretch" Minimum="0" Maximum="{Binding ItemSize, Mode=OneWay}" Visibility="Collapsed">
                                        <ProgressBar.Value>
                                            <MultiBinding Converter="{StaticResource DriveFreeSpaceToUsedSpaceConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding Path="DriveFreeSpace" Mode="OneWay"/>
                                                    <Binding Path="ItemSize" Mode="OneWay"/>
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </ProgressBar.Value>
                                    </ProgressBar>
                                    <StackPanel x:Name="DriveSpaceStackPanel" Orientation="Horizontal" HorizontalAlignment="Left" Visibility="Collapsed">
                                        <TextBlock Text="{Binding FriendlyDriveFreeSpace, Mode=OneWay}" HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                        <TextBlock Text=" free of " HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                        <TextBlock Text="{Binding FriendlyItemSize, Mode=OneWay}" HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                    </StackPanel>
                                </StackPanel>
                            </DockPanel>
                            <DataTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="SelectionCheckBox" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding IsDrive}" Value="True">
                                    <Setter TargetName="DriveSpaceProgressBar" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="DriveSpaceStackPanel" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" KeyboardNavigation.DirectionalNavigation="Local" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="List">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <DockPanel>
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <!--Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" DockPanel.Dock="Left"/-->
                                <!--ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="16">
                                    <e:Interaction.Behaviors>
                                        <local:IconScaleBehavior/>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter-->
                                <Grid DockPanel.Dock="Left">
                                    <ContentPresenter x:Name="IconContentPresenter" Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Center" Width="16" Height="16" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True">
                                        <e:Interaction.Behaviors>
                                            <local:RenderTargetBaitAndSwitchBehavior/>
                                        </e:Interaction.Behaviors>
                                    </ContentPresenter>
                                    <CheckBox x:Name="SelectionCheckBox" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="{Binding ShowItemSelectionCheckBoxes, Source={x:Static local:Config.Instance}, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="0" Padding="0" MaxWidth="16" MaxHeight="16" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Grid>
                                <Grid>
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap" Margin="5,0,0,0"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenaming}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                            </DockPanel>
                            <DataTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="SelectionCheckBox" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                        <!--DataTemplate DataType="{x:Type local:DiskItem}">
                            <StackPanel Orientation="Horizontal" Height="16">
                                <StackPanel.ContextMenu>
                                    <ContextMenu x:Name="ItemContextMenu">
                                        <e:Interaction.Behaviors>
                                            <local:ItemContextMenuBehavior WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" OpenMenuItem="{Binding Source={x:Reference Name=OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference Name=RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference Name=CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference Name=CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference Name=RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference Name=RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference Name=PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                        </e:Interaction.Behaviors>
                                        <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                        <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                        <Separator/>
                                        <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                        <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                        <Separator/>
                                        <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                        <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                        <Separator/>
                                        <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                    </ContextMenu>
                                </StackPanel.ContextMenu>
                                <Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>
                                <Grid HorizontalAlignment="Left" Margin="5,0,0,0">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </DataTemplate-->
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <ItemsPresenter/>
                                <!--WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/-->
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Content">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <Grid>
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="32"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="192"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <!--Rectangle HorizontalAlignment="Center" Width="32" Height="32" Fill="{Binding ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"/-->
                                <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="32" Grid.Column="0" Grid.Row="0" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True">
                                    <e:Interaction.Behaviors>
                                        <local:IconScaleBehavior/>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter>
                                <Grid HorizontalAlignment="Left" Grid.Column="1" Grid.Row="0">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenaming}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Type:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding ItemDisplayType}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="0">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Date modified:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="NYI"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Size:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding FriendlyItemSize}"/>
                                </StackPanel>
                                <CheckBox x:Name="SelectionCheckBox" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="{Binding ShowItemSelectionCheckBoxes, Source={x:Static local:Config.Instance}, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="0" Grid.Column="0"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="SelectionCheckBox" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                        <!--DataTemplate DataType="{x:Type local:DiskItem}">
                            <Grid Height="32">
                                <Grid.ContextMenu>
                                    <ContextMenu x:Name="ItemContextMenu">
                                        <e:Interaction.Behaviors>
                                            <local:ItemContextMenuBehavior WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" OpenMenuItem="{Binding Source={x:Reference Name=OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference Name=RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference Name=CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference Name=CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference Name=RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference Name=RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference Name=PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                        </e:Interaction.Behaviors>
                                        <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                        <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                        <Separator/>
                                        <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                        <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                        <Separator/>
                                        <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                        <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                        <Separator/>
                                        <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                    </ContextMenu>
                                </Grid.ContextMenu>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="32"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="192"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle HorizontalAlignment="Center" Width="32" Height="32" Fill="{Binding ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"/>
                                <Grid HorizontalAlignment="Left" Grid.Column="1" Grid.Row="0">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Type:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding ItemDisplayType}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="0">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Date modified:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="NYI"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Size:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding FriendlyItemSize}"/>
                                </StackPanel>
                            </Grid>
                        </DataTemplate-->
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="CurrentDirectoryListViewGroupHeaderTemplate"/>

    <Style x:Key="CurrentDirectoryListViewGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Expander x:Name="ContentExpander" Header="{Binding Name}" IsExpanded="True">
                        <!--Expander.Template>
                            <ControlTemplate TargetType="{x:Type Expander}">
                                <Border CornerRadius="3,4,4,3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}" Grid.RowSpan="2">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Grid Margin="4">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition x:Name="ContentRow" Height="{Binding DesiredSize.Height, ElementName=Content}"/>
                                        </Grid.RowDefinitions>
                                        <DockPanel Grid.Row="0">
                                            <ToggleButton OverridesDefaultStyle="True" IsChecked="{Binding IsExpanded, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Left">
                                                <ToggleButton.Style>
                                                    <Style TargetType="ToggleButton">
                                                        <Setter Property="Background" Value="Transparent" />
                                                        <Setter Property="BorderBrush" Value="Transparent" />
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
                                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                        <Setter Property="BorderThickness" Value="0"/>
                                                        <Setter Property="Margin" Value="0"/>
                                                        <Setter Property="Width" Value="30"/>
                                                        <Setter Property="Height" Value="30"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="ToggleButton">
                                                                    <Grid Background="#01000000" Effect="{DynamicResource DropShadow}" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True">
                                                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                                                            <Path.RenderTransform>
                                                                                <RotateTransform Angle="0"/>
                                                                            </Path.RenderTransform>
                                                                        </Path>
                                                                        <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,0,1,0" Effect="{DynamicResource DropShadow}" RenderTransformOrigin="0.5,0.5"/>
                                                                    </Grid>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsPressed" Value="True">
                                                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsChecked" Value="True">
                                                                            <Trigger.EnterActions>
                                                                                <BeginStoryboard>
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="90" Duration="0:0:0.125"/>
                                                                                    </Storyboard>
                                                                                </BeginStoryboard>
                                                                            </Trigger.EnterActions>
                                                                            <Trigger.ExitActions>
                                                                                <BeginStoryboard>
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125"/>
                                                                                    </Storyboard>
                                                                                </BeginStoryboard>
                                                                            </Trigger.ExitActions>
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ToggleButton.Style>
                                            </ToggleButton>
                                            <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" TextElement.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextElement.FontSize="14" Opacity="0.5" VerticalAlignment="Center"/>
                                        </DockPanel>
                                        <Border x:Name="Content" Grid.Row="1">
                                            <Border.LayoutTransform>
                                                <ScaleTransform ScaleY="1"/>
                                            </Border.LayoutTransform>
                                            <ContentPresenter Margin="0,5,0,0"/>
                                        </Border>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsExpanded" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Expander.Template-->
                        <ItemsPresenter/>
                    </Expander>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Name}" Value="False">
                            <Setter TargetName="ContentExpander" Property="Header" Value="Folders"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Name}" Value="True">
                            <Setter TargetName="ContentExpander" Property="Header" Value="Devices and drives"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="CurrentDirectoryListViewItemControlTemplate" TargetType="{x:Type ListViewItem}">
        <Grid>
            <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                </Border.Background>
                <Border x:Name="HoverInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                    </Border.Background>
                </Border>
            </Border>
            <Border x:Name="SelectedBackground" CornerRadius="{Binding CornerRadius, ElementName=HoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                </Border.Background>
                <Border CornerRadius="{Binding CornerRadius, ElementName=HoverInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                    </Border.Background>
                </Border>
            </Border>
            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                <ContentPresenter x:Name="PART_ContentPresenter" Margin="0" Visibility="Hidden"/>
                <DockPanel>
                    <Grid x:Name="SelectorCheckBoxGrid" VerticalAlignment="Top">
                        <CheckBox x:Name="SelectorCheckBox" IsThreeState="False" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="Collapsed" DockPanel.Dock="Left"/>
                    </Grid>
                    <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" Visibility="Visible" />
                </DockPanel>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="NavigationTreePaneContentControlStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="rerr:Rearranger.HideFrameWhenLocked" Value="False"/>
    </Style>

    <Style x:Key="FavoritesTreeViewStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Style.Resources>
            <HierarchicalDataTemplate DataType="{x:Type local:Location}">
                <!--, Converter={StaticResource DiskItemSubItemsTreeFilterConverter}-->
                <StackPanel Orientation="Horizontal" Height="16">
                    <!--Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" SnapsToDevicePixels="True" UseLayoutRounding="True" RenderOptions.EdgeMode="Aliased"/-->
                    <Grid VerticalAlignment="Stretch" Width="16">
                        <ContentPresenter x:Name="SpecialIconPresenter" Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                            <ContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleX="0.333333333333333" ScaleY="0.333333333333333"/>
                            </ContentPresenter.LayoutTransform>
                            <e:Interaction.Behaviors>
                                <local:IconScaleBehavior/>
                            </e:Interaction.Behaviors>
                        </ContentPresenter>
                        <Rectangle x:Name="IconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{Binding ItemExtraLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" RenderOptions.BitmapScalingMode="Linear"/>
                    </Grid>
                    <ContentPresenter Content="{Binding Name}" RecognizesAccessKey="True" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}}" Margin="5,0,0,0">
                        <ContentPresenter.Resources>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                            </Style>
                        </ContentPresenter.Resources>
                    </ContentPresenter>
                </StackPanel>
                <HierarchicalDataTemplate.Triggers>
                    <DataTrigger Binding="{Binding HasSpecialIcon}" Value="True">
                        <Setter TargetName="SpecialIconPresenter" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="SpecialIconPresenter" Property="Content" Value="{Binding SpecialIcon}"/>
                        <Setter TargetName="IconRectangle" Property="Fill" Value="{x:Null}"/>
                        <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </HierarchicalDataTemplate.Triggers>
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type local:DirectoryQuery}" ItemsSource="{Binding Item.SubItems}">
                <!--, Converter={StaticResource DiskItemSubItemsTreeFilterConverter}-->
                <StackPanel Orientation="Horizontal" Height="16">
                    <!--Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" SnapsToDevicePixels="True" UseLayoutRounding="True" RenderOptions.EdgeMode="Aliased"/-->
                    <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="16" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True">
                        <e:Interaction.Behaviors>
                            <local:IconScaleBehavior/>
                        </e:Interaction.Behaviors>
                    </ContentPresenter>
                    <ContentPresenter Content="{Binding Name}" RecognizesAccessKey="True" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}}" Margin="5,0,0,0">
                        <ContentPresenter.Resources>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                            </Style>
                        </ContentPresenter.Resources>
                    </ContentPresenter>
                </StackPanel>
            </HierarchicalDataTemplate>
        </Style.Resources>
        <!--Setter Property="BorderThickness" Value="0"/-->
    </Style>
    <Style x:Key="zFavoritesTreeViewStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="Panel.ZIndex" Value="9999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Rectangle x:Name="BottomShadow" VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border CornerRadius="3,4,4,3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <ScrollViewer Focusable="False" CanContentScroll="False">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="FavoritesTreeViewFavoritesItemStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}"/-->

    <LinearGradientBrush x:Key="EmblemPathFillBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>

    <Style x:Key="FavoritesItemHeaderStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <StackPanel Orientation="Horizontal" Height="16" ClipToBounds="False">
                        <ContentControl>
                            <ContentControl.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </ContentControl.Effect>
                            <Path Data="M 3 16 L 8 12 L 13 16 L 11 9 L 16 6 L 10 6 L 8 0 L 6 6 L 0 6 L 5 9" Fill="{DynamicResource EmblemPathFillBrush}" Effect="{DynamicResource DropShadow}" UseLayoutRounding="True"/>
                            <!--RenderOptions.EdgeMode="Aliased"-->
                            <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0,0,0"/-->
                        </ContentControl>
                        <TextBlock Margin="5,0,0,0">Favorites</TextBlock>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComputerItemHeaderStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <StackPanel Orientation="Horizontal" Height="16" ClipToBounds="False">
                        <!--Path Data="M 3 16 L 8 12 L 13 16 L 11 9 L 16 6 L 10 6 L 8 0 L 6 6 L 0 6 L 5 9" Fill="{DynamicResource EmblemPathFillBrush}" Stroke="{DynamicResource EmblemPathStrokeBrush}" StrokeThickness="1" UseLayoutRounding="True">
                            <Path.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Path.Effect>
                        </Path-->
                        <ContentPresenter Content="{DynamicResource ComputerIcon}" Width="48" Height="48" RenderTransformOrigin="0.5,0.5" ClipToBounds="False">
                            <ContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleX="0.333333333333333" ScaleY="0.333333333333333"/>
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                        <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0,0,0"/-->
                        <TextBlock Margin="5,0,0,0" Text="This PC"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DetailsPaneStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="MaxWidth" Value="250"/>
        <Setter Property="Panel.ZIndex" Value="9999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Rectangle x:Name="BottomShadow" VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border CornerRadius="3,4,4,3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <ContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DetailsPaneIconContainerStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Height" Value="{Binding ActualWidth,RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Border>
                            <ContentPresenter Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PreviewPaneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource DetailsPaneStyle}"/>


    <!--ControlTemplate x:Key="CurrentDirectoryListViewItemControlTemplate" TargetType="{x:Type ListViewItem}">
        <ControlTemplate.Resources>
            <CubicEase x:Key="ScalingEase" EasingMode="EaseOut"/>
        </ControlTemplate.Resources>
        <Grid x:Name="RootGrid" Margin="5" Background="#01000000" Effect="{DynamicResource TertiaryDropShadow}">
            <Grid RenderTransformOrigin="0.5,0.5" UseLayoutRounding="True">
                <Border x:Name="SizingAid" Background="#01000000"/>
                <Border x:Name="BackgroundBorder" BorderBrush="Transparent" BorderThickness="0" CornerRadius="3" ClipToBounds="True" UseLayoutRounding="True">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                    </Border.Background>
                    <Grid>
                        <Grid>
                            <Border x:Name="SelectedBorder" BorderBrush="Transparent" BorderThickness="0" CornerRadius="3" ClipToBounds="True" UseLayoutRounding="True" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                            <Border x:Name="RootBorder" Padding="0">
                                <Grid Background="{TemplateBinding Background}" Margin="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Margin="0" Visibility="Hidden"/>
                                    <DockPanel>
                                        <Grid x:Name="SelectorCheckBoxGrid" VerticalAlignment="Top">
                                            <CheckBox x:Name="SelectorCheckBox" IsThreeState="False" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="Collapsed" DockPanel.Dock="Left"/>
                                        </Grid>
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" Visibility="Visible" />
                                    </DockPanel>
                                </Grid>
                            </Border>
                        </Grid>
                    </Grid>
                </Border>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <DataTrigger Binding="{Binding ShowItemCheckboxes, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter TargetName="SelectorCheckBox" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Details">
                <Setter TargetName="SelectorCheckBoxGrid" Property="VerticalAlignment" Value="Center"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="List">
                <Setter TargetName="SelectorCheckBoxGrid" Property="VerticalAlignment" Value="Center"/>
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="SelectorCheckBoxGrid" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="Padding" To="5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                            <ThicknessAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="Padding" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                            <ThicknessAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Margin" To="5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate-->

    <Style x:Key="StatusBarDetailsViewToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Width" Value="24"/>
        <!--Setter Property="Height" Value="18"/-->
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="-3,-4,0,-3"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ui:AttachedProperties.CornerCurves">
            <Setter.Value>
                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{DynamicResource StatusBarDetailsViewToggleButtonIcon}"/>
    </Style>

    <UniformGrid x:Key="StatusBarDetailsViewToggleButtonIcon" x:Shared="false" Width="15" Height="15" Rows="3" Columns="3" SnapsToDevicePixels="True">
        <Rectangle Fill="{DynamicResource IconPrimaryFillBrush}" Margin="1"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="1,0"/>
        <Rectangle Fill="{DynamicResource IconPrimaryFillBrush}" Margin="1"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="1,0"/>
        <Rectangle Fill="{DynamicResource IconPrimaryFillBrush}" Margin="1"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="0,0,1,0"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="0,0,1,0"/>
    </UniformGrid>

    <Style x:Key="StatusBarIconsViewToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Width" Value="24"/>
        <!--Setter Property="Height" Value="18"/-->
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="-1,-4,-3,-3"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ui:AttachedProperties.CornerCurves">
            <Setter.Value>
                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="True" BottomLeft="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{DynamicResource StatusBarIconsViewToggleButtonIcon}"/>
    </Style>

    <Border x:Key="StatusBarIconsViewToggleButtonIcon" x:Shared="false" Width="15" Height="12" Background="{DynamicResource IconForegroundBrush}" BorderBrush="{DynamicResource IconTertiaryFillBrush}" BorderThickness="1">
        <Path Data="M 0 0 L 5 2 L 10 3 L 12 5 L 0 5 Z" Fill="{DynamicResource IconPrimaryFillBrush}" VerticalAlignment="Bottom"/>
    </Border>

    <Control x:Key="TabDiskItemIconDisplayControl" x:Shared="False" HorizontalAlignment="Center" Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.BitmapScalingMode="NearestNeighbor" RenderTransformOrigin="0.5,0.5">
        <Control.Style>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Control}">
                            <Grid Width="48" Height="48">
                                <Rectangle x:Name="IconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{Binding ItemExtraLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" RenderOptions.BitmapScalingMode="Linear"/>
                                <Grid x:Name="FolderIconGrid" Width="48" HorizontalAlignment="Center" Visibility="Collapsed">
                                    <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
                                    <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
                                </Grid>
                                <ContentPresenter x:Name="SpecialIconPresenter" Visibility="Collapsed" Content="{Binding SpecialIcon}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Content.CurrentLocation, Converter={StaticResource ObjectToTypeConverter}}" Value="{x:Type local:DirectoryQuery}"/>
                                        <Condition Binding="{Binding Content.CurrentLocation.(local:DirectoryQuery.Item).ItemCategory}" Value="Directory"/>
                                        <Condition Binding="{Binding Content.CurrentLocation.(local:DirectoryQuery.Item).IsDrive}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="FolderIconGrid" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                                <!--DataTrigger Binding="{Binding FirstChildIcon}" Value="{x:Null}">
                                    <Setter TargetName="FirstChildIconBorder" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="FirstChildIconRectangle" Property="Fill" Value="Transparent"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SecondChildIcon}" Value="{x:Null}">
                                    <Setter TargetName="SecondChildIconBorder" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SecondChildIconRectangle" Property="Fill" Value="Transparent"/>
                                </DataTrigger-->
                                <DataTrigger Binding="{Binding HasSpecialIcon}" Value="True">
                                    <Setter TargetName="FolderIconGrid" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SpecialIconPresenter" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Control.Style>
    </Control>

    <Style x:Key="TitleBarTabControlStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource PrimaryTabControlStyle}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type local:Location}">
                <StackPanel Orientation="Horizontal" Margin="0,0,45,0">
                    <Grid Width="16" Height="16" Margin="0,0,5,0">
                        <Rectangle x:Name="IconRectangle" Fill="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                        <ContentPresenter x:Name="SpecialIconPresenter" Content="{Binding SpecialIcon}"/>
                    </Grid>
                    <TextBlock Text="{Binding Name}"/>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding HasSpecialIcon}" Value="True">
                        <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="SpecialIconPresenter" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Height" Value="31"/>
        <!--Setter Property="MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}, Mode=OneWay}"/-->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource PrimaryTabItemStyle}">
                    <Setter Property="Padding" Value="10,0"/>
                    <Setter Property="Width" Value="250"/>
                    <Setter Property="LayoutTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX="0" ScaleY="1"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid Background="#01000000">
                                    <Grid ClipToBounds="True" Margin="-2,0">
                                        <Border x:Name="HoverBorder" Margin="4,0" BorderThickness="0,2,0,0" BorderBrush="{DynamicResource HoverHighlightBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0">
                                            <Border.RenderTransform>
                                                <ScaleTransform ScaleX="0" ScaleY="1"/>
                                            </Border.RenderTransform>
                                            <Rectangle Fill="{Binding BorderBrush, ElementName=HoverBorder}" Opacity="1" Height="2" VerticalAlignment="Top" Margin="0,-2">
                                                <Rectangle.Effect>
                                                    <BlurEffect Radius="5"/>
                                                </Rectangle.Effect>
                                            </Rectangle>
                                        </Border>
                                    </Grid>
                                    <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Left" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" Effect="{DynamicResource DropShadow}" TextElement.Foreground="{DynamicResource TitlebarIdleForegroundBrush}"/>
                                    <Button HorizontalAlignment="Right" Margin="0" Style="{DynamicResource CaptionButtonStyle}">
                                        <e:Interaction.Behaviors>
                                            <local:ClosableTabItemBehavior OwnerWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" OwnerControl="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}}"/>
                                        </e:Interaction.Behaviors>
                                        <Path Data="M 0 -1 L 2 -1 L 4.5 2 L 7 -1 L 9 -1 L 9 1 L 6 3.5 L 9 6 L 9 8 L 7 8 L 4.5 5 L 2 8 L 0 8 L 0 6 L 3 3.5 L 0 1 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                                        <!--RenderOptions.EdgeMode="Aliased"-->
                                    </Button>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                        <!--Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" /-->
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False">
                                        <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" />
                                    </DataTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.EnterActions>
                                        <MultiTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.ExitActions>
                                        <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                    </MultiTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                    </Trigger>
                                    <Trigger Property="IsVisible" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" To="1" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" To="0" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseIn"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <ScrollViewer Style="{DynamicResource TabScrollViewerStyle}" Margin="0,1,0,0" Padding="0" HorizontalAlignment="Left" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                        <Grid x:Name="RootGrid">
                            <ui:TravellingSelector x:Name="TravellingSelector" AnimationDuration="0:0:0.250" HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=HeaderPanel, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=HeaderPanel, Mode=OneWay}" TargetPanel="{Binding ElementName=HeaderPanel, Mode=OneWay}" CollectionSize="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Mode=OneWay}" SelectedObjectIndex="{Binding SelectedIndex, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                                <ui:TravellingSelector.AnimationEase>
                                    <CubicEase EasingMode="EaseOut"/>
                                </ui:TravellingSelector.AnimationEase>
                                <ui:TravellingSelector.Template>
                                    <ControlTemplate TargetType="{x:Type ui:TravellingSelector}">
                                        <Grid Background="#01000000">
                                            <Border x:Name="PART_Selector" HorizontalAlignment="Left" VerticalAlignment="Top" Width="{TemplateBinding SelectionWidth}" Height="{TemplateBinding SelectionHeight}">
                                                <Border Margin="-2,0" ClipToBounds="True">
                                                    <Border x:Name="SelectedBorder" Margin="4,0" BorderBrush="{DynamicResource SelectedHighlightBrush}" BorderThickness="0,2,0,0" RenderTransformOrigin="0.5,1">
                                                        <Border.RenderTransform>
                                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                        </Border.RenderTransform>
                                                        <Rectangle Fill="{Binding BorderBrush, ElementName=SelectedBorder}" Opacity="1" Height="2" VerticalAlignment="Top" Margin="0,-2">
                                                            <Rectangle.Effect>
                                                                <BlurEffect Radius="5"/>
                                                            </Rectangle.Effect>
                                                        </Rectangle>
                                                    </Border>
                                                </Border>
                                            </Border>
                                        </Grid>
                                    </ControlTemplate>
                                </ui:TravellingSelector.Template>
                            </ui:TravellingSelector>
                            <TabPanel Name="HeaderPanel" HorizontalAlignment="Left" VerticalAlignment="Stretch" MaxHeight="{TemplateBinding ActualHeight}" IsItemsHost="True" KeyboardNavigation.TabIndex="1"/>
                        </Grid>
                    </ScrollViewer>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWay}" Value="Maximized">
                            <Setter TargetName="RootGrid" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type local:FolderTabItem}">
                    <DockPanel VerticalAlignment="Stretch">
                        <!--ContentPresenter x:Name="IconContentPresenter" Content="{DynamicResource DiskItemIconDisplayControl}" Width="48" Height="48" RenderTransformOrigin="0.5,0.5">
                            <ContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleX="0.333333333333333" ScaleY="0.333333333333333"/>
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter-->
                        <!--Rectangle x:Name="IconRectangle" Width="16" Height="16" Fill="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" VerticalAlignment="Center" DockPanel.Dock="Left"/-->
                        <ContentPresenter Content="{DynamicResource TabDiskItemIconDisplayControl}" VerticalAlignment="Center" Width="48" Height="48" DockPanel.Dock="Left">
                            <ContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleX="0.333333333333333" ScaleY="0.333333333333333"/>
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                        <TextBlock Text="{Binding Name}" Margin="6,0" VerticalAlignment="Center"/>
                    </DockPanel>
                    <!--DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Content.CurrentLocation, Converter={StaticResource ObjectToTypeConverter}}" Value="{x:Type local:DirectoryQuery}">
                            <Setter TargetName="IconRectangle" Property="Fill" Value="{Binding Content.CurrentLocation.(local:DirectoryQuery.Item).ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers-->
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabStripPanelStyle" TargetType="{x:Type Panel}">
        <Setter Property="Margin" Value="0,0,135,0"/>
    </Style>

    <Grid x:Key="TabsSetAsideToggleButtonIcon" x:Shared="False" Height="10">
        <!--Path Data="M 0 0 L 0 5 L 5 5 L 5 0 Z" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="3,3,0,0"/>
                    <Path Data="M 5 0 L -1 0 L -1 6" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,3,3"/-->
        <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Horizontal">
            <Rectangle Width="3" Height="2" Margin="0,0,1,0" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}"/>
            <Rectangle Width="3" Height="2" Margin="0,0,1,0" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}"/>
        </StackPanel>
        <Path Data="M 0 0 L 0 6 L 9 6 L 9 0 Z" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
    </Grid>

    <Style x:Key="TabsSetAsideToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CaptionToggleButtonStyle}">
        <Setter Property="Content" Value="{StaticResource TabsSetAsideToggleButtonIcon}"/>
    </Style>

    <Grid x:Key="SetTabsAsideButtonIcon" x:Shared="False" Width="10">
        <Path Data="M 4 0 L 0 0 L 0 7 L 4 7" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <Path Data="M 0 4 L 4 0 L 4 3 L 7 3 L 7 5 L 4 5 L 4 8 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Center"/>
        <!--M 0 3 L 3 0 L 3 1 L 7 1 L 7 2 L 3 2 L 3 3 Z-->
    </Grid>

    <Style x:Key="SetTabsAsideButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content" Value="{StaticResource SetTabsAsideButtonIcon}"/>
    </Style>

    <Path x:Key="NewTabButtonIcon" x:Shared="False" Data="M 0 4 L 8 4 M 4 0 L 4 8" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>

    <Style x:Key="NewTabButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Margin" Value="0,0,150,0"/>
        <Setter Property="Content" Value="{DynamicResource NewTabButtonIcon}"/>
    </Style>

    <Style x:Key="TabsOverviewContentControlStyle" TargetType="{x:Type ContentControl}">
        <!--Setter Property="Opacity" Value="0"/-->
        <!--Setter Property="Visibility" Value="Collapsed"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid x:Name="RootGrid" Opacity="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="45"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="31"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{DynamicResource ModalPanelBackdropBrush}" Margin="0,0,-3,-3" BorderThickness="0,0,3,3" CornerRadius="0,0,4,0" Grid.Column="0" Grid.Row="0"/>
                        <Border Background="{DynamicResource ModalPanelBackdropBrush}" CornerRadius="0,3,0,0" Grid.Column="1" Grid.Row="0"/>
                        <Border Background="{DynamicResource ModalPanelBackdropBrush}" CornerRadius="0,0,3,3" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"/>
                        <Grid x:Name="ContentGrid" RenderTransformOrigin="0,0" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Grid.RowSpan="2">
                            <Grid.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="{Binding ScaleX, RelativeSource={RelativeSource Mode=Self}}"/>
                            </Grid.RenderTransform>
                            <Border x:Name="ContentPaneBorder" CornerRadius="3" Effect="{DynamicResource TertiaryDropShadow}" BorderBrush="Transparent" Margin="48" UseLayoutRounding="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <ContentPresenter Content="{TemplateBinding Content}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsManipulationEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsManipulationEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames-->
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames-->
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="LocationTabDataTemplate" DataType="{x:Type local:OverviewLocationTab}">
        <Grid Width="174" Height="154">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="24"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="24"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Text="{Binding Title}" TextAlignment="Center" HorizontalAlignment="Center" Grid.Column="0" Grid.Row="0"/>
            <Rectangle Fill="{Binding Thumbnail, Mode=OneWay}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"/>
            <Rectangle Width="32" Height="32" HorizontalAlignment="Left" VerticalAlignment="Bottom" Fill="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" Grid.Column="0" Grid.Row="1"/>
        </Grid>
    </DataTemplate>

    <Style x:Key="CurrentlyOpenTabsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <DockPanel>
                        <TextBlock Text="Currently Open Tabs" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" FontSize="14" Opacity="0.5" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" DockPanel.Dock="Top"/>
                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate" Value="{DynamicResource LocationTabDataTemplate}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabsSetAsideListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Width" Value="350"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <DockPanel>
                        <Rectangle Fill="{DynamicResource HorizontalPanelBorderBrush}" Width="1" Margin="0,4" DockPanel.Dock="Right"/>
                        <TextBlock Text="Tabs You've Set Aside" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" FontSize="14" Opacity="0.5" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" DockPanel.Dock="Top"/>
                        <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ui:AttachedProperties.CornerCurves>
                                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                            </ui:AttachedProperties.CornerCurves>
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type local:TabGroup}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="24"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <DockPanel Grid.Column="0" Grid.Row="0">
                            <Button Content="Restore tabs" DockPanel.Dock="Right"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Tabs.Count, Mode=OneWay}" FontSize="13"/>
                                <TextBlock Text=" tabs" FontSize="13"/>
                                <TextBlock Margin="15,0" Text="{Binding Time, Mode=OneWay}"/>
                            </StackPanel>
                        </DockPanel>
                        <Button Style="{DynamicResource CaptionButtonStyle}" Grid.Column="1" Grid.Row="0">
                            <Path Data="M 0 -1 L 2 -1 L 4.5 2 L 7 -1 L 9 -1 L 9 1 L 6 3.5 L 9 6 L 9 8 L 7 8 L 4.5 5 L 2 8 L 0 8 L 0 6 L 3 3.5 L 0 1 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                        </Button>
                        <ListView ItemsSource="{Binding Tabs}" ItemTemplate="{DynamicResource LocationTabDataTemplate}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1">
                            <ListView.Style>
                                <Style TargetType="{x:Type ListView}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListView}">
                                                <Grid>
                                                    <ContentControl x:Name="ContentCon" HorizontalAlignment="Left">
                                                        <ContentControl.Content>
                                                            <ItemsPresenter/>
                                                        </ContentControl.Content>
                                                    </ContentControl>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition SourceName="ContentCon" Property="IsMouseOver" Value="True"/>
                                                            <Condition SourceName="ContentCon" Property="IsMouseOver" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="ContentCon" Property="Content">
                                                            <Setter.Value>
                                                                <!--ControlTemplate TargetType="{x:Type ListView}"-->
                                                                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                                                                    <ItemsPresenter/>
                                                                </ScrollViewer>
                                                                <!--/ControlTemplate-->
                                                            </Setter.Value>
                                                        </Setter>
                                                        <!--Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ListView}">
                                                                    <DockPanel LastChildFill="False">
                                                                        <ScrollBar x:Name="ScrollBar" Orientation="Horizontal" Minimum="0" Maximum="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}}" DockPanel.Dock="Bottom"/>
                                                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                                                            <ItemsPresenter Width="Auto"/>
                                                                            <Rectangle Width="{Binding Value, ElementName=ScrollBar, Mode=OneWay}"/>
                                                                        </StackPanel>
                                                                    </DockPanel>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter-->
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="ItemsPanel">
                                        <Setter.Value>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.Style>
                        </ListView>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ui:CommandBar}" TargetType="{x:Type ui:CommandBar}" BasedOn="{StaticResource ShadowedCommandBarStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:CommandBar}">
                    <Grid>
                        <Border Style="{DynamicResource HorizontalBarBorderStyle}" HorizontalAlignment="Stretch" BorderThickness="{TemplateBinding BorderThickness}" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" IsItemsHost="True" Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <!--Rectangle x:Name="ShadowRectangle" VerticalAlignment="Bottom" Margin="0,-18" Height="18" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle-->
                    </Grid>
                    <!--ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(ScrollViewer.ComputedVerticalScrollBarVisibility), ElementName=CurrentDirectoryListView}" Value="Visible">
                            <Setter TargetName="ShadowRectangle" Property="Margin" Value="0,-18,18,-18"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}" BasedOn="{StaticResource ShadowedStatusBarStyle}">
        <Setter Property="Panel.ZIndex" Value="999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid>
                        <Rectangle x:Name="ShadowRectangle" VerticalAlignment="Top" Height="9" IsHitTestVisible="False" Margin="0,-9">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="Border" Style="{DynamicResource HorizontalBarBorderStyle}" CornerRadius="0,0,2,2" BorderThickness="0,1,0,0">
                            <ItemsPresenter/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(ScrollViewer.ComputedVerticalScrollBarVisibility), ElementName=CurrentDirectoryListView}" Value="Visible">
                            <Setter TargetName="ShadowRectangle" Property="Margin" Value="0,-9,18,-9"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <!--#endregion Main Content Styles-->
</ResourceDictionary>