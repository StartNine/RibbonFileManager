<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RibbonFileManager"
                    xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                    xmlns:converters="clr-namespace:Fluent.Converters;assembly=Fluent"
                    xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
                    xmlns:disk="clr-namespace:WindowsSharp.DiskItems;assembly=WindowsSharp"
                    xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
                    xmlns:win="clr-namespace:Start9.UI.Wpf.Windows;assembly=Start9.UI.Wpf"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
                    xmlns:FluentHelpers="clr-namespace:Fluent.Helpers;assembly=Fluent">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Fluent;Component/Themes/Generic.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Start9.UI.Wpf;Component/Themes/Plex.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Start9.UI.Wpf;Component/Themes/Generic.xaml" />
        <ResourceDictionary Source="/PresentationFramework.Classic;V3.0.0.0;31bf3856ad364e35;component\themes/classic.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:ObjectToImageConverter x:Key="ObjectToImageConverter"/>
    <converters:ApplicationMenuRightScrollViewerExtractorConverter x:Key="ApplicationMenuRightScrollViewerExtractorConverter" />
    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <conv:DoubleComparisonConverter x:Key="DoubleComparisonConverter"/>

    <Style TargetType="{x:Type win:DecoratableWindow}" BasedOn="{StaticResource {x:Type win:DecoratableWindow}}">
        <Setter Property="FontFamily" Value="Tahoma"/>
        <Setter Property="Background" Value="{x:Static SystemColors.ControlBrush}"/>
        <!--Setter Property="BorderThickness" Value="0,22,0,0"/-->
        <Setter Property="Padding" Value="4,19,4,4"/>
        <!--Setter Property="RenderOptions.EdgeMode" Value="Aliased"/-->
        <Setter Property="RenderOptions.ClearTypeHint" Value="Auto"/>
    </Style>

    <!--#region Navigation Bar Styles-->

    <!--Style x:Key="NavigationBarGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background">
            <Setter.Value>
                <VisualBrush AutoLayoutContent="True">
                    <VisualBrush.Visual>
                        <Grid Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}}">
                            <themes:ClassicBorderDecorator BorderStyle="Etched" BorderThickness="2"/>
                        </Grid>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Setter.Value>
        </Setter>
    </Style-->

    <Style x:Key="NavigationBarBackgroundStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <themes:ClassicBorderDecorator BorderStyle="Etched" BorderThickness="2"/>
                        <Path VerticalAlignment="Center" HorizontalAlignment="Left" Margin="3,0" Data="M 12.5 25 A 12.5,12.5 180 0 1 12.5,0
                              L 15 0
                              Q 27.5,3 39.5,0
                              L 42 0
                              A 12.5,12.5 180 0 1 42,25
                              L 39.5 25
                              Q 27.5,22 15,25
                              Z">
                            <!--Data="M 0 10 Q 2.5,2.5 10,0 Q 17.5,2.5 25,0 Q 37.5,2.5 45,10 Q 37.5,12.5 45,20Z"-->
                            <!--Path.RenderTransform>
                                <TranslateTransform X="0" Y="-297"/>
                            </Path.RenderTransform-->
                            <!--Path.Data>
                                <PathGeometry Figures="m 4.0259871 292.01582 c -2.5549004 -0.30148 -4.0260223 0.73622 -4.0260223 2.26052 v 0.4075 c 0 1.52841 1.482265 2.56851 4.0322202 2.26334 0.7148039 -0.0855 1.4508921 -0.12919 2.1863152 -0.12919 0.7354226 0 1.4715107 0.0437 2.1863146 0.12919 2.5499552 0.30517 4.0322202 -0.73493 4.0322202 -2.26334 v -0.4075 c 0 -1.5243 -1.471122 -2.562 -4.0260223 -2.26052 -0.7180879 0.0847 -1.4553335 0.12619 -2.1925128 0.12619 -0.7371791 0 -1.4744248 -0.0415 -2.1925128 -0.12619 z" FillRule="Nonzero"/>
                            </Path.Data-->
                            <Path.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="#C0000000" />
                                    <GradientStop Offset="0.125" Color="#40000000" />
                                    <GradientStop Offset="0.875" Color="#40FFFFFF" />
                                    <GradientStop Offset="1" Color="#60FFFFFF" />
                                </LinearGradientBrush>
                            </Path.Fill>
                        </Path>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="NavButtonTemplate" TargetType="{x:Type Button}">
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000">
            <Grid>
                <!--Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Fill="#7F000000" Stroke="#7FFFFFFF" StrokeThickness="1"/-->
                <Grid x:Name="IdleBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="1">
                    <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="1">
                        <Ellipse.Fill>
                            <RadialGradientBrush GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
                                <RadialGradientBrush.GradientStops>
                                    <GradientStop Offset="0" Color="#FF09E4FD"/>
                                    <GradientStop Offset="1" Color="#FF003D66"/>
                                </RadialGradientBrush.GradientStops>
                            </RadialGradientBrush>
                        </Ellipse.Fill>
                    </Ellipse>
                </Grid>
                <Grid x:Name="HoverBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="0">
                    <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="1">
                        <Ellipse.Fill>
                            <RadialGradientBrush GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
                                <RadialGradientBrush.GradientStops>
                                    <GradientStop Offset="0" Color="#FF4DF4FE"/>
                                    <GradientStop Offset="1" Color="#FF05588A"/>
                                </RadialGradientBrush.GradientStops>
                            </RadialGradientBrush>
                        </Ellipse.Fill>
                    </Ellipse>
                </Grid>
                <!--Grid x:Name="PressedBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="0">
                </Grid-->
                <Grid x:Name="DisabledBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="0">
                    <Ellipse Stroke="#CB929698" StrokeThickness="1" Margin="1"/>
                    <!--Ellipse Stroke="#EA828487" StrokeThickness="1"/-->
                </Grid>
                <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False" />
                <!--Canvas Width="13.500054199161586821763898920888" Height="24" Margin="0.5,0,-0.5,0">
                    <Canvas.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Offset="0" Color="White" />
                                <GradientStop Offset="1" Color="#FFDFDFDF" />
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Canvas.Background>
                    <Canvas.OpacityMask>
                        <VisualBrush TileMode="None" Viewport="0,0,1,1"
                                                 ViewportUnits="RelativeToBoundingBox"
                                                 Viewbox="0,0,144.00073,256.00027" ViewboxUnits="Absolute">
                            <VisualBrush.Visual>
                                <Canvas Name="svg8" Width="144.00073" Height="256.00027">
                                    <Canvas.RenderTransform>
                                        <TranslateTransform X="0" Y="0" />
                                    </Canvas.RenderTransform>
                                    <Canvas Name="layer1">
                                        <Canvas.RenderTransform>
                                            <TranslateTransform X="-1.8930132e-5" Y="-40.999866" />
                                        </Canvas.RenderTransform>
                                        <Path Name="path4485" Fill="#FF000000" StrokeThickness="0.31324857" Stroke="#FF000000" StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat">
                                            <Path.Data>
                                                <PathGeometry Figures="M 0.38570981 108.65214 C 5.5479943 22.701762 116.12822 17.544525 141.23878 100.63075 52.19885 44.948872 33.173221 180.00833 143.83516 152.4612 142.17373 190.6451 119.6223 277.64656 13.367569 296.84602 51.063522 272.16844 77.598523 245.46586 78.925911 193.80218 c 0 0 -83.7024856 0.80034 -78.54020119 -85.15004 z" FillRule="NonZero" />
                                            </Path.Data>
                                        </Path>
                                    </Canvas>
                                </Canvas>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Canvas.OpacityMask>
                    <Canvas.Effect>
                        <DropShadowEffect x:Name="DropShadow" Color="Black" Direction="275" ShadowDepth="0.5" BlurRadius="2.5" Opacity="1" />
                    </Canvas.Effect>
                </Canvas-->
                <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="2">
                    <Ellipse.Fill>
                        <RadialGradientBrush GradientOrigin="0.5,1" Center="0.5,1" RadiusX="1.5" RadiusY="1.1875">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Offset="0.5" Color="Transparent"/>
                                <GradientStop Offset="0.5" Color="#40FFFFFF"/>
                                <GradientStop Offset="1" Color="#C0FFFFFF"/>
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>
                <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="2">
                    <Ellipse.Fill>
                        <RadialGradientBrush GradientOrigin="0.5,0.625" Center="0.5,0.625" RadiusX="1.0625" RadiusY="1">
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Offset="0.375" Color="Transparent"/>
                                <GradientStop Offset="0.875" Color="#FFFFFFFF"/>
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Ellipse.Fill>
                </Ellipse>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <!--Trigger Property="IsPressed" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                            Storyboard.TargetProperty="Opacity" To="1"
                                            Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                            Storyboard.TargetProperty="Opacity" To="0"
                                            Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger-->
            <Trigger Property="IsEnabled" Value="False">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="IdleBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" />
                            <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" />
                            <!--DoubleAnimation Storyboard.TargetName="PressedBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" /-->
                            <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                            Storyboard.TargetProperty="Opacity" To="1"
                                            Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="IdleBackground"
                                            Storyboard.TargetProperty="Opacity" To="1"
                                            Duration="0:0:0.125" />
                            <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" />
                            <!--DoubleAnimation Storyboard.TargetName="PressedBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" /-->
                            <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="NavigationBackButtonStyle" TargetType="{x:Type Button}"><!--BasedOn="{StaticResource RoundButtonStyle}"-->
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="1,0,3,0"/>
        <Setter Property="Template" Value="{DynamicResource NavButtonTemplate}"/>
        <Setter Property="Content">
            <Setter.Value>
                <Path Fill="White" Stroke="#7F000000" StrokeThickness="1">
                    <Path.Data>
                        <PathGeometry Figures="M 0 5 L 5 10 L 7 10 L 3 6 L 12 6 L 12 4 L 3 4 L 7 0 L 5 0 Z" FillRule="NonZero"/>
                    </Path.Data>
                </Path>
            </Setter.Value>
        </Setter>
        <!--Setter Property="Content" Value="{DynamicResource SmallBackArrowPathIcon}"/-->
    </Style>
    <Style x:Key="NavigationForwardButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationBackButtonStyle}"><!--BasedOn="{StaticResource RoundButtonStyle}"-->
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Content">
            <Setter.Value>
                <Path Fill="White" Stroke="#7F000000" StrokeThickness="1">
                    <Path.Data>
                        <PathGeometry Figures="M 12 5 L 7 10 L 5 10 L 9 6 L 0 6 L 0 4 L 9 4 L 5 0 L 7 0 Z" FillRule="NonZero"/>
                    </Path.Data>
                </Path>
            </Setter.Value>
        </Setter>
        <!--Setter Property="Width" Value="17"/>
        <Setter Property="Height" Value="17"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Padding" Value="0,0,-1,0"/>
        <Setter Property="Template" Value="{DynamicResource NavButtonTemplate}"/-->
        <!--Setter Property="Content">
            <Setter.Value>
                <ContentControl Content="{DynamicResource SmallForwardArrowPathIcon}">
                    <ContentControl.RenderTransform>
                        <ScaleTransform CenterX="7" CenterY="7" ScaleX="0.625" ScaleY="0.625"/>
                    </ContentControl.RenderTransform>
                </ContentControl>
            </Setter.Value>
        </Setter-->
    </Style>
    <Style x:Key="NavigationHistoryButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="22" />
        <!--Setter Property="Foreground" Value="{DynamicResource CaptionButtonActiveIdleBrush}"/-->
        <Setter Property="Foreground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FF35AFE8"/>
                    <GradientStop Offset="1" Color="#FF25519F"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#01000000">
                        <!--Grid x:Name="HoverBackground" Opacity="0" ClipToBounds="False" IsHitTestVisible="False">
                                    <Border Margin="0" Background="{DynamicResource PlexGlowToggleButtonHoverBackground}" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="2" RenderTransformOrigin="0.5,0.5" CornerRadius="0,8,0,0" ClipToBounds="False" IsHitTestVisible="False">
                                        <Border.ToolTip>
                                            <Fluent:ScreenTip x:Name="screenTip" Title="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipTitle, Mode=OneWay}" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipText, Mode=OneWay}" />
                                        </Border.ToolTip>
                                    </Border>
                                    <Border Background="Transparent" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="0,1,1,0" CornerRadius="0,8,0,0" Height="8" VerticalAlignment="Top" Margin="-100,-1,0,1" IsHitTestVisible="False">
                                        <Border.OpacityMask>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                    <GradientStop Offset="1" Color="White"/>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.OpacityMask>
                                    </Border>
                                    <Border Background="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderBrush="Transparent" BorderThickness="0" Height="1" VerticalAlignment="Bottom" Margin="-100,0,0,0" IsHitTestVisible="False">
                                        <Border.OpacityMask>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                    <GradientStop Offset="1" Color="White"/>
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Border.OpacityMask>
                                    </Border>
                                </Grid-->
                        <Grid UseLayoutRounding="True">
                            <!--Grid.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3"
                                              BlurRadius="10" Opacity="0.5" />
                            </Grid.Effect-->
                            <Path x:Name="iconImage" Fill="{TemplateBinding Foreground}" Stroke="#FF0A246A" StrokeThickness="1" Data="M 0 0 L 4 5 L 8 0 Z" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                            <!--Path x:Name="iconImageChecked" Fill="{DynamicResource CaptionButtonActiveIdleBrush}" Stroke="{DynamicResource CaptionButtonActiveIdleBrush}" StrokeThickness="1" Data="M 0 0 L 4 5 L 8 0 Z" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" Visibility="Collapsed"/-->
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Visibility" TargetName="iconImage" Value="Collapsed" />
                                    <Setter Property="Visibility" TargetName="iconImageChecked" Value="Visible" />
                                    <Setter Property="Title" TargetName="screenTip" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipTitle , Mode=OneWay}" />
                                    <Setter Property="Text" TargetName="screenTip" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipText , Mode=OneWay}" />
                                </Trigger-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions-->
                            <!--Setter Property="Foreground" Value="{DynamicResource CaptionButtonActiveHoverBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavigationUpButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="22" />
        <!--Setter Property="Foreground" Value="{DynamicResource CaptionButtonActiveIdleBrush}"/-->
        <Setter Property="Foreground">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FF35AFE8"/>
                    <GradientStop Offset="1" Color="#FF25519F"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#01000000">
                        <Grid UseLayoutRounding="True">
                            <!--Grid.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Grid.Effect-->
                            <Path x:Name="iconImage" Fill="{TemplateBinding Foreground}" Stroke="#FF0A246A" StrokeThickness="1" Data="M 0 6 L 6 0 L 12 6 L 8 6 L 8 16 L 4 16 L 4 6 Z" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--Setter Property="Foreground" Value="{DynamicResource CaptionButtonActiveHoverBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavigationSearchBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
    </Style>
    <!--Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PlexFocusVisualStyle}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0,0,18,0"/>
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="Height" Value="19"/>
        <Setter Property="Foreground" Value="{DynamicResource AddressBoxForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" CornerRadius="0,9.5,9.5,0" BorderThickness="0,1,1,1" BorderBrush="{DynamicResource AddressBoxBorderBrush}">
                        <Border CornerRadius="0,8.5,8.5,0" BorderThickness="0,1,1,1" BorderBrush="{DynamicResource AddressBoxSecondaryBorderBrush}" Background="{DynamicResource AddressBoxSecondaryBackgroundBrush}">
                            <Grid>
                                <Border x:Name="IdleFill" CornerRadius="0,7.5,7.5,0" Opacity="1" Background="{DynamicResource AddressBoxIdleFillBackgroundBrush}"/>
                                <Border x:Name="HoverFill" CornerRadius="{Binding Path=CornerRadius, ElementName=IdleFill}" Opacity="0" Background="{DynamicResource AddressBoxHoverFillBackgroundBrush}"/>
                                <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextBlock.Foreground="{TemplateBinding Foreground}" Foreground="{TemplateBinding Foreground}" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverFill" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverFill" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <Style x:Key="NavButtonsContainerStyle" TargetType="{x:Type StackPanel}">
        <!--Setter Property="Width" Value="100"/-->
        <Setter Property="Height" Value="27"/>
        <Setter Property="Margin" Value="3,1"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!--#endregion Navigation Bar Styles-->


    <!--#region Main Content Styles-->

    <Style x:Key="CurrentDirectoryListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Panel.ZIndex" Value="-100"/>
        <Setter Property="Background" Value="{x:Static SystemColors.WindowBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="GridView.AllowsColumnReorder" Value="True"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="Icons">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <StackPanel Orientation="Vertical" VerticalAlignment="Top">
                                <Rectangle HorizontalAlignment="Center" Width="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Height="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Fill="{Binding ItemExtraLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='48'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>
                                <Grid Width="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Stretch" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" TextWrapping="Wrap" MaxHeight="44"/>
                                </Grid>
                            </StackPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="Details">
                <Setter Property="View">
                    <Setter.Value>
                        <GridView>
                            <GridViewColumn Header="Name" Width="160" DisplayMemberBinding="{Binding ItemDisplayName}"/>
                            <GridViewColumn Header="Type" Width="120" DisplayMemberBinding="{Binding ItemCategory}"/>
                            <GridViewColumn Header="Size" Width="80" DisplayMemberBinding="{Binding FriendlyItemSize}"/>
                        </GridView>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="Tiles">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <DockPanel Width="240" Height="42">
                                <Rectangle HorizontalAlignment="Center" Width="32" Height="32" Fill="{Binding ItemExtraLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" DockPanel.Dock="Left"/>
                                <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" TextWrapping="Wrap" Margin="5,0,0,0"/>
                            </DockPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="List">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <StackPanel Orientation="Horizontal" Height="16">
                                <Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>
                                <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Margin="5,0,0,0"/>
                            </StackPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="Content">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <Grid Height="32">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="32"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="192"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle HorizontalAlignment="Center" Width="32" Height="32" Fill="{Binding ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"/>
                                <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" TextWrapping="Wrap" Grid.Column="1" Grid.Row="0"/>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Opacity="0.5" Margin="0,0,5,0">Type:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Text="{Binding FriendlyItemType}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="0">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Opacity="0.5" Margin="0,0,5,0">Date modified:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Text="NYI"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Opacity="0.5" Margin="0,0,5,0">Size:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Text="{Binding FriendlyItemSize}"/>
                                </StackPanel>
                            </Grid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CurrentDirectoryListViewItemStyle" TargetType="{x:Type ListViewItem}">
        
    </Style>
    <!--Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <Border BorderThickness="0" BorderBrush="Transparent" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid>
                                <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Hidden"/>
                                <DockPanel>
                                    <Grid x:Name="SelectorCheckBoxGrid" VerticalAlignment="Top">
                                        <CheckBox x:Name="SelectorCheckBox" IsThreeState="False" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="Collapsed" DockPanel.Dock="Left"/>
                                    </Grid>
                                    <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Visible" />
                                </DockPanel>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding ShowItemCheckboxes, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="True">
                            <Setter TargetName="SelectorCheckBox" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="Details">
                            <Setter TargetName="SelectorCheckBoxGrid" Property="VerticalAlignment" Value="Center"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="List">
                            <Setter TargetName="SelectorCheckBoxGrid" Property="VerticalAlignment" Value="Center"/>
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectorCheckBoxGrid" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <Style x:Key="FavoritesTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{x:Static SystemColors.WindowBrush}"/>
        <Setter Property="BorderBrush" Value="{x:Static SystemColors.ControlBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,3,0"/>
    </Style>

    <Style x:Key="FavoritesItemHeaderStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <StackPanel Orientation="Horizontal" Height="16" ClipToBounds="False">
                        <ContentControl>
                            <!--ContentControl.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </ContentControl.Effect-->
                            <Path Data="M 3 16 L 8 12 L 13 16 L 11 9 L 16 6 L 10 6 L 8 0 L 6 6 L 0 6 L 5 9 Z" Fill="#FFFFFF00" Stroke="#FF808000" StrokeThickness="1" UseLayoutRounding="True"/>
                            <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0,0,0"/-->
                        </ContentControl>
                        <TextBlock Margin="5,0,0,0">Favorites</TextBlock>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComputerItemHeaderStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <StackPanel Orientation="Horizontal" Height="16" ClipToBounds="False">
                        <!--Path Data="M 3 16 L 8 12 L 13 16 L 11 9 L 16 6 L 10 6 L 8 0 L 6 6 L 0 6 L 5 9" Fill="{DynamicResource EmblemPathFillBrush}" Stroke="{DynamicResource EmblemPathStrokeBrush}" StrokeThickness="1" UseLayoutRounding="True">
                            <Path.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Path.Effect>
                        </Path-->
                        <Grid Width="16" Height="16">
                            <!--Grid.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Grid.Effect-->
                            <Rectangle Width="4" Height="14" VerticalAlignment="Center" Fill="#FF808080" Stroke="Black" StrokeThickness="1" UseLayoutRounding="True"/>
                            <Rectangle Height="10" VerticalAlignment="Top" Fill="#FF00FFFF" Stroke="#FFC0C0C0" StrokeThickness="1" UseLayoutRounding="True"/>
                            <!--Rectangle.Effect>
                                    <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.125" />
                                </Rectangle.Effect>
                            </Rectangle-->
                            <Rectangle Height="3" VerticalAlignment="Bottom" Fill="#FFC0C0C0" Stroke="#FF808080" StrokeThickness="1" UseLayoutRounding="True"/>
                        </Grid>
                        <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0,0,0"/-->
                        <TextBlock Margin="5,0,0,0">This PC</TextBlock>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <HierarchicalDataTemplate x:Key="NavigationPaneDataTemplate" DataType="{x:Type disk:DiskItem}">
        <StackPanel Orientation="Horizontal" Height="16">
            <Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" SnapsToDevicePixels="True" UseLayoutRounding="True" RenderOptions.EdgeMode="Aliased"/>
            <ContentPresenter Content="{Binding ItemDisplayName}" RecognizesAccessKey="True" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}}" Margin="5,0,0,0">
                <ContentPresenter.Resources>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </StackPanel>
    </HierarchicalDataTemplate>

    <Style x:Key="DetailsPaneStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Background" Value="{DynamicResource MountedListViewBackgroundBrush}"/>
        <!--Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <!--Border CornerRadius="0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Border.Effect>
                                <DropShadowEffect Color="Black" Direction="180" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Border.Effect>
                        </Border-->
                        <!--themes:ClassicBorderDecorator BorderStyle="Sunken" BorderThickness="2" Background="{x:Static SystemColors.WindowBrush}"/-->
                        <Border BorderThickness="3,0,0,0" BorderBrush="{x:Static SystemColors.ControlBrush}" Background="{x:Static SystemColors.WindowBrush}"/>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DetailsPaneIconContainerStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Height" Value="{Binding ActualWidth,RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Border>
                            <ContentPresenter Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PreviewPaneStyle" TargetType="{x:Type ContentControl}">
        <!--Setter Property="Background" Value="{DynamicResource MountedListViewBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <!--Border CornerRadius="0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Border.Effect>
                                <DropShadowEffect Color="Black" Direction="180" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Border.Effect>
                        </Border-->
                        <Border BorderThickness="3,0,0,0" BorderBrush="{x:Static SystemColors.ControlBrush}" Background="{x:Static SystemColors.WindowBrush}"/>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="StatusBarIconPrimaryBrush" StartPoint="0,0" EndPoint="1,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FF587996"/>
            <GradientStop Offset="1" Color="#FF6688A5"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="StatusBarIconLightPrimaryBrush" StartPoint="0,0" EndPoint="1,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FF6EB5F5"/>
            <GradientStop Offset="1" Color="#FFBDEBFF"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="StatusBarIconDarkPrimaryBrush" StartPoint="0,0" EndPoint="1,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FF728CA8"/>
            <GradientStop Offset="1" Color="#FFA6A6A8"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="StatusBarIconSecondaryBrush">#FF7F7F7F</SolidColorBrush>

    <Style x:Key="StatusBarDetailsViewToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <!--BasedOn="{StaticResource ToolbarToggleButtonStyle}"-->
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="0,-10"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Content">
            <Setter.Value>
                <UniformGrid Width="15" Height="15" Rows="3" Columns="3" SnapsToDevicePixels="True">
                    <Rectangle Fill="{DynamicResource StatusBarIconPrimaryBrush}" Margin="1"/>
                    <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarIconSecondaryBrush}"/>
                    <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarIconSecondaryBrush}" Margin="1,0"/>
                    <Rectangle Fill="{DynamicResource StatusBarIconDarkPrimaryBrush}" Margin="1"/>
                    <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarIconSecondaryBrush}"/>
                    <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarIconSecondaryBrush}" Margin="1,0"/>
                    <Rectangle Fill="{DynamicResource StatusBarIconPrimaryBrush}" Margin="1"/>
                    <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarIconSecondaryBrush}" Margin="0,0,1,0"/>
                    <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarIconSecondaryBrush}" Margin="0,0,1,0"/>
                </UniformGrid>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4,0,0,4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3,0,0,3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2,0,0,2" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4,0,0,4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3,0,0,3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2,0,0,2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <ContentControl Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False" IsTabStop="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StatusBarIconsViewToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <!--BasedOn="{StaticResource ToolbarToggleButtonStyle}"-->
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="0,-10,-5,-10"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Content">
            <Setter.Value>
                <Border Width="15" Height="12" Background="{DynamicResource StatusBarIconLightPrimaryBrush}" BorderBrush="{DynamicResource StatusBarIconSecondaryBrush}" BorderThickness="1">
                    <Path Data="M 0 0 L 5 2 L 10 3 L 12 5 L 0 5 Z" Fill="{DynamicResource StatusBarIconDarkPrimaryBrush}" VerticalAlignment="Bottom"/>
                </Border>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="0,0,12,0" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="0,0,11,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="0,0,10,0" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="0,0,12,0" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="0,0,11,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="0,0,10,0" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <ContentControl Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False" IsTabStop="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Grid x:Key="StatusBarDetailsViewIcon" Width="15" Height="15" UseLayoutRounding="True" SnapsToDevicePixels="True">
        <UniformGrid Rows="3" Columns="3">
            <Rectangle Fill="{DynamicResource StatusBarDetailsViewIconThumbnailBrush}" Margin="1"/>
            <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarDetailsViewIconLabelBrush}"/>
            <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarDetailsViewIconLabelBrush}" Margin="1,0"/>
            <Rectangle Fill="{DynamicResource StatusBarDetailsViewIconMiddleThumbnailBrush}" Margin="1"/>
            <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarDetailsViewIconLabelBrush}"/>
            <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarDetailsViewIconLabelBrush}" Margin="1,0"/>
            <Rectangle Fill="{DynamicResource StatusBarDetailsViewIconThumbnailBrush}" Margin="1"/>
            <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarDetailsViewIconLabelBrush}"/>
            <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource StatusBarDetailsViewIconLabelBrush}" Margin="1,0"/>
        </UniformGrid>
    </Grid-->

    <!--#endregion Main Content Styles-->


    <!--#region Main Ribbon Styles-->

    <Style x:Key="ToolbarBackgroundControlStyle" TargetType="{x:Type Control}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
    </Style>

    <Style x:Key="{x:Type Fluent:Ribbon}" TargetType="{x:Type Fluent:Ribbon}">
        <!--Setter Property="IsAutomaticCollapseEnabled" Value="False"/-->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{x:Static SystemColors.ControlTextBrush}" />
        <!--Setter Property="FocusVisualStyle"
                Value="{DynamicResource ControlStyleEmptyFocus}" /-->
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Fluent:FrameworkHelper.UseLayoutRounding" Value="True" />
        <!--Setter Property="TitleBar" Value="{Binding TitleBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue={x:Null}}" /-->
        <!--Setter Property="QuickAccessToolBarHeight" Value="{Binding TitleBar.ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue=23}" /-->
        <Setter Property="QuickAccessToolBarHeight" Value="18" />
        <Setter Property="Margin" Value="0,0,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:Ribbon}">
                    <ControlTemplate.Resources>
                        <!--Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
                        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" /-->
                        <!--Style BasedOn="{StaticResource FluentRibbonDefaultContextMenuStyle}" TargetType="{x:Type ContextMenu}" /-->
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid x:Name="PART_LayoutRoot">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Fluent:RibbonTabControl x:Name="PART_RibbonTabControl" Menu="{TemplateBinding Menu}" ContentHeight="{TemplateBinding ContentHeight}" ContextMenu="{Binding ContextMenu, ElementName=PART_LayoutRoot}" IsMouseWheelScrollingEnabled="{TemplateBinding IsMouseWheelScrollingEnabled}"/>
                            <!--AreTabHeadersVisible="{TemplateBinding AreTabHeadersVisible}" IsToolBarVisible="{TemplateBinding IsToolBarVisible}"-->
                            <ContentControl x:Name="quickAccessToolBarHolder" Grid.Row="1" Height="{TemplateBinding QuickAccessToolBarHeight}" HorizontalAlignment="Left">
                                <Fluent:QuickAccessToolBar x:Name="PART_QuickAccessToolBar" ShowAboveRibbon="{Binding ShowQuickAccessToolBarAboveRibbon, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsMenuDropDownVisible="{TemplateBinding IsQuickAccessToolBarMenuDropDownVisible}" HorizontalAlignment="Left" Focusable="False"/>
                            </ContentControl>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsQuickAccessToolBarVisible" Value="False">
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_QuickAccessToolBar" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <!--Setter Property="Visibility" TargetName="PART_RibbonTabControl" Value="Collapsed" /-->
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                        </Trigger>
                        <!--Trigger Property="QuickAccessToolBar" Value="{x:Null}">
                            <Setter Property="Content" TargetName="quickAccessToolBarHolder" Value="{x:Null}" />
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                        </Trigger-->
                        <Trigger Property="ShowQuickAccessToolBarAboveRibbon" Value="True">
                            <Setter Property="Content" TargetName="quickAccessToolBarHolder" Value="{x:Null}" />
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type Fluent:RibbonTabControl}" TargetType="{x:Type Fluent:RibbonTabControl}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClipToBounds" Value="False"/>
        <Setter Property="Margin" Value="0,2,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTabControl}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ScrollViewer}">
                            <Setter Property="CanContentScroll" Value="True" />
                            <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
                            <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
                            <Setter Property="PanningMode" Value="HorizontalOnly" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Width="{TemplateBinding ActualWidth}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" IsHitTestVisible="True" ClipToBounds="False" />
                                            <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" HorizontalAlignment="Left" Width="13" Height="Auto" VerticalAlignment="Stretch" Style="{DynamicResource ScrollButtonStyle}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                                                <Path Fill="{StaticResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="3" Height="5" Data="M0,0L1,1 1,-1z" />
                                            </RepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" HorizontalAlignment="Right" Width="13" Height="Auto" VerticalAlignment="Stretch" Style="{DynamicResource ScrollButtonStyle}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                                                <Path Fill="{StaticResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="3" Height="5" Data="M1,0L0,1 0,-1z" />
                                            </RepeatButton>
                                            <Rectangle x:Name="bottomSeparator" Height="1" VerticalAlignment="Bottom" Fill="Transparent"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <!--Trigger Property="ComputedHorizontalScrollBarVisibility" Value="Hidden">
                                            </Trigger-->
                                            <DataTrigger Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}}" Value="True">
                                                <Setter TargetName="bottomSeparator" Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid x:Name="ContentGrid" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local" Height="Auto" VerticalAlignment="Top">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="rowDefinition" MinHeight="0" MaxHeight="{TemplateBinding ContentHeight}" />
                            <RowDefinition x:Name="rowDefinition1" MinHeight="0" MaxHeight="{TemplateBinding ContentGapHeight}" />
                        </Grid.RowDefinitions>
                        <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0,-1,0,0" Width="Auto" BorderThickness="0" Grid.Row="1" BorderBrush="Transparent" />
                        <!--Border x:Name="mainContentControlBorder" Height="94" HorizontalAlignment="Stretch" Margin="1,0,1,0" Grid.Row="1" Grid.RowSpan="1" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" TextElement.Foreground="{DynamicResource ToolbarButtonForegroundBrush}" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2">
                            <ContentControl x:Name="mainContentControl" Margin="0" Focusable="False">
                                <ContentPresenter ContentSource="SelectedContent" x:Name="PART_SelectedContentPresenter" HorizontalAlignment="Stretch" Margin="0" />
                            </ContentControl>
                        </Border-->
                        <themes:ClassicBorderDecorator x:Name="mainContentControlBorder" Height="94" BorderStyle="Raised" BorderThickness="2" Grid.Row="1">
                            <ContentControl x:Name="mainContentControl" Margin="0" Focusable="False">
                                <ContentPresenter ContentSource="SelectedContent" x:Name="PART_SelectedContentPresenter" HorizontalAlignment="Stretch" Margin="0" />
                            </ContentControl>
                        </themes:ClassicBorderDecorator>
                        <Border Margin="0" VerticalAlignment="Stretch" Grid.Row="2" Background="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Grid x:Name="TabsGrid" Background="Transparent" TextElement.Foreground="{DynamicResource ToolbarButtonForegroundBrush}" HorizontalAlignment="Stretch" Width="Auto" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="9994">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Fluent:WindowSteeringHelperControl Grid.ColumnSpan="4" />
                            <ContentPresenter Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ContentSource="Menu" />
                            <Fluent:RibbonScrollViewer Grid.Column="1"  HorizontalAlignment="Stretch" Margin="0,0,0,-2" Width="Auto" Style="{DynamicResource RibbonTabScrollViewer}" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" IsHitTestVisible="True" IsTabStop="False" Panel.ZIndex="9994">
                                <Fluent:RibbonTabsContainer x:Name="PART_TabsContainer" IsItemsHost="True" Height="Auto" HorizontalAlignment="Stretch" Margin="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="9994"/>
                            </Fluent:RibbonScrollViewer>
                            <StackPanel HorizontalAlignment="Right" Grid.Column="3" Orientation="Horizontal" Margin="0,0,0,0">
                                <Grid>
                                    <Image x:Name="image" Width="22" Height="22" Stretch="None" Visibility="Collapsed" />
                                    <Fluent:ToggleButton x:Name="PART_MinimizeButton" Margin="0" Width="22" VerticalAlignment="Stretch" Size="Small" IsChecked="{Binding Path=IsMinimized, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding CanMinimize, Converter={StaticResource BoolToVisibilityConverter}}">
                                        <Fluent:ToggleButton.Icon>
                                            <Grid Width="22" Height="22" Background="#01000000" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Path Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Fluent:ToggleButton}}}" Stroke="{DynamicResource CaptionButtonActiveIdleBrush}" StrokeThickness="0" Data="M 0 5 L 4 0 L 8 5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" RenderTransformOrigin="0.5,0.5">
                                                    <!--Path.RenderTransform>
                                                <RotateTransform x:Name="IconRotateTransform"/>
                                            </Path.RenderTransform-->
                                                </Path>
                                            </Grid>
                                        </Fluent:ToggleButton.Icon>
                                        <!--Fluent:ToggleButton.Style>
                                            <Style TargetType="{x:Type Fluent:ToggleButton}">
                                                <Setter Property="Width" Value="22" />
                                                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
                                                <Setter Property="CanAddToQuickAccessToolBar" Value="False" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                                                            <Grid Background="#01000000">
                                                                <Grid x:Name="HoverBackground" Opacity="0" ClipToBounds="False" IsHitTestVisible="False">
                                                                    <Border Margin="0" Background="{DynamicResource PlexGlowToggleButtonHoverBackground}" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="2" RenderTransformOrigin="0.5,0.5" CornerRadius="0,8,0,0" ClipToBounds="False" IsHitTestVisible="False">
                                                                        <Border.ToolTip>
                                                                            <Fluent:ScreenTip x:Name="screenTip" Title="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipTitle, Mode=OneWay}" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipText, Mode=OneWay}" />
                                                                        </Border.ToolTip>
                                                                    </Border>
                                                                    <Border Background="Transparent" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="0,1,1,0" CornerRadius="0,8,0,0" Height="8" VerticalAlignment="Top" Margin="-100,-1,0,1" IsHitTestVisible="False">
                                                                        <Border.OpacityMask>
                                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                                <LinearGradientBrush.GradientStops>
                                                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                                                    <GradientStop Offset="1" Color="White"/>
                                                                                </LinearGradientBrush.GradientStops>
                                                                            </LinearGradientBrush>
                                                                        </Border.OpacityMask>
                                                                    </Border>
                                                                    <Border Background="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderBrush="Transparent" BorderThickness="0" Height="1" VerticalAlignment="Bottom" Margin="-100,0,0,0" IsHitTestVisible="False">
                                                                        <Border.OpacityMask>
                                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                                <LinearGradientBrush.GradientStops>
                                                                                    <GradientStop Offset="0" Color="Transparent"/>
                                                                                    <GradientStop Offset="1" Color="White"/>
                                                                                </LinearGradientBrush.GradientStops>
                                                                            </LinearGradientBrush>
                                                                        </Border.OpacityMask>
                                                                    </Border>
                                                                </Grid>
                                                                <Grid UseLayoutRounding="True">
                                                                    <!-Grid.Effect>
                                                                        <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3"
                                              BlurRadius="10" Opacity="0.5" />
                                                                    </Grid.Effect->
                                                                    <Path x:Name="iconImage" Fill="{TemplateBinding Foreground}" Stroke="{DynamicResource CaptionButtonActiveIdleBrush}" StrokeThickness="0" Data="M 0 5 L 4 0 L 8 5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" RenderTransformOrigin="0.5,0.5">
                                                                        <Path.RenderTransform>
                                                                            <RotateTransform x:Name="IconRotateTransform"/>
                                                                        </Path.RenderTransform>
                                                                    </Path>
                                                                    <!-Path x:Name="iconImageChecked" Fill="{DynamicResource CaptionButtonActiveIdleBrush}" Stroke="{DynamicResource CaptionButtonActiveIdleBrush}" StrokeThickness="1" Data="M 0 0 L 4 5 L 8 0 Z" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" Visibility="Collapsed"/->
                                                                </Grid>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsChecked" Value="True">
                                                                    <!-Setter Property="Visibility" TargetName="iconImage" Value="Collapsed" />
                                                                    <Setter Property="Visibility" TargetName="iconImageChecked" Value="Visible" /->
                                                                    <Setter Property="Title" TargetName="screenTip" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipTitle , Mode=OneWay}" />
                                                                    <Setter Property="Text" TargetName="screenTip" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipText , Mode=OneWay}" />
                                                                    <Trigger.EnterActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetName="IconRotateTransform" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.125" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </Trigger.EnterActions>
                                                                    <Trigger.ExitActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetName="IconRotateTransform" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.125" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </Trigger.ExitActions>
                                                                </Trigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Trigger.EnterActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </Trigger.EnterActions>
                                                                    <Trigger.ExitActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </Trigger.ExitActions>
                                                                    <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}" />
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Trigger.EnterActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </Trigger.EnterActions>
                                                                    <Trigger.ExitActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </Trigger.ExitActions>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Fluent:ToggleButton.Style-->
                                    </Fluent:ToggleButton>
                                </Grid>
                                <StackPanel x:Name="PART_ToolbarPanel" Visibility="{Binding IsQuickAccessToolBarVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Converter={StaticResource BoolToVisibilityConverter}}" Orientation="Horizontal" />
                            </StackPanel>
                        </Grid>
                        <Grid Margin="35,0,0,0" ClipToBounds="True" VerticalAlignment="Bottom" Grid.Row="0">
                            <Border x:Name="TopSeparator" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Height="1" VerticalAlignment="Bottom" Margin="-35,0,0,0" IsHitTestVisible="False"/>
                        </Grid>
                        <!--Border.OpacityMask>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Offset="0" Color="Transparent"/>
                                    <GradientStop Offset="0.5" Color="White"/>
                                    <GradientStop Offset="1" Color="Transparent"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.OpacityMask-->
                        <Popup x:Name="PART_Popup" PlacementTarget="{Binding Path=SelectedTabItem, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Placement="Custom" StaysOpen="True" AllowsTransparency="True" PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}" IsOpen="{TemplateBinding IsDropDownOpen}" HorizontalOffset="0" VerticalOffset="-10">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MinHeight="20"
                                       MaxHeight="20" />
                                    <RowDefinition MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" />
                                    <RowDefinition MinHeight="{TemplateBinding ContentGapHeight}" MaxHeight="{TemplateBinding ContentGapHeight}" />
                                    <RowDefinition Height="20" />
                                </Grid.RowDefinitions>
                                <Grid ClipToBounds="True" Grid.Row="1" Grid.RowSpan="3">
                                    <Control Style="{DynamicResource ToolbarBackgroundControlStyle}" Margin="0,-12,0,21" UseLayoutRounding="True">
                                        <Control.Effect>
                                            <DropShadowEffect Color="Black" Direction="270" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                                        </Control.Effect>
                                    </Control>
                                </Grid>
                                <Border Grid.Row="1"  Grid.RowSpan="2" BorderThickness="0" Margin="1,0" BorderBrush="Transparent" Background="Transparent" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained">
                                    <ContentControl x:Name="popupContentControl" Focusable="False" Margin="0" />
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--Trigger SourceName="PART_MinimizeButton" Property="IsChecked" Value="True">
                            <Setter Property="IsMinimized" Value="True"/>
                        </Trigger-->
                        <!--DataTrigger Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" Value="True">
                            <Setter Property="IsMinimized" Value="True"/>
                        </DataTrigger-->
                        <DataTrigger Binding="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='l290', Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                            <!--Setter Property="IsMinimized" Value="True"/-->
                            <Setter TargetName="mainContentControlBorder" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mainContentControlBorder" Storyboard.TargetProperty="Height" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <!--DoubleAnimation Storyboard.TargetName="BottomSeparator" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25"/-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mainContentControlBorder" Storyboard.TargetProperty="Height" To="94" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <!--DoubleAnimation Storyboard.TargetName="BottomSeparator" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25"/-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Content" TargetName="popupContentControl" Value="{Binding ElementName=PART_SelectedContentPresenter, Mode=OneWay}" />
                            <Setter Property="Visibility" TargetName="image" Value="Collapsed" />
                            <!--Setter Property="Visibility" TargetName="BottomSeparator" Value="Collapsed" /-->
                        </Trigger>
                        <Trigger SourceName="mainContentControlBorder" Property="Height" Value="0">
                            <Setter TargetName="mainContentControl" Property="Content" Value="{x:Null}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownOpen" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="image" Value="Visible" />
                            <Setter Property="Opacity" TargetName="PART_MinimizeButton" Value="0" />
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='l290', Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                            <Setter TargetName="PART_MinimizeButton" Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_TabsContainer" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="mainContentControlBorder" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type Fluent:RibbonTabItem}" TargetType="{x:Type Fluent:RibbonTabItem}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="IsMinimized" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsMinimized, Mode=OneWay, FallbackValue=False}" />
        <Setter Property="IsOpen" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsDropDownOpen, Mode=OneWay, FallbackValue=True}" />
        <Setter Property="Indent" Value="8" />
        <Setter Property="Foreground" Value="{x:Static SystemColors.ControlTextBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ActiveTabBackground" Value="Transparent" />
        <Setter Property="ActiveTabBorderBrush" Value="Transparent" />
        <Setter Property="ClipToBounds" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTabItem}">
                    <!--ControlTemplate.Resources>
                        <Style x:Key="{x:Type Fluent:Button}" BasedOn="{StaticResource PlexRibbonButtonStyle}" TargetType="{x:Type Fluent:Button}"/>
                    </ControlTemplate.Resources-->
                    <Grid x:Name="grid" Height="Auto" Margin="0,2,0,0" ClipToBounds="False">
                        <!--Grid x:Name="HoverBackground" Opacity="0" ClipToBounds="False" IsHitTestVisible="False">
                            <Border Margin="100,2,100,0" Background="{StaticResource PlexGlowToggleButtonHoverBackground}" BorderBrush="{StaticResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="2" RenderTransformOrigin="0.5,0.5" ClipToBounds="False" IsHitTestVisible="False">
                                <Border.RenderTransform>
                                    <RotateTransform Angle="0"/>
                                </Border.RenderTransform>
                                <Border.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="#00000000"/>
                                            <GradientStop Offset="0.875" Color="#FF000000"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                            </Border>
                            <Border Background="{StaticResource PlexGlowToggleButtonHoverBorderBrush}" BorderBrush="Transparent" BorderThickness="0" Height="1" VerticalAlignment="Top" Margin="0,1" IsHitTestVisible="False">
                                <Border.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                            </Border>
                        </Grid-->
                        <Border x:Name="groupBorder" Margin="0,0,0,1" BorderThickness="0" Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}" />
                        <themes:ClassicBorderDecorator x:Name="selectedBorder" Background="{x:Static SystemColors.ControlBrush}" Opacity="0" IsHitTestVisible="False" BorderStyle="TabTop" BorderThickness="2,2,2,0"/>
                        <!--Grid x:Name="selectedBorder" Background="{x:Static SystemColors.ControlBrush}" Opacity="0" IsHitTestVisible="False">
                            <Border Margin="100,2,100,1" Background="{DynamicResource PlexGlowToggleButtonHoverBackground}" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="2" RenderTransformOrigin="0.5,0.5" ClipToBounds="False" IsHitTestVisible="False"/>
                            <themes:ClassicBorderDecorator BorderStyle="TabTop" BorderThickness="2,2,2,0"/>
                            <Rectangle Fill="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" Height="1" VerticalAlignment="Top" Margin="0,1" IsHitTestVisible="False">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Fill="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" Height="1" VerticalAlignment="Bottom" Margin="0" IsHitTestVisible="False">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid-->
                        <Grid x:Name="minHoverBorder" Opacity="{Binding Opacity, ElementName=selectedBorder}" IsHitTestVisible="False" Visibility="Hidden">
                            <Border Margin="0,2,0,1" Background="{DynamicResource PlexGlowToggleButtonHoverBackground}" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="2" RenderTransformOrigin="0.5,0.5" ClipToBounds="False" IsHitTestVisible="False"/>
                            <Rectangle Fill="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" Height="1" VerticalAlignment="Top" Margin="0,1" IsHitTestVisible="False">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Fill="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" Height="1" VerticalAlignment="Bottom" Margin="0" IsHitTestVisible="False">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid>
                        <Grid x:Name="minSelectedBorder" Opacity="0" IsHitTestVisible="False" Visibility="Hidden">
                            <Border Margin="0,2,0,1" Background="{DynamicResource PlexGlowToggleButtonHoverBackground}" BorderBrush="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" BorderThickness="2" RenderTransformOrigin="0.5,0.5" ClipToBounds="False" IsHitTestVisible="False"/>
                            <Rectangle Fill="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" Height="1" VerticalAlignment="Top" Margin="0,1" IsHitTestVisible="False">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <Rectangle Fill="{DynamicResource PlexGlowToggleButtonHoverBorderBrush}" Height="1" VerticalAlignment="Bottom" Margin="0" IsHitTestVisible="False">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent"/>
                                            <GradientStop Offset="0.5" Color="White"/>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Grid>
                        <Border x:Name="PART_ContentContainer" HorizontalAlignment="Stretch" Margin="6,2,4,0" VerticalAlignment="Stretch" Padding="15,0,0,0" BorderThickness="0" BorderBrush="Transparent">
                            <ContentControl AutomationProperties.Name="{TemplateBinding Header}" AutomationProperties.AutomationId="{TemplateBinding Name}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="5,1,5,4" HorizontalAlignment="Center" VerticalAlignment="Center" Height="Auto" />
                        </Border>
                        <Grid x:Name="separatorGrid" Margin="0" Visibility="Collapsed" HorizontalAlignment="Right" Width="1">
                            <Separator HorizontalAlignment="Right" Width="1"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--Setter Property="Opacity" TargetName="PART_ContentContainer" Value="0.5" /-->
                        </Trigger>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="selectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="selectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <Setter Property="Foreground" Value="{StaticResource ToolbarButtonHoverPrimaryBorderBrush}" />
                        </MultiTrigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasRightGroupBorder" Value="False" />
                                <Condition Property="HasLeftGroupBorder" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="2,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasLeftGroupBorder" Value="False" />
                                <Condition Property="HasRightGroupBorder" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="0,0,2,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasLeftGroupBorder" Value="False" />
                                <Condition Property="HasRightGroupBorder" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="0,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasLeftGroupBorder" Value="True" />
                                <Condition Property="HasRightGroupBorder" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="2,0,2,0" />
                        </MultiTrigger>
                        <Trigger Property="Group" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="groupBorder" Value="Collapsed" />
                            <Setter Property="Margin" TargetName="separatorGrid" Value="-1,0,0,1" />
                        </Trigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="selectedBorder" Property="Visibility" Value="Hidden"/>
                            <!--Setter Property="Selector.IsSelected" Value="False"/-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                                <!--Condition Property="IsMinimized" Value="False" /-->
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="selectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="selectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--Condition Property="IsMouseOver" Value="True"/-->
                                <Condition Property="Selector.IsSelected" Value="False" />
                                <Condition Property="IsMinimized" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="minHoverBorder" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--Condition Property="IsMouseOver" Value="True"/-->
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="minSelectedBorder" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="minSelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="minSelectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--Condition Property="IsMouseOver" Value="True"/-->
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" /-->
                        </MultiTrigger>
                        <!--Trigger Property="Selector.IsSelected" Value="True">
                        </Trigger-->
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="False" />
                                <Condition Property="Group" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="selectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="selectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" />
                        </MultiTrigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="selectedBorder" Value="1" />
                            <Setter Property="Background" TargetName="grid" Value="Transparent" />
                            <Setter Property="Foreground" Value="{Binding Group.Foreground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="True" />
                                <Condition Property="Group" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="selectedBorder" Value="1" />
                            <Setter Property="Background" TargetName="grid" Value="Transparent" />
                        </MultiTrigger>
                        <Trigger Property="IsSeparatorVisible" Value="True">
                            <Setter Property="Visibility" TargetName="separatorGrid" Value="Visible" />
                            <Setter Property="Margin" TargetName="PART_ContentContainer" Value="6,2,6,0" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsContextual, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding Group.Visibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Collapsed" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Text="{Binding}" TextWrapping="NoWrap" TextTrimming="None" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:RibbonGroupBox}" TargetType="{x:Type Fluent:RibbonGroupBox}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,15,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonGroupBox}">
                    <Grid x:Name="grid2" HorizontalAlignment="Stretch">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" />
                        <Grid>
                            <ContentControl x:Name="border1" Focusable="False">
                                <Grid x:Name="PART_ParentPanel" Margin="0,1,0,2" Height="Auto">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Fluent:RibbonGroupBoxWrapPanel x:Name="PART_UpPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" Width="Auto" Height="Auto" IsItemsHost="True" Margin="4,0,4,0" Grid.Row="0" />
                                    <Grid x:Name="PART_DownGrid" MaxWidth="{Binding ActualWidth, ElementName=PART_ParentPanel}" Margin="0,-2,2,2" Grid.Row="1" VerticalAlignment="Bottom" Height="Auto">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <!--Content="{TemplateBinding Header}"
                                            ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"-->
                                        <TextBlock Text="{TemplateBinding Header}" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" Margin="5,2" KeyboardNavigation.IsTabStop="False" />
                                        <Fluent:Button Margin="0,0,1,1" x:Name="PART_DialogLauncherButton" HorizontalAlignment="Stretch" Width="15" Height="14" Grid.Column="1" Focusable="False"
                                           IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" Background="Transparent" BorderBrush="Transparent" VerticalAlignment="Bottom" Icon="{TemplateBinding LauncherIcon}" Header="{TemplateBinding LauncherText}" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>
                                </Grid>
                            </ContentControl>
                            <Grid x:Name="grid1" Margin="0" Width="Auto" Height="Auto" Visibility="Collapsed" Grid.RowSpan="2">
                                <ContentControl Content="{TemplateBinding Header}" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" Style="{DynamicResource Fluent.Ribbon.Styles.RibbonGroupBox.TwoLineHeaderContentControl}" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="5,38,5,0" KeyboardNavigation.IsTabStop="False" />
                                <!--ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Fluent:RibbonGroupBox.IsCollapsedHeaderContentPresenter="True"-->
                                <Border HorizontalAlignment="Center" VerticalAlignment="Top" Width="31" Height="31" BorderThickness="1" Margin="5,3,8,0">
                                    <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush}"-->
                                    <ContentPresenter x:Name="iconImage" Height="16"
                                          Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" Width="16" SnapsToDevicePixels="True" />
                                </Border>
                                <Popup x:Name="PART_Popup" Width="Auto" Height="Auto" AllowsTransparency="True" PlacementTarget="{Binding ElementName=grid1, Mode=OneWay}" IsOpen="{TemplateBinding IsDropDownOpen}">
                                    <Grid Width="Auto" Height="Auto" Margin="0,20">
                                        <Border x:Name="border" Height="Auto"  BorderThickness="1">
                                            <!--Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}"
                                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}"
                                            d:LayoutOverrides="Width"-->
                                            <ContentControl x:Name="popupContent" />
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>

                            <!--Rectangle x:Name="separator" Fill="{DynamicResource SeparatorVerticalBackgroundBrush}" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="1" Height="Auto" Margin="0,4" /-->
                            <themes:ClassicBorderDecorator x:Name="separator" BorderStyle="VerticalLine" BorderThickness="1,0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="2" Height="Auto" Margin="0,4,0,7" />
                            <!--Fill="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}"
                            Visibility="{Binding IsSeparatorVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                            Grid.RowSpan="2" -->
                        </Grid>

                        <Image x:Name="PART_SnappedImage" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Collapsed">
                            <Setter Property="Visibility" TargetName="grid1" Value="Visible" />
                            <Setter Property="UIElement.Visibility" TargetName="border1" Value="Collapsed" />
                            <Setter Property="HorizontalAlignment" TargetName="grid2" Value="Left" />
                            <Setter Property="Content" TargetName="border1" Value="{x:Null}" />
                            <Setter Property="Content" TargetName="popupContent" Value="{Binding ElementName=PART_ParentPanel}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="State" Value="Collapsed" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background}" /-->
                        </MultiTrigger>
                        <!--Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background}" />
                        </Trigger-->
                        <Trigger Property="IsLauncherVisible" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DialogLauncherButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="State" Value="QuickAccess">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Fluent:RibbonGroupBox}">
                            <Grid Width="22">
                                <Border x:Name="PART_ButtonBorder" BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Stretch">
                                    <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="16" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" Width="16" Margin="1,1,0,0" SnapsToDevicePixels="True" />
                                </Border>

                                <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                                    <Grid Width="Auto" Height="Auto" Margin="0,20">
                                        <Border x:Name="border" Height="Auto" BorderThickness="1">
                                            <Grid x:Name="PART_ParentPanel" Margin="0,1,0,2" Height="85">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <Fluent:RibbonGroupBoxWrapPanel x:Name="PART_UpPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" Width="Auto" Height="Auto" IsItemsHost="True" Margin="2,0,4,0" />
                                                <Grid x:Name="PART_DownGrid" Margin="0,-2,2,2" Grid.Row="1" VerticalAlignment="Bottom" Height="Auto" MaxWidth="{Binding ActualWidth, ElementName=PART_UpPanel}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <ContentControl Content="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2,0" KeyboardNavigation.IsTabStop="False" />
                                                    <!--ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"-->
                                                    <Fluent:Button Margin="0,0,1,1" x:Name="PART_DialogLauncherButton" HorizontalAlignment="Stretch" Height="14" Grid.Column="1" Focusable="False" IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" Background="Transparent" BorderBrush="Transparent" VerticalAlignment="Bottom" Icon="{TemplateBinding LauncherIcon}" Header="{TemplateBinding LauncherText}" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                                    <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                                    <!--Setter Property="Effect" TargetName="iconImage">
                                        <Setter.Value>
                                            <Fluent:GrayscaleEffect/>
                                        </Setter.Value>
                                    </Setter-->
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsDropDownOpen" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                                    <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="22" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="SnapsToDevicePixels" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:RibbonTitleBar}" TargetType="{x:Type Fluent:RibbonTitleBar}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="48,0,0,0"/>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTitleBar}">
                    <Grid>
                        <ContentPresenter x:Name="PART_QuickAccessToolbarHolder" ContentSource="QuickAccessToolBar" />
                        <ContentPresenter x:Name="PART_HeaderHolder" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsHitTestVisible="False" />
                        <Fluent:RibbonContextualGroupsContainer x:Name="PART_ItemsContainer" IsItemsHost="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_QuickAccessToolbarHolder" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_ItemsContainer" />
                        </Trigger>
                        <Trigger Property="HideContextTabs" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_ItemsContainer" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_QuickAccessToolbarHolder" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:QuickAccessToolBar}" TargetType="{x:Type Fluent:QuickAccessToolBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:QuickAccessToolBar}">
                    <DockPanel x:Name="PART_RootPanel" KeyboardNavigation.TabNavigation="Local">
                        <ContentControl x:Name="menuContentControl" DockPanel.Dock="Right" HorizontalAlignment="Right" Focusable="False">
                            <Fluent:DropDownButton CanAddToQuickAccessToolBar="False" x:Name="PART_MenuDownButton" Width="13" HorizontalAlignment="Right" VerticalAlignment="Stretch" Height="22" DockPanel.Dock="Right" IsEnabled="{TemplateBinding IsEnabled}" Visibility="{Binding IsMenuDropDownVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" Size="Small" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarDropDownButtonTooltip, Mode=OneWay}" KeyboardNavigation.TabIndex="3">
                                <Fluent:DropDownButton.Style>
                                    <Style TargetType="{x:Type Fluent:DropDownButton}">
                                        <Setter Property="VerticalAlignment" Value="Stretch" />
                                        <Setter Property="Width" Value="13" />
                                        <Setter Property="Foreground" Value="{DynamicResource CaptionButtonActiveIdleBrush}" />
                                        <Setter Property="SnapsToDevicePixels" Value="True" />
                                        <Setter Property="UseLayoutRounding" Value="True" />
                                        <Setter Property="Effect">
                                            <Setter.Value>
                                                <DropShadowEffect x:Name="DropShadow" Color="Black" Direction="320" ShadowDepth="3"
                                              BlurRadius="10" Opacity="0.5" />
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Icon">
                                            <Setter.Value>
                                                <StackPanel Orientation="Vertical" Width="7" VerticalAlignment="Center">
                                                    <Rectangle HorizontalAlignment="Stretch" Height="1" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Fluent:DropDownButton}}}" Stroke="Transparent" StrokeThickness="0" Margin="0,0,0,2"/>
                                                    <Path Data="M 0 0 L 2 2 L 4 0 Z" HorizontalAlignment="Center" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Fluent:DropDownButton}}}" Stroke="Transparent" StrokeThickness="0"/>
                                                </StackPanel>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
                                                    <Grid Margin="0,3,0,0">
                                                        <Border x:Name="PART_ButtonBorder" BorderThickness="1" Background="Transparent" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="13">
                                                            <!--Image x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Source="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:ObjectToImageConverter}, ConverterParameter='8,8'}" Width="8" Margin="-3,0,2,0" /-->
                                                            <ContentControl Content="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" />
                                                        </Border>
                                                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                                                            <!--PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" -->
                                                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                                    <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                                        <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                                                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                                            <Grid.RowDefinitions>
                                                                                <RowDefinition Height="*" />
                                                                                <RowDefinition Height="Auto" />
                                                                            </Grid.RowDefinitions>
                                                                            <ScrollViewer Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
                                                                                <StackPanel x:Name="PART_MenuPanel" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                                            </ScrollViewer>
                                                                            <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" Grid.Row="1" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}">
                                                                                <Grid>
                                                                                    <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                                                    <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                                                </Grid>
                                                                            </Border>
                                                                        </Grid>
                                                                    </Grid>
                                                                </Border>
                                                            </Grid>
                                                        </Popup>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="ResizeMode" Value="None">
                                                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                                                        </Trigger>
                                                        <Trigger Property="ResizeMode" Value="Both">
                                                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                                                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                                                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                                                        </Trigger>
                                                        <Trigger Property="ResizeMode" Value="Vertical">
                                                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                                                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                                                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                                                        </Trigger>
                                                        <Trigger Property="Size" Value="Middle">
                                                            <Setter Property="VerticalAlignment" TargetName="PART_ButtonBorder" Value="Stretch" />
                                                        </Trigger>
                                                        <Trigger Property="IsDropDownOpen" Value="True">
                                                            <!--Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                                                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" /-->
                                                            <Setter Property="Foreground" Value="{DynamicResource CaptionButtonActivePressedBrush}"/>
                                                        </Trigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True" />
                                                                <Condition Property="IsDropDownOpen" Value="False" />
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Foreground" Value="{DynamicResource CaptionButtonActiveHoverBrush}"/>
                                                            <!--Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                                                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" /-->
                                                        </MultiTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Fluent:DropDownButton.Style>
                                <!--Icon="pack://application:,,,/Fluent;Component/Themes/Images/QuickAccessToolBarDropDown.png"-->
                                <Fluent:GroupSeparatorMenuItem Style="{DynamicResource MenuGroupSeparatorStyle}" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuHeader, Mode=OneWay}" />
                                <StackPanel x:Name="PART_MenuPanel" />
                                <Separator x:Name="menuSeparator" Style="{DynamicResource MenuSeparatorStyle}" />
                                <Fluent:MenuItem x:Name="PART_ShowBelow" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowBelow, Mode=OneWay}" />
                                <Fluent:MenuItem x:Name="PART_ShowAbove" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowAbove, Mode=OneWay}" Visibility="Collapsed" />
                            </Fluent:DropDownButton>
                        </ContentControl>
                        <Fluent:DropDownButton x:Name="PART_ToolbarDownButton" HorizontalAlignment="Right" Width="13" Visibility="Collapsed" VerticalAlignment="Stretch" Style="{DynamicResource ToolbarDropDownButtonStyle}" Height="22" DockPanel.Dock="Right" Fluent:KeyTip.Keys="00" Size="Small" IsEnabled="{TemplateBinding IsEnabled}" Icon="pack://application:,,,/Fluent;Component/Themes/Images/QuickAccessToolBarExtender.png" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMoreControlsButtonTooltip, Mode=OneWay}" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <Fluent:DropDownButton.ContextMenu>
                                <ContextMenu/>
                            </Fluent:DropDownButton.ContextMenu>

                            <StackPanel Orientation="Horizontal" Background="{TemplateBinding Background}" Width="Auto" Height="26" Margin="-1">
                                <StackPanel Orientation="Horizontal" x:Name="PART_ToolBarOverflowPanel" HorizontalAlignment="Left" Width="Auto" Height="Auto" VerticalAlignment="Center" Margin="1,0,0,0" />
                                <Label x:Name="popupContentControl" VerticalAlignment="Center" HorizontalAlignment="Left" Width="13" Background="{x:Null}" Height="22" Focusable="False" Padding="0" Margin="1,0" />
                            </StackPanel>
                        </Fluent:DropDownButton>
                        <StackPanel x:Name="PART_ToolBarPanel" Orientation="Horizontal" Width="Auto" Height="Auto" VerticalAlignment="Stretch" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="1"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CanQuickAccessLocationChanging" Value="False">
                            <Setter Property="Visibility" TargetName="PART_ShowBelow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ShowAbove" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="menuSeparator" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ShowAboveRibbon" Value="False">
                            <Setter Property="Visibility" TargetName="PART_ShowBelow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ShowAbove" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasOverflowItems" Value="True">
                            <Setter Property="Visibility" TargetName="PART_ToolbarDownButton" Value="Visible" />
                            <Setter Property="Content" TargetName="popupContentControl" Value="{Binding ElementName=PART_MenuDownButton, Mode=OneWay}" />
                            <Setter Property="Content" TargetName="menuContentControl" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Main Ribbon Styles-->


    <!--#region Ribbon Control Styles-->

    <Style x:Key="{x:Type Fluent:Button}" TargetType="{x:Type Fluent:Button}">
        <Setter Property="Height" Value="68" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2,1"/>
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:Button}">
                    <Grid Background="#01000000">
                        <!--Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border-->
                        <themes:ClassicBorderDecorator x:Name="HoverBackground" BorderStyle="Raised" BorderThickness="2" Opacity="0" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                        <StackPanel x:Name="ContentStackPanel" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" SnapsToDevicePixels="True" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}"/>
                            <Fluent:TwoLineLabel x:Name="ControlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Large">
                            <Setter TargetName="iconImage" Property="Content" Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}"/>
                            <Setter TargetName="iconImage" Property="Width" Value="32"/>
                            <Setter TargetName="iconImage" Property="Height" Value="32"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter TargetName="ControlLabel" Property="HasTwoLines" Value="False"/>
                            <Setter TargetName="ContentStackPanel" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="ControlLabel" Property="Margin" Value="2,0"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Small">
                            <Setter TargetName="ControlLabel" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverBackground" Property="BorderStyle" Value="RaisedPressed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        </Trigger>
                        <!--Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,2,0" />
                            <Setter Property="Content" TargetName="iconImage" Value="{TemplateBinding Icon, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,0" />
                        </Trigger-->
                        <!--Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto" />
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,0" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,2,0" />
                            <Setter Property="Content" TargetName="iconImage" Value="{TemplateBinding Icon, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" />
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center" />
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:DropDownButton}" TargetType="{x:Type Fluent:DropDownButton}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
                    <Grid>
                        <!--Border x:Name="PART_ButtonBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Height="Auto"-->
                        <Grid x:Name="PART_ButtonBorder">
                            <!--Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                                <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                    <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                </Border>
                            </Border-->
                            <themes:ClassicBorderDecorator x:Name="HoverBackground" BorderStyle="Raised" BorderThickness="2" Opacity="0" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                            <StackPanel x:Name="stackPanel" Margin="{TemplateBinding Padding}" Width="Auto" Orientation="Horizontal">
                                <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" Width="32" Margin="0,2,0,0" SnapsToDevicePixels="True" />
                                <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2,0,2,2" HasGlyph="{TemplateBinding HasTriangle}" HasTwoLines="False"/>
                            </StackPanel>
                        </Grid>
                        <!--/Border-->
                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                        <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                                        <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" IsTabStop="False" Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" />
                                            </ScrollViewer>
                                            <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" Grid.Row="1" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}">
                                                <Grid>
                                                    <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                    <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                </Grid>
                                            </Border>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Size" Value="Small">
                            <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed"/>
                            <!--Setter Property="Text" TargetName="controlLabel" Value="" />
                            <Setter Property="Width" TargetName="controlLabel" Value="10" /-->
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,0,0" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="-2,0,2,1" />
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,1" />
                            <!--Setter Property="VerticalAlignment" TargetName="PART_ButtonBorder" Value="Stretch" /-->
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,2,0" />
                        </Trigger>
                        <Trigger Property="Size" Value="Large">
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="True" />
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Vertical" />
                            <Setter Property="Width" TargetName="iconImage" Value="32" />
                            <Setter Property="Height" TargetName="iconImage" Value="32" />
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="HoverBackground" Property="BorderStyle" Value="RaisedPressed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsDropDownOpen" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsDropDownOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" /-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Width" Value="32" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:SplitButton}" TargetType="{x:Type Fluent:SplitButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Height" Value="32" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="Fluent:KeyTip.AutoPlacement" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:SplitButton}">
                    <Grid>
                        <Grid Name="PART_ButtonBorder" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border x:Name="HoverBackground" BorderBrush="{x:Static SystemColors.ControlDarkDarkBrush}" BorderThickness="1" Opacity="0"/>
                            <DockPanel Name="stackPanel" KeyboardNavigation.TabNavigation="Local">
                                <Border DockPanel.Dock="Right" BorderThickness="0,0,0,0" Name="downBorder" BorderBrush="Transparent" Background="Transparent" Margin="0,0,0,0">
                                    <Grid>
                                        <themes:ClassicBorderDecorator x:Name="BottomHoverBackground" BorderStyle="Raised" BorderThickness="2" Opacity="0" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                                        <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2,1,2,2" HasGlyph="{TemplateBinding HasTriangle}" />
                                    </Grid>
                                </Border>
                                <Grid>
                                    <themes:ClassicBorderDecorator x:Name="TopHoverBackground" BorderStyle="Raised" BorderThickness="2" Opacity="0" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                                    <Fluent:ToggleButton x:Name="PART_Button" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" Margin="0,0,0,0" Height="Auto" Width="Auto" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding IsButtonEnabled}" Header="{TemplateBinding Header}" ToolTip="{TemplateBinding ToolTip}" GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="{TemplateBinding IsDefinitive}" CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" Foreground="{TemplateBinding Foreground}">
                                        <Fluent:ToggleButton.Template>
                                            <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                                                <Grid>
                                                    <!--Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                                                        <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                            <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                        </Border>
                                                    </Border-->
                                                    <StackPanel x:Name="ContentStackPanel" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                                                        <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" SnapsToDevicePixels="True" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}"/>
                                                        <Fluent:TwoLineLabel x:Name="ControlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                                                    </StackPanel>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="Size" Value="Large">
                                                        <Setter TargetName="iconImage" Property="Content" Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}"/>
                                                        <Setter TargetName="iconImage" Property="Width" Value="32"/>
                                                        <Setter TargetName="iconImage" Property="Height" Value="32"/>
                                                    </Trigger>
                                                    <Trigger Property="Size" Value="Middle">
                                                        <Setter TargetName="ControlLabel" Property="HasTwoLines" Value="False"/>
                                                        <Setter TargetName="ContentStackPanel" Property="Orientation" Value="Horizontal"/>
                                                        <Setter TargetName="ControlLabel" Property="Margin" Value="2,0"/>
                                                    </Trigger>
                                                    <Trigger Property="Size" Value="Small">
                                                        <Setter TargetName="ControlLabel" Property="Visibility" Value="Collapsed"/>
                                                    </Trigger>
                                                    <!--Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" />
                                                    </Trigger-->
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <!--Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions-->
                                                        <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Fluent:ToggleButton.Template>
                                    </Fluent:ToggleButton>
                                    <!--Style="{DynamicResource InnerButtonStyle}"-->
                                </Grid>
                            </DockPanel>
                        </Grid>
                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <Grid Name="DropDown" IsEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                        <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                                        <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                <StackPanel x:Name="PART_MenuPanel" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                            </ScrollViewer>
                                            <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" Grid.Row="1" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}">
                                                <Grid>
                                                    <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                    <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                </Grid>
                                            </Border>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <!--Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" /-->
                        </Trigger>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Size" TargetName="PART_Button" Value="Small" />
                            <!--Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" /-->
                            <Setter Property="Width" TargetName="controlLabel" Value="10" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="0,-19,0,0" />
                            <Setter Property="Text" TargetName="controlLabel" Value="" />
                            <Setter Property="Padding" TargetName="downBorder" Value="1,0,0,0" />
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Size" TargetName="PART_Button" Value="Middle" />
                            <!--Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" /-->
                            <Setter Property="Width" TargetName="controlLabel" Value="10" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="0,-19,0,0" />
                            <Setter Property="Text" TargetName="controlLabel" Value="" />
                        </Trigger>
                        <Trigger Property="Size" Value="Large">
                            <Setter TargetName="downBorder" Property="DockPanel.Dock" Value="Bottom"/>
                        </Trigger>
                        <Trigger Property="IsButtonEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="IsEnabled" TargetName="PART_Button" Value="False" />
                            <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="IsEnabled" TargetName="PART_Button" Value="False" />
                            <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="BottomHoverBackground" Property="BorderStyle" Value="RaisedPressed"/>
                            <!--Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" /-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="PART_Button" />
                                <Condition Property="IsDropDownOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TopHoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TopHoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <!--Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" /-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="downBorder" />
                                <Condition Property="IsDropDownOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="BottomHoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="BottomHoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <!--Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" /-->
                            <!--Setter Property="Background" TargetName="downBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="downBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" /-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
                <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22" />
                <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
                <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
                <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
                <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
                <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:ToggleButton}" TargetType="{x:Type Fluent:ToggleButton}">
        <!--Setter Property="Template" Value="{DynamicResource RibbonToggleButtonControlTemplate}" /-->
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="Auto" />
        <!--Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                    <Grid>
                        <!--Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border-->
                        <themes:ClassicBorderDecorator x:Name="HoverBackground" BorderStyle="Raised" BorderThickness="2" Opacity="0"/>
                        <themes:ClassicBorderDecorator x:Name="CheckedBackground" BorderStyle="RaisedPressed" BorderThickness="2" Visibility="Collapsed"/>
                        <StackPanel x:Name="ContentStackPanel" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" SnapsToDevicePixels="True" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}"/>
                            <Fluent:TwoLineLabel x:Name="ControlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Large">
                            <Setter TargetName="iconImage" Property="Content" Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}"/>
                            <Setter TargetName="iconImage" Property="Width" Value="32"/>
                            <Setter TargetName="iconImage" Property="Height" Value="32"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter TargetName="ControlLabel" Property="HasTwoLines" Value="False"/>
                            <Setter TargetName="ContentStackPanel" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="ControlLabel" Property="Margin" Value="2,0"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Small">
                            <Setter TargetName="ControlLabel" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <!--Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions-->
                            <Setter TargetName="HoverBackground" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="CheckedBackground" Property="Visibility" Value="Visible"/>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" Value="{x:Static SystemColors.GrayTextBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
                <!--ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Height="Auto">
                        <StackPanel x:Name="stackPanel" Width="Auto" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}, '32,32', {Binding RelativeSource={RelativeSource TemplatedParent}}}"
                                  Width="32"
                                  Margin="0 2 0 0"
                                  SnapsToDevicePixels="True" />
                            <Fluent:TwoLineLabel x:Name="controlLabel"
                                     Text="{TemplateBinding Header}"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Center"
                                     Margin="2 0 2 0" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size"
                     Value="Small">
                            <Setter Property="Orientation"
                        TargetName="stackPanel"
                        Value="Horizontal" />
                            <Setter Property="Visibility"
                        TargetName="controlLabel"
                        Value="Collapsed" />
                            <Setter Property="HasTwoLines"
                        TargetName="controlLabel"
                        Value="False" />
                            <Setter Property="Width"
                        TargetName="iconImage"
                        Value="16" />
                            <Setter Property="Height"
                        TargetName="iconImage"
                        Value="16" />
                            <Setter Property="Margin"
                        TargetName="iconImage"
                        Value="1,0,2,0" />
                            <Setter Property="Content"
                        TargetName="iconImage"
                        Value="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" />
                            <Setter Property="Margin"
                        TargetName="controlLabel"
                        Value="2,-2,2,2" />
                        </Trigger>
                        <Trigger Property="Size"
                     Value="Middle">
                            <Setter Property="Orientation"
                        TargetName="stackPanel"
                        Value="Horizontal" />
                            <Setter Property="Width"
                        TargetName="stackPanel"
                        Value="Auto" />
                            <Setter Property="VerticalAlignment"
                        TargetName="iconImage"
                        Value="Center" />
                            <Setter Property="HasTwoLines"
                        TargetName="controlLabel"
                        Value="False" />
                            <Setter Property="Margin"
                        TargetName="controlLabel"
                        Value="2,2,2,2" />
                            <Setter Property="VerticalAlignment"
                        TargetName="border"
                        Value="Stretch" />
                            <Setter Property="Width"
                        TargetName="iconImage"
                        Value="16" />
                            <Setter Property="Height"
                        TargetName="iconImage"
                        Value="16" />
                            <Setter Property="Margin"
                        TargetName="iconImage"
                        Value="1,0,2,0" />
                            <Setter Property="VerticalAlignment"
                        TargetName="controlLabel"
                        Value="Center" />
                            <Setter Property="Content"
                        TargetName="iconImage"
                        Value="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                     Value="True">
                            <Setter Property="Background"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                            <Setter Property="BorderBrush"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                     Value="False">
                            <Setter Property="Opacity"
                        TargetName="iconImage"
                        Value="0.5" />
                            <Setter Property="Opacity"
                        TargetName="controlLabel"
                        Value="0.5" />
                            <Setter Property="Effect"
                        TargetName="iconImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                               Value="True" />
                                <Condition Property="IsPressed"
                               Value="False" />
                                <Condition Property="IsChecked"
                               Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                               Value="True" />
                                <Condition Property="IsPressed"
                               Value="False" />
                                <Condition Property="IsChecked"
                               Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.Background}" />
                            <Setter Property="BorderBrush"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.BorderBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed"
                     Value="True">
                            <Setter Property="BorderBrush"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background"
                        TargetName="border"
                        Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate-->
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <!--Setter Property="Height" Value="22" /-->
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <!--Setter Property="Height" Value="22" /-->
                <Setter Property="Width" Value="31" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:GalleryItem}" TargetType="{x:Type Fluent:GalleryItem}">
        <!--Setter Property="Template" Value="{DynamicResource GalleryItemControlTemplate}" /-->
        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:GalleryItem}">
                    <Grid Background="Transparent">
                        <!--Border x:Name="hoverBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.MouseOver}" />
                        <Border x:Name="selectedBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Selected}" /-->
                        <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" TextBlock.Foreground="{TemplateBinding Foreground}"/>
                        <!--Border x:Name="pressedBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Pressed}" /-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <!--TargetName="contentPresenter" -->
                        </Trigger>
                        <!--Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible" />
                        </Trigger-->
                        <!--Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="pressedBorder" Value="Visible" />
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:InRibbonGallery}" TargetType="{x:Type Fluent:InRibbonGallery}">
        <Setter Property="Focusable" Value="False" />
        <!--Setter Property="Template" Value="{DynamicResource InRibbonGalleryControlTemplate}" /-->
        <Setter Property="Margin" Value="2,3,3,0" />
        <Setter Property="ItemWidth" Value="110"/>
        <Setter Property="ItemHeight" Value="20"/>
        <Setter Property="ResizeMode" Value="Both"/>
        <!--Setter Property="MinWidth" Value="300"/-->
        <!--Setter Property="Background" Value="{DynamicResource TextBoxPrimaryBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextBoxForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxPrimaryBorderBrush}"/-->
        <!--Setter Property="Background" Value="{DynamicResource WindowToolbarBorderBrush}"/-->
        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ToolbarDarkBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:InRibbonGallery}">
                    <ControlTemplate.Resources>
                        <Style x:Key="InRibbonGalleryButton" TargetType="{x:Type Fluent:ToggleButton}">
                            <!--Setter Property="Template" Value="{DynamicResource InRibbonGalleryToggleButtonControlTemplate}" /-->
                            <!--Setter Property="Height" Value="68" />
                            <Setter Property="Width" Value="Auto" /-->
                            <!--Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                                        <Grid>
                                            <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,11,0" Opacity="0.5">
                                                <Border BorderThickness="1" CornerRadius="0,0,10,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                    <Border BorderThickness="0,1,0,2" CornerRadius="0,0,9,0" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                </Border>
                                            </Border>
                                            <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,11,0" Opacity="0">
                                                <Border BorderThickness="1" CornerRadius="0,0,10,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                    <Border BorderThickness="0,1,0,2" CornerRadius="0,0,9,0" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                </Border>
                                            </Border>
                                            <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" Width="7">
                                                <Rectangle HorizontalAlignment="Stretch" Height="1" Fill="{TemplateBinding Foreground}" Margin="0,0,0,1"/>
                                                <Path Data="M 0 0 L 5 0 L 2.5 3 Z" Fill="{TemplateBinding Foreground}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Center"/>
                                            </StackPanel>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                                <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                                <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.5"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="Size" Value="Large">
                                    <Setter Property="Height" Value="68" />
                                </Trigger>
                                <Trigger Property="Size" Value="Middle">
                                    <Setter Property="Height" Value="22" />
                                </Trigger>
                                <Trigger Property="Size" Value="Small">
                                    <Setter Property="Height" Value="22" />
                                    <Setter Property="Width" Value="31" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>

                        <Style x:Key="ScrollButtonStyle" TargetType="{x:Type RepeatButton}">
                            <Setter Property="HorizontalAlignment" Value="Right"/>
                            <Setter Property="Width" Value="13"/>
                            <Setter Property="Height" Value="20"/>
                            <Setter Property="Visibility" Value="{Binding ComputedVerticalScrollBarVisibility, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter Property="Focusable" Value="False"/>
                            <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                        <Grid>
                                            <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1" CornerRadius="0" Opacity="0.5">
                                                <Border BorderThickness="1" CornerRadius="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                    <Border BorderThickness="0,1,0,2" CornerRadius="0" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                </Border>
                                            </Border>
                                            <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1" CornerRadius="0" Opacity="0">
                                                <Border BorderThickness="1" CornerRadius="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                    <Border BorderThickness="0,1,0,2" CornerRadius="0" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                </Border>
                                            </Border>
                                            <ContentPresenter x:Name="contentPresenter" TextBlock.Foreground="{TemplateBinding Foreground}"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                                <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                                <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.5" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style TargetType="{x:Type ScrollViewer}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Width="{TemplateBinding ActualWidth}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" IsHitTestVisible="True" ClipToBounds="False" />
                                            <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top" Style="{DynamicResource ScrollButtonStyle}" Tag="0,11,0,0">
                                                <RepeatButton.Template>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Grid>
                                                            <Border x:Name="SelectedBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverPrimaryBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="0,11,0,0" Opacity="0.5">
                                                                <Border BorderThickness="1" CornerRadius="0,10,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                                    <Border BorderThickness="0,1,0,2" CornerRadius="0,9,0,0" Background="{DynamicResource ToolbarToggleButtonSelectedBackground}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="0,11,0,0" Opacity="0">
                                                                <Border BorderThickness="1" CornerRadius="0,10,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                                                    <Border BorderThickness="0,1,0,2" CornerRadius="0,9,0,0" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                                                                </Border>
                                                            </Border>
                                                            <ContentPresenter x:Name="contentPresenter" />
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                                <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                                <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonHoverForegroundBrush}" /-->
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" Value="0.5" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </RepeatButton.Template>
                                                <Path Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RepeatButton}}}" Stretch="Fill" StrokeThickness="0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="3" Height="5" Data="M 0 1 L 0.5 0 L 1 1 Z" />
                                                <!--Data="M0,0L1,1 1,-1z"-->
                                            </RepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Style="{DynamicResource ScrollButtonStyle}">
                                                <Path Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RepeatButton}}}" Stretch="Fill" StrokeThickness="0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="3" Height="5" Data="M 0 0 L 0.5 1 L 1 0 Z" />
                                                <!--Data="M1,0L0,1 0,-1z"-->
                                            </RepeatButton>
                                            <Rectangle x:Name="bottomSeparator" Height="1" VerticalAlignment="Bottom" Fill="{DynamicResource SeparatorHorizontalBackgroundBrush}"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <!--Trigger Property="ComputedHorizontalScrollBarVisibility" Value="Hidden">
                                            </Trigger-->
                                            <DataTrigger Binding="{Binding IsMinimized, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}}" Value="True">
                                                <Setter TargetName="bottomSeparator" Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_LayoutRoot">
                        <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}"-->
                        <!--Height="{TemplateBinding GalleryPanelContainerHeight}"-->
                        <Grid x:Name="Container">
                            <Border x:Name="border" Height="60" CornerRadius="11" ClipToBounds="True">
                                <Border.OpacityMask>
                                    <VisualBrush>
                                        <VisualBrush.Visual>
                                            <Border Background="Black" BorderBrush="Transparent" BorderThickness="0" CornerRadius="11" Width="{Binding ActualWidth, ElementName=ScrollViewer}" Height="60"/>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Border.OpacityMask>
                                <Grid>
                                    <Border CornerRadius="11" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" ClipToBounds="True" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <Border.Effect>
                                            <DropShadowEffect Color="Black" Direction="270" ShadowDepth="3" BlurRadius="10" Opacity="1" />
                                        </Border.Effect>
                                    </Border>
                                    <Rectangle Fill="{DynamicResource ToolbarDarkBackgroundBrush}" Opacity="0.5"/>
                                </Grid>
                            </Border>
                            <Grid OpacityMask="{Binding OpacityMask, ElementName=border}" Width="{TemplateBinding Width}" Height="{Binding Height, ElementName=border}">
                                <ScrollViewer x:Name="ScrollViewer" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible" Width="{TemplateBinding Width}">
                                    <!--ScrollViewer.Resources>
                                        <Style TargetType="{x:Type ScrollBar}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                        <StackPanel HorizontalAlignment="Right" Margin="0,-1,-1,0">
                                                            <RepeatButton x:Name="upButton" Width="15" Height="21" Command="ScrollBar.PageUpCommand" Margin="0,0,0,0">
                                                                <Path RenderOptions.EdgeMode="Aliased" Data="M0,0 L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" Width="5" Height="3" Stretch="Fill" />
                                                            </RepeatButton>
                                                            <RepeatButton x:Name="downButton" Width="15" Height="21" Command="ScrollBar.PageDownCommand" Margin="0,-1,0,0">
                                                                <Path RenderOptions.EdgeMode="Aliased" Data="M0,0 L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Width="5" Height="3" Stretch="Fill" />
                                                            </RepeatButton>
                                                        </StackPanel>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="ContextMenu" Value="{x:Null}" />
                                        </Style>
                                    </ScrollViewer.Resources-->

                                    <Grid>
                                        <ContentControl x:Name="PART_ContentPresenter" Focusable="False">
                                            <Fluent:GalleryPanel x:Name="PART_GalleryPanel" Width="{TemplateBinding Width}" ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}" IsItemsHost="True" Background="Transparent" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" Orientation="{TemplateBinding Orientation}" Filter="{TemplateBinding SelectedFilterGroups}" GroupBy="{TemplateBinding GroupBy}" GroupByAdvanced="{TemplateBinding GroupByAdvanced}" IsGrouped="False"/>
                                            <!--Background="{DynamicResource WhiteBrush}"-->
                                        </ContentControl>

                                        <Image x:Name="PART_FakeImage" Visibility="Collapsed" />
                                    </Grid>
                                </ScrollViewer>

                                <Fluent:ToggleButton IsDefinitive="False" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="13" Height="20" x:Name="PART_ExpandButton" Style="{DynamicResource InRibbonGalleryButton}" ClickMode="Press" CanAddToQuickAccessToolBar="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource = {RelativeSource TemplatedParent}}" />
                                <!--Margin="0,0,-1,-1"-->

                                <Popup x:Name="PART_Popup" Placement="Custom" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" PlacementTarget="{Binding ElementName=PART_LayoutRoot}" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                                    <!--Popup.Resources>
                                        <ResourceDictionary>
                                            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" />
                                        </ResourceDictionary>
                                    </Popup.Resources-->
                                    <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                        <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_LayoutRoot}" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
                                                <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                                                <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <Rectangle Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1" Height="Auto" Grid.RowSpan="2" Visibility="Visible" VerticalAlignment="Stretch" />
                                                    <Grid x:Name="PART_MenuPanel" MinWidth="{Binding MinWidth, ElementName=PART_DropDownBorder}" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*" />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" x:Name="layoutRoot">
                                                            <Grid Width="Auto">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="Auto" />
                                                                    <RowDefinition Height="*" />
                                                                </Grid.RowDefinitions>
                                                                <Border Grid.Row="0" x:Name="border_" BorderBrush="{x:Null}" BorderThickness="0" Height="13" Background="{DynamicResource Fluent.Ribbon.Brushes.Gallery.Header.Background}">
                                                                    <Fluent:DropDownButton x:Name="PART_FilterDropDownButton" Style="{DynamicResource GalleryDropDownButtonStyle}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top" Header="{TemplateBinding SelectedFilterTitle}" />
                                                                </Border>
                                                                <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" MinHeight="{Binding ActualHeight, ElementName=PART_LayoutRoot}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0,0,0,1" Margin="1">
                                                                    <ContentControl x:Name="PART_PopupContentPresenter" Content="{x:Null}" />
                                                                </ScrollViewer>
                                                            </Grid>
                                                        </Border>
                                                        <ContentPresenter x:Name="menuPresenter" ContentSource="Menu" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="None" VerticalAlignment="Top" />
                                                    </Grid>
                                                    <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" Grid.Row="2" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}">
                                                        <Grid>
                                                            <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                            <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                        </Grid>
                                                    </Border>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Grid>


                        <Fluent:ToggleButton IsDefinitive="False" Margin="0,0,0,0" Visibility="Collapsed" x:Name="PART_DropDownButton" Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Path=LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" Header="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" Size="{Binding Path=Size, RelativeSource={RelativeSource TemplatedParent}}" SizeDefinition="{Binding Path=SizeDefinition, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Top" ClickMode="Press" CanAddToQuickAccessToolBar="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasFilter" Value="False">
                            <Setter Property="Visibility" TargetName="border_" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsEnabled" TargetName="PART_DropDownButton" Value="False" />
                            <Setter Property="IsEnabled" TargetName="PART_ExpandButton" Value="False" />
                        </Trigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" TargetName="Container" Value="Collapsed" />
                            <Setter Property="Placement" TargetName="PART_Popup" Value="Bottom" />
                            <Setter Property="Visibility" TargetName="PART_DropDownButton" Value="Visible" />
                            <Setter Property="VerticalAlignment" TargetName="PART_LayoutRoot" Value="Top" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_LayoutRoot" Value="Left" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Menu" Value="{x:Null}">
                            <Setter Property="BorderThickness" TargetName="PART_ScrollViewer" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsCollapsed" Value="True">
                <Setter Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="MinWidth" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LayoutGalleryStyle" TargetType="{x:Type Fluent:InRibbonGallery}" BasedOn="{StaticResource {x:Type Fluent:InRibbonGallery}}">
        <Setter Property="Size" Value="Large"/>
        <Setter Property="IsCollapsed" Value="False"/>
        <Setter Property="Width" Value="237" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='ge1000', Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="Width" Value="347" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='l605', Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter Property="IsCollapsed" Value="True" />
                <Setter Property="Width" Value="Auto" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ShareWithGalleryStyle" TargetType="{x:Type Fluent:InRibbonGallery}" BasedOn="{StaticResource {x:Type Fluent:InRibbonGallery}}">
        <Setter Property="MinWidth" Value="130" />
        <Setter Property="IsCollapsed" Value="False"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='g375', Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="False">
                <Setter Property="IsCollapsed" Value="True" />
                <Setter Property="Width" Value="Auto" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:CheckBox}" TargetType="{x:Type Fluent:CheckBox}">
        <Setter Property="ToolTipService.ShowDuration" Value="30000" />
        <!--Setter Property="Template" Value="{DynamicResource CheckBoxControlTemplate}" /-->
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ToolbarButtonForegroundBrush}"/>
        <!-- Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.BorderBrush}" />
        <Setter Property="Margin" Value="2,2,2,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:CheckBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="16" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                            <Border x:Name="border" Width="13" Height="13" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <Path x:Name="CheckIcon" Width="7.5" Height="6.9" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883" Fluent:FrameworkHelper.UseLayoutRounding="False" Opacity="0" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" StrokeThickness="1.5" />
                                    <Rectangle x:Name="IndeterminateIcon" Width="7" Height="7" Opacity="0" Fill="{DynamicResource GrayBrush2}" />
                                    <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}" Opacity="0" RadiusX="1" RadiusY="1" />
                                </Grid>
                            </Border>
                        </Grid>
                        <ContentControl Grid.Column="1" IsTabStop="False" Margin="2,0,0,0" Foreground="{TemplateBinding Foreground}">
                            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" TextBlock.Foreground="{TemplateBinding Foreground}"/>
                        </ContentControl>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                            <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                            <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                     Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                            <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                            <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".55" />
                            <Setter TargetName="DisabledVisualElement" Property="Opacity" Value=".55" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter TargetName="CheckIcon" Property="LayoutTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Ribbon Control Styles-->


    <!--#region Ribbon ApplicationMenu-related Styles-->

    <!-- Second level-->

    <!--Menu Item Template-->
    <ControlTemplate x:Key="ApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" />
            </ResourceDictionary>
        </ControlTemplate.Resources>
        <Grid Width="Auto" MinHeight="53" Height="Auto" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Grid.Column="0" Grid.ColumnSpan="3" />
            <TextBlock x:Name="textBlock" FontWeight="Bold" Text="{TemplateBinding Header}" Width="Auto" Height="Auto" Margin="9,5,3,3" VerticalAlignment="Top" Grid.Column="1" TextTrimming="CharacterEllipsis" />
            <TextBlock x:Name="textBlockDesc" Text="{TemplateBinding Description}" Width="Auto" HorizontalAlignment="Stretch" Height="Auto" Margin="9,22,3,3" VerticalAlignment="Top" Grid.Column="1" TextWrapping="Wrap" />
            <Rectangle x:Name="rectangle" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="40" Height="40" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
            <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,4,0,0" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" SnapsToDevicePixels="True" />
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Top" Margin="3,4,2,2" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" Width="32" SnapsToDevicePixels="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="image" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                <Setter Property="Opacity" TargetName="image" Value="0.5" />
                <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect" TargetName="image">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Header Menu Item Template-->
    <ControlTemplate x:Key="HeaderApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" />
            </ResourceDictionary>
        </ControlTemplate.Resources>
        <Grid Width="Auto" MinHeight="53" Height="Auto" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Grid.Column="0" Grid.ColumnSpan="3" />
            <TextBlock x:Name="textBlock" FontWeight="Bold" Text="{TemplateBinding Header}" Width="Auto" Height="Auto" Margin="9,5,3,3" VerticalAlignment="Top" Grid.Column="1" TextTrimming="CharacterEllipsis" />
            <TextBlock x:Name="textBlockDesc" Text="{TemplateBinding Description}" Width="Auto" HorizontalAlignment="Stretch" Height="Auto" Margin="9,22,3,3" VerticalAlignment="Top" Grid.Column="1" TextWrapping="Wrap" />
            <Rectangle x:Name="rectangle" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="40" Height="40" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
            <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,4,0,0" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" SnapsToDevicePixels="True" />
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Top" Margin="3,4,2,2" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" Width="32" SnapsToDevicePixels="True" />
            <Path x:Name="path" Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Right" Margin="1,0,9,0" Width="4" Data="M0,0L1,1 0,2z" Height="7" Grid.Column="3" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" />
            <Popup x:Name="PART_Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Margin="0,0,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="4" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="4" />
                    </Grid.ColumnDefinitions>
                    <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Width="4" Height="4" Grid.Row="1" Grid.Column="1" StrokeThickness="0" Margin="-1,-1,0,0">
                        <Rectangle.Fill>
                            <RadialGradientBrush RadiusX="0.984" Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,3,0,0" VerticalAlignment="Top" Width="4" Height="4" Grid.Column="1" Grid.Row="0">
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="3,-1,0,0" VerticalAlignment="Top" Width="4" Height="4" Grid.Column="0" Grid.Row="1">
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Stretch" Margin="7,-1,1,0" VerticalAlignment="Top" Width="Auto" Height="4" Grid.Column="0" Grid.Row="1">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,7,0,1" VerticalAlignment="Stretch" Width="4" Height="Auto" Grid.Column="1" Grid.Row="0">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Border x:Name="DropDownBorder" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="2,2,1,1" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Path Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1" Height="Auto" Data="M0,0L0,1" Grid.RowSpan="2" Visibility="Visible" />
                                <ScrollViewer VerticalScrollBarVisibility="Auto" x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True">
                                    <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="image" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                <Setter Property="Opacity" TargetName="image" Value="0.5" />
                <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect" TargetName="image">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Splited Menu Item Template-->
    <ControlTemplate x:Key="SplitedApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" />
            </ResourceDictionary>
        </ControlTemplate.Resources>
        <Grid Width="Auto" MinHeight="53" Height="Auto" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle Grid.Column="2" HorizontalAlignment="Right" Margin="0,4,23,4" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Width="1" />
            <Grid  HorizontalAlignment="Stretch" Margin="0" Width="Auto" Grid.Column="0" Grid.ColumnSpan="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.905*" />
                    <ColumnDefinition x:Name="columnDefinition" Width="23" />
                </Grid.ColumnDefinitions>
                <Border x:Name="PART_ButtonBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Margin="0,0,-1,0" />
                <Border x:Name="Submenu_Border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Grid.Column="1" />
            </Grid>
            <TextBlock x:Name="textBlock" FontWeight="Bold" Text="{TemplateBinding Header}" Width="Auto" Height="Auto" Margin="9,5,3,3" VerticalAlignment="Top" Grid.Column="1" TextTrimming="CharacterEllipsis" />
            <TextBlock x:Name="textBlockDesc" Text="{TemplateBinding Description}" Width="Auto" HorizontalAlignment="Stretch" Height="Auto" Margin="9,22,3,3" VerticalAlignment="Top" Grid.Column="1" TextWrapping="Wrap" />
            <Rectangle x:Name="rectangle" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="40" Height="40" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
            <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,4,0,0" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" SnapsToDevicePixels="True" />
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Top" Margin="3,4,2,2" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" Width="32" SnapsToDevicePixels="True" />
            <Path x:Name="path" Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Right" Margin="1,0,9,0" Width="4" Data="M0,0L1,1 0,2z" Height="7" Grid.Column="3" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" />
            <Popup x:Name="PART_Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Stretch" Grid.ColumnSpan="2">
                <Grid x:Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Stretch">
                    <Border x:Name="DropDownBorder" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"  CornerRadius="1" />
                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Path Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1" Height="Auto" Data="M0,0L0,1" Grid.RowSpan="2" Visibility="Visible" />
                                <ScrollViewer Margin="1" x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" SnapsToDevicePixels="True">
                                    <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="image" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="PART_ButtonBorder" Value="Visible" />
                <Setter Property="Visibility" TargetName="Submenu_Border" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter Property="Background" TargetName="Submenu_Border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                <Setter Property="Opacity" TargetName="image" Value="0.5" />
                <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect" TargetName="image">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Menu Item Style-->
    <Style x:Key="ApplicationMenuSecondLevelStyle" TargetType="{x:Type Fluent:MenuItem}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
        <Setter Property="ResizeMode" Value="None" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template" Value="{DynamicResource ApplicationMenuSecondLevelItemTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource SplitedApplicationMenuSecondLevelItemTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource HeaderApplicationMenuSecondLevelItemTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- First Level-->
    <!--Menu Item Template-->
    <ControlTemplate x:Key="ApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" />
            </ResourceDictionary>
        </ControlTemplate.Resources>
        <Grid Width="Auto" Height="44" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Grid.Column="0" Grid.ColumnSpan="3" />
            <TextBlock x:Name="textBlock" Text="{TemplateBinding Header}" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Grid.Column="1" TextTrimming="CharacterEllipsis" />
            <TextBlock x:Name="textBlockDesc" Text="{TemplateBinding Description}" Width="Auto" HorizontalAlignment="Right" Height="Auto" Margin="0,3,3,3" VerticalAlignment="Center" Grid.Column="2" TextWrapping="NoWrap" />
            <Rectangle x:Name="rectangle" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="40" Height="40" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
            <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" SnapsToDevicePixels="True" />
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" Width="32" Margin="3,2,2,2" SnapsToDevicePixels="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="image" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                <Setter Property="Opacity" TargetName="image" Value="0.5" />
                <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect" TargetName="image">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Header Menu Item Template-->
    <ControlTemplate x:Key="HeaderApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" />
                <Style x:Key="{x:Type Fluent:MenuItem}" TargetType="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource ApplicationMenuSecondLevelStyle}" />
            </ResourceDictionary>
        </ControlTemplate.Resources>
        <Grid Width="Auto" Height="44" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Grid.Column="0" Grid.ColumnSpan="3" />
            <TextBlock x:Name="textBlock" Text="{TemplateBinding Header}" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Grid.Column="1" TextTrimming="CharacterEllipsis" />
            <Rectangle x:Name="rectangle" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="40" Height="40" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
            <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" SnapsToDevicePixels="True" />
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" Width="32" Margin="3,2,2,2" SnapsToDevicePixels="True" />
            <Path x:Name="path" Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Right" Margin="1,0,9,0" Width="4" Data="M0,0L1,1 0,2z" Height="7" Grid.Column="3" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" />
            <Popup x:Name="PART_Popup" Placement="Custom" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" PlacementTarget="{Binding Converter={StaticResource ApplicationMenuRightScrollViewerExtractorConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Margin="0,0,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2" Width="{Binding RightPaneWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}">
                <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="4" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="4" />
                    </Grid.ColumnDefinitions>
                    <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Width="4" Height="4" Grid.Row="1" Grid.Column="1" StrokeThickness="0" Margin="-1,-1,0,0">
                        <Rectangle.Fill>
                            <RadialGradientBrush RadiusX="0.984" Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,3,0,0" VerticalAlignment="Top" Width="4" Height="4" Grid.Column="1" Grid.Row="0">
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="3,-1,0,0" VerticalAlignment="Top" Width="4" Height="4" Grid.Column="0" Grid.Row="1">
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Stretch" Margin="7,-1,1,0" VerticalAlignment="Top" Width="Auto" Height="4" Grid.Column="0" Grid.Row="1">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,7,0,1" VerticalAlignment="Stretch" Width="4" Height="Auto" Grid.Column="1" Grid.Row="0">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Border x:Name="DropDownBorder" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="2,2,1,1" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True">
                                    <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="image" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                <Setter Property="Opacity" TargetName="image" Value="0.5" />
                <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect" TargetName="image">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Splited Menu Item Template-->
    <ControlTemplate x:Key="SplitedApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
        <ControlTemplate.Resources>
            <ResourceDictionary>
                <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" />
                <Style TargetType="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource ApplicationMenuSecondLevelStyle}" />
            </ResourceDictionary>
        </ControlTemplate.Resources>
        <Grid Width="Auto" Height="44" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="44" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle Grid.Column="2" HorizontalAlignment="Right" Margin="0,4,23,4" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Width="1" />
            <Grid  HorizontalAlignment="Stretch" Margin="0" Width="Auto" Grid.Column="0" Grid.ColumnSpan="3">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.905*" />
                    <ColumnDefinition x:Name="columnDefinition" Width="23" />
                </Grid.ColumnDefinitions>
                <Border x:Name="PART_ButtonBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Margin="0,0,-1,0" />
                <Border x:Name="Submenu_Border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Grid.Column="1" />
            </Grid>
            <TextBlock x:Name="textBlock" Text="{TemplateBinding Header}" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Grid.Column="1" TextTrimming="CharacterEllipsis" />
            <Rectangle x:Name="rectangle" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Grid.ColumnSpan="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="40" Height="40" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
            <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" SnapsToDevicePixels="True" />
            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='32,32'}" Width="32" Margin="3,2,2,2" SnapsToDevicePixels="True" />
            <Path x:Name="path" Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Right" Margin="1,0,9,0" Width="4" Data="M0,0L1,1 0,2z" Height="7" Grid.Column="3" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" />
            <Popup x:Name="PART_Popup" Placement="Custom" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" PlacementTarget="{Binding Converter={StaticResource ApplicationMenuRightScrollViewerExtractorConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Margin="0,0,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2" Width="{Binding RightPaneWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" MinHeight="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}">
                <Grid x:Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="4" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="4" />
                    </Grid.ColumnDefinitions>
                    <Rectangle HorizontalAlignment="Left" VerticalAlignment="Top" Width="4" Height="4" Grid.Row="1" Grid.Column="1" StrokeThickness="0" Margin="-1,-1,0,0">
                        <Rectangle.Fill>
                            <RadialGradientBrush RadiusX="0.984" Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,3,0,0" VerticalAlignment="Top" Width="4" Height="4" Grid.Column="1" Grid.Row="0">
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="3,-1,0,0" VerticalAlignment="Top" Width="4" Height="4" Grid.Column="0" Grid.Row="1">
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Stretch" Margin="7,-1,1,0" VerticalAlignment="Top" Width="Auto" Height="4" Grid.Column="0" Grid.Row="1">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle StrokeThickness="0" HorizontalAlignment="Left" Margin="-1,7,0,1" VerticalAlignment="Stretch" Width="4" Height="Auto" Grid.Column="1" Grid.Row="0">
                        <Rectangle.Fill>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#3F000000" Offset="0" />
                                <GradientStop Color="Transparent" Offset="1" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Border x:Name="DropDownBorder" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ScrollViewer Margin="1" x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" SnapsToDevicePixels="True">
                                    <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>

                            </Grid>
                        </Grid>
                    </Border>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="image" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="PART_ButtonBorder" Value="Visible" />
                <Setter Property="Visibility" TargetName="Submenu_Border" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="IsSubmenuOpen" Value="True">
                <Setter Property="Background" TargetName="Submenu_Border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                <Setter Property="Opacity" TargetName="image" Value="0.5" />
                <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                <Setter Property="Effect" TargetName="iconImage">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect" TargetName="image">
                    <Setter.Value>
                        <Fluent:GrayscaleEffect />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--Menu Item Style-->
    <Style x:Key="ApplicationMenuItemStyle" TargetType="{x:Type Fluent:MenuItem}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
        <Setter Property="ResizeMode" Value="None" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template" Value="{DynamicResource ApplicationMenuItemTemplate}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource SplitedApplicationMenuItemTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource HeaderApplicationMenuItemTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Color x:Key="ApplicationMenuPopupTopColor">#FFBDD7EF</Color>
    <Color x:Key="ApplicationMenuPopupBottomColor">#FFB5C7E7</Color>

    <Style x:Key="{x:Type Fluent:ApplicationMenu}" TargetType="{x:Type Fluent:ApplicationMenu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}" />
        <Setter Property="Width" Value="58"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Panel.ZIndex" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:ApplicationMenu}">
                    <ControlTemplate.Resources>
                        <QuinticEase x:Key="ScaleEase" EasingMode="EaseOut"/>
                        <Style x:Key="{x:Type Fluent:MenuItem}" TargetType="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource ApplicationMenuItemStyle}"/>
                    </ControlTemplate.Resources>
                    <Grid Margin="0,1,0,0">
                        <ContentControl x:Name="buttonContent" Width="{Binding ActualWidth, ElementName=PART_ButtonBorder}" Height="{Binding ActualHeight, ElementName=PART_ButtonBorder}" Margin="0,0,0,0">
                            <Grid>
                                <!--Border x:Name="CircleBackOuterBorder" CornerRadius="0,0,24,0" Margin="1,24,0,0" Opacity="0">
                                    <Border.Background>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                                                    <Rectangle Fill="{DynamicResource WindowToolbarBorderBrush}" Width="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Height="{TemplateBinding Height}"/>
                                                </Grid>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Border.Background>
                                    <Border x:Name="CircleBackInnerBorder" CornerRadius="0,0,23,0" Margin="-1,-1,0,0">
                                        <Border.Background>
                                            <VisualBrush>
                                                <VisualBrush.Visual>
                                                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                                                        <Rectangle x:Name="FillRectangle" Fill="{DynamicResource ActiveTitlebarBackgroundBrush}" Width="{Binding Width, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Height="{TemplateBinding Height}"/>
                                                    </Grid>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Border.Background>
                                    </Border>
                                </Border-->
                                <Grid x:Name="ButtonGrid">
                                    <!--Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-3">
                                        <Ellipse.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Offset="0" Color="#20000000" />
                                                    <GradientStop Offset="1" Color="#60FFFFFF" />
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse-->
                                    <Grid ClipToBounds="True">
                                        <ToggleButton x:Name="ToggleButton" IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=TwoWay}" IsEnabled="{TemplateBinding IsEnabled}" Margin="0,0,0,-2" Padding="0" IsThreeState="False">
                                            <!--Style="{DynamicResource RoundToggleButtonStyle}" -->
                                            <ToggleButton.Background>
                                                <VisualBrush>
                                                    <VisualBrush.Visual>
                                                        <Grid MinWidth="10" MinHeight="10">
                                                            <Grid.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <LinearGradientBrush.GradientStops>
                                                                        <GradientStop Offset="0" Color="#FFAAC8EB"/>
                                                                        <GradientStop Offset="0.5" Color="#FF79A0CF"/>
                                                                        <GradientStop Offset="0.5" Color="#FF3671B9"/>
                                                                        <GradientStop Offset="1" Color="#FF7ECCFF"/>
                                                                    </LinearGradientBrush.GradientStops>
                                                                </LinearGradientBrush>
                                                            </Grid.Background>
                                                            <Rectangle>
                                                                <Rectangle.Fill>
                                                                    <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1" RadiusY="0.25">
                                                                        <RadialGradientBrush.GradientStops>
                                                                            <GradientStop Offset="0" Color="#FF99EBFD"/>
                                                                            <GradientStop Offset="1" Color="#0099EBFD"/>
                                                                        </RadialGradientBrush.GradientStops>
                                                                    </RadialGradientBrush>
                                                                </Rectangle.Fill>
                                                            </Rectangle>
                                                        </Grid>
                                                    </VisualBrush.Visual>
                                                </VisualBrush>
                                            </ToggleButton.Background>
                                            <Grid x:Name="LabelTextBlock" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" UseLayoutRounding="True" SnapsToDevicePixels="True">
                                                <!--Path Data="M 0 0 L 9 0 L 12 3 L 12 16 L 0 16 Z" StrokeThickness="1" Fill="{DynamicResource IconPathFillBrush}" Stroke="{DynamicResource IconPathStrokeBrush}"/-->
                                                <!--Path Data="M 0 0 L 0 4 L 4 4 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="1" Fill="{DynamicResource IconPathFillBrush}" Stroke="{DynamicResource IconPathStrokeBrush}"/-->
                                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Height="17">
                                                    <StackPanel.Effect>
                                                        <DropShadowEffect Color="Black" Direction="270" ShadowDepth="0.5" BlurRadius="2" Opacity="0.5" />
                                                    </StackPanel.Effect>
                                                    <Border Width="19" Margin="0,0,3,0">
                                                        <!--BorderBrush="#40000000" BorderThickness="1" CornerRadius="1"-->
                                                        <DockPanel>
                                                            <Border BorderThickness="1,1,0,1" Width="6">
                                                                <Border.BorderBrush>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <LinearGradientBrush.GradientStops>
                                                                            <GradientStop Offset="0" Color="#FFFAFCFE"/>
                                                                            <GradientStop Offset="1" Color="#FFD3D4D4"/>
                                                                        </LinearGradientBrush.GradientStops>
                                                                    </LinearGradientBrush>
                                                                </Border.BorderBrush>
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <LinearGradientBrush.GradientStops>
                                                                            <GradientStop Offset="0" Color="#FFF2F2F2"/>
                                                                            <GradientStop Offset="1" Color="#FFB5B5B5"/>
                                                                        </LinearGradientBrush.GradientStops>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                            </Border>
                                                            <Border BorderBrush="White" BorderThickness="1">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <LinearGradientBrush.GradientStops>
                                                                            <GradientStop Offset="0" Color="#FFF2F2F2"/>
                                                                            <GradientStop Offset="1" Color="#FFCBCECD"/>
                                                                        </LinearGradientBrush.GradientStops>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                            </Border>
                                                        </DockPanel>
                                                    </Border>
                                                    <Path Data="M 0 0 L 4 5 L 8 0 Z" VerticalAlignment="Center">
                                                        <!--Stroke="#40000000"-->
                                                        <Path.Fill>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <LinearGradientBrush.GradientStops>
                                                                    <GradientStop Offset="0" Color="#FFF2F2F2"/>
                                                                    <GradientStop Offset="1" Color="#FFCBCECD"/>
                                                                </LinearGradientBrush.GradientStops>
                                                            </LinearGradientBrush>
                                                        </Path.Fill>
                                                    </Path>
                                                </StackPanel>
                                            </Grid>
                                        </ToggleButton>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </ContentControl>
                        <Popup x:Name="PART_Popup" Placement="Custom" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" PlacementTarget="{Binding ElementName=buttonContent}" MaxHeight="{TemplateBinding MaxDropDownHeight}" AllowsTransparency="True" Focusable="False" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2" VerticalOffset="15">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="20,5,20,20" VerticalAlignment="Stretch">
                                <Grid.RenderTransform>
                                    <ScaleTransform x:Name="MenuPopupRootScaleTransform" ScaleX="0" ScaleY="0"/>
                                </Grid.RenderTransform>
                                <Grid x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <Grid.Effect>
                                            <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                                        </Grid.Effect>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="50"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="50"/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Rectangle Grid.Column="0" Grid.Row="0" Margin="5,5,0,0" IsHitTestVisible="False">
                                            <Rectangle.Fill>
                                                <RadialGradientBrush Center="0,0" GradientOrigin="0,0" RadiusX="1" RadiusY="1">
                                                    <GradientStop Offset="0.975" Color="Transparent"/>
                                                    <GradientStop Offset="1" Color="{DynamicResource ApplicationMenuPopupTopColor}"/>
                                                </RadialGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Border BorderBrush="Transparent" BorderThickness="0" CornerRadius="5,10,0,0" Grid.Column="1" Grid.Row="0">
                                            <Border.Background>
                                                <SolidColorBrush Color="{DynamicResource ApplicationMenuPopupTopColor}"/>
                                            </Border.Background>
                                        </Border>
                                        <Border BorderBrush="Transparent" BorderThickness="0" CornerRadius="5,0,0,10" Grid.Column="0" Grid.Row="1">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="{DynamicResource ApplicationMenuPopupTopColor}"/>
                                                        <GradientStop Offset="1" Color="{DynamicResource ApplicationMenuPopupBottomColor}"/>
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>
                                        <Border BorderBrush="Transparent" BorderThickness="0" CornerRadius="0,0,10,0" Grid.Column="1" Grid.Row="1">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="{DynamicResource ApplicationMenuPopupTopColor}"/>
                                                        <GradientStop Offset="1" Color="{DynamicResource ApplicationMenuPopupBottomColor}"/>
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>
                                    </Grid>
                                    <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" MinHeight="17" />
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" MinWidth="100" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollViewer Grid.Row="0" Grid.Column="0" IsTabStop="False" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Hidden" Margin="0,50,0,0">
                                                <!--Style="{DynamicResource MenuScrollViewer}" -->
                                                <StackPanel Orientation="Vertical" ScrollViewer.VerticalScrollBarVisibility="Auto" x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                            </ScrollViewer>
                                            <!--Border Grid.Row="0" Grid.Column="1" BorderThickness="1,0,0,0" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Width="{TemplateBinding RightPaneWidth}"-->
                                            <Border Grid.Row="0" Grid.RowSpan="2" Grid.Column="1" BorderThickness="1" CornerRadius="6" Width="{TemplateBinding RightPaneWidth}" VerticalAlignment="Stretch" Margin="0,10,10,10">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStop Offset="0" Color="#40FFFFFF"/>
                                                            <GradientStop Offset="1" Color="#60FFFFFF"/>
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                                <Border.BorderBrush>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStop Offset="0" Color="#C0FFFFFF"/>
                                                            <GradientStop Offset="0.5" Color="Transparent"/>
                                                            <GradientStop Offset="1" Color="#C0FFFFFF"/>
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Border.BorderBrush>
                                                <ScrollViewer x:Name="PART_ScrollViewer" IsTabStop="False" Margin="1" SnapsToDevicePixels="True" VerticalAlignment="Stretch" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
                                                    <!--Style="{DynamicResource MenuScrollViewer}" -->
                                                    <ContentPresenter ContentSource="RightPaneContent" x:Name="PART_RightContentPresenter" />
                                                </ScrollViewer>
                                            </Border>
                                            <Border Grid.Row="1" Grid.Column="0">
                                                <ContentPresenter ContentSource="FooterPaneContent" />
                                            </Border>
                                        </Grid>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DropDown" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="DropDown" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="DropDown" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_Popup" Storyboard.TargetProperty="IsOpen">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames Storyboard.TargetName="PART_Popup" Storyboard.TargetProperty="IsOpen">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0.25" Value="False"/>
                                        </BooleanAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="DropDown" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.75" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="DropDown" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.75" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="DropDown" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25" EasingFunction="{StaticResource ScaleEase}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}" Value="False">
                            <Setter TargetName="FillRectangle" Property="Fill" Value="{DynamicResource InactiveTitlebarBackgroundBrush}"/>
                        </DataTrigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Ribbon ApplicationMenu-related Styles-->


    <!--#region Ribbon Icons-->
    <DropShadowEffect x:Key="IconOuterShadow" Color="Black" Direction="270" ShadowDepth="3" BlurRadius="12.5" Opacity="0.375" />
    <DropShadowEffect x:Key="IconStrongOuterShadow" Color="Black" Direction="270" ShadowDepth="3" BlurRadius="12.5" Opacity="1" />

    <DropShadowEffect x:Key="IconInnerShadow" Color="#FF5AA8F5" Direction="225" ShadowDepth="2" BlurRadius="7" Opacity="1" />
    <DropShadowEffect x:Key="IconAltInnerShadow" Color="#FF5AA8F5" Direction="135" ShadowDepth="3" BlurRadius="7" Opacity="1"/>

    <LinearGradientBrush x:Key="IconPrimaryFillBrush" StartPoint="0,1" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FF87BAE8"/>
            <GradientStop Offset="1" Color="#FF9DD0FE"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="IconPrimaryDarkFillBrush" StartPoint="0,1" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FF5588B6"/>
            <GradientStop Offset="1" Color="#FF6B9ECC"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <RadialGradientBrush x:Key="IconSecondaryFillBrush" GradientOrigin="0.5,0.5" Center="0.5,0.5">
        <RadialGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FFACD4FF"/>
            <GradientStop Offset="1" Color="#FFFAFBFF"/>
        </RadialGradientBrush.GradientStops>
    </RadialGradientBrush>

    <LinearGradientBrush x:Key="IconTertiaryFillBrush" StartPoint="0,1" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FFA0D3FF"/>
            <GradientStop Offset="1" Color="#FFB6E9FF"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="IconForegroundBrush" StartPoint="0,1" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FF002452"/>
            <GradientStop Offset="1" Color="#FF073A68"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Grid x:Key="CopyButtonLargeIcon" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="30" HorizontalAlignment="Center" VerticalAlignment="Stretch">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
        </Grid>
    </Grid>

    <Grid x:Key="PasteButtonLargeIcon" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="24" Height="28" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border Background="{DynamicResource IconPrimaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryDarkFillBrush}" BorderThickness="3" CornerRadius="1" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 6 L 7 0 L 14 6 Z" HorizontalAlignment="Center" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="0,-6" Effect="{DynamicResource IconAltInnerShadow}"/>
            </Border>
        </Grid>
    </Grid>

    <Grid x:Key="CutButtonIcon" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{StaticResource IconStrongOuterShadow}">
        <Canvas Effect="{StaticResource IconStrongOuterShadow}">
            <Canvas.RenderTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="3.875" ScaleY="{Binding ScaleX,RelativeSource={RelativeSource Mode=Self}}"/>
                    <TranslateTransform X="0" Y="0"/>
                </TransformGroup>
            </Canvas.RenderTransform>
            <Path StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Fill="{StaticResource IconPrimaryDarkFillBrush}" Width="16" Height="16">
                <Path.Data>
                    <PathGeometry Figures="m 1.4708861 -0.00001 c 0 0 -0.2464724 0.49366 -0.1644 0.69142 l 0.670614 1.61589 c 0 0 0.189067 0.85221 0.395972 1.26078 0.288377 0.56945 1.124315 0.96138 1.1649 0.37407 0.07374 -1.06707 -1.184756 -1.78836 -1.184756 -1.78836 z m 0.960677 2.58553 c 0.59033 0.16408 1.17456 1.4012 0.751955 1.3918 -0.531087 -0.0118 -1.057042 -1.47661 -0.751955 -1.3918 z" FillRule="NonZero"/>
                </Path.Data>
            </Path>
            <Path StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Fill="{StaticResource IconPrimaryFillBrush}" Width="16" Height="16">
                <Path.Data>
                    <PathGeometry Figures="m 2.7622621 -0.00001 c 0 0 0.2464724 0.49366 0.1644 0.69142 l -0.670613 1.61589 c 0 0 -0.189067 0.85221 -0.395973 1.26078 -0.288377 0.56945 -1.12431503 0.96138 -1.16490003 0.37407 -0.07374 -1.06707 1.18475603 -1.78836 1.18475603 -1.78836 z m -0.960677 2.58553 c -0.59033 0.16408 -1.17456003 1.4012 -0.751955 1.3918 0.531088 -0.0118 1.057042 -1.47661 0.751955 -1.3918 z" FillRule="NonZero"/>
                </Path.Data>
            </Path>
        </Canvas>
    </Grid>

    <Grid x:Key="CopyPathButtonIcon" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Border Height="12" VerticalAlignment="Center" Background="{StaticResource IconPrimaryFillBrush}" BorderThickness="0" CornerRadius="1" Effect="{StaticResource IconStrongOuterShadow}">
            <TextBlock Foreground="{DynamicResource IconForegroundBrush}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Stretch" FontSize="7" Text="\\..."/>
        </Border>
    </Grid>

    <Grid x:Key="PasteShortcutButtonIcon" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#01000000">
        <Border Width="14" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="{StaticResource IconPrimaryFillBrush}" BorderBrush="{StaticResource IconPrimaryDarkFillBrush}" BorderThickness="2" CornerRadius="1" Effect="{StaticResource IconStrongOuterShadow}">
            <Grid>
                <Path Data="M 0 2 L 2 0 L 4 2 Z" HorizontalAlignment="Center" VerticalAlignment="Top" StrokeThickness="0" Fill="{StaticResource IconSecondaryFillBrush}" Margin="0,-2" Effect="{StaticResource IconAltInnerShadow}"/>
                <Canvas Width="8" Height="8" Background="{StaticResource IconForegroundBrush}" Margin="-2,0,1,0">
                    <Canvas.OpacityMask>
                        <VisualBrush>
                            <VisualBrush.Visual>
                                <Grid Width="8" Height="8" Background="#01000000">
                                    <Path Data="M 0 0 L 4 0 L 4 4 Z" Fill="Black" Stroke="Black" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                                    <Path Data="M 8 0 L 4 4 L 4 8 L 4 4 Z" Fill="Black" Stroke="Black" StrokeThickness="1"/>
                                </Grid>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Canvas.OpacityMask>
                </Canvas>
            </Grid>
        </Border>
    </Grid>

    <Grid x:Key="MoveToButtonLargeIcon" Width="30" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path Data="M 0 0 L 20 4 L 20 18 L 22 20 L 22 28 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
            <Path Data="M 0 0 L 7 5 L 8 32 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
        <Path Data="M 0 8 L 8 0 L 8 5 L 16 5 L 16 11 L 8 11 L 8 16 Z" Fill="{DynamicResource IconSecondaryFillBrush}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Center" Effect="{DynamicResource IconInnerShadow}"/>
    </Grid>

    <Grid x:Key="CopyToButtonLargeIcon" Width="30" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path Data="M 0 0 L 20 4 L 20 18 L 22 20 L 22 28 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
            <Path Data="M 0 0 L 7 5 L 8 32 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
        <Grid Width="30" Height="32" HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="1,0.5" Effect="{DynamicResource IconInnerShadow}">
            <Grid.RenderTransform>
                <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
            </Grid.RenderTransform>
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconStrongOuterShadow}"/>
            </Grid>
            <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom" Effect="{DynamicResource IconInnerShadow}">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconStrongOuterShadow}"/>
            </Grid>
        </Grid>
    </Grid>

    <Grid x:Key="DeleteButtonLargeIcon" Width="28" Height="28" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{DynamicResource IconPrimaryFillBrush}" Effect="{DynamicResource IconOuterShadow}">
        <Grid.OpacityMask>
            <VisualBrush>
                <VisualBrush.Visual>
                    <Grid Background="#01000000" Width="32" Height="32">
                        <Canvas>
                            <Canvas.Background>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Path Data="m 8.2035769 289.44032 c -2.0376073 1.04979 -5.1697653 3.45606 -5.6932662 5.40979 -0.1759565 0.65668 -0.061322 1.36838 -0.8976935 1.44103 -0.65430945 0.0568 -1.36836153 -0.74026 -0.63783485 -1.93713 1.73350825 -2.84013 5.72428765 -5.68705 7.22879455 -4.91369 z" Fill="Black" Stroke="Transparent" StrokeThickness="0"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Canvas.Background>
                        </Canvas>
                        <Canvas>
                            <Canvas.Background>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Path Data="m -7.70126483 0.59059 c -0.18478825 -0.48464 0.62555663 -1.01992 1.20479913 -0.77957 2.6825069 1.11308 4.7163748 3.69291 5.2444196 6.56733 -3.3136138 -4.83318 -6.08654335 -4.83659 -6.44921873 -5.78776 z" Fill="Black" Stroke="Transparent" StrokeThickness="0"/>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Canvas.Background>
                        </Canvas>
                    </Grid>
                </VisualBrush.Visual>
            </VisualBrush>
        </Grid.OpacityMask>
    </Grid>

    <Grid x:Key="RenameButtonLargeIcon" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Border Height="12" BorderBrush="{DynamicResource IconPrimaryFillBrush}" Background="{DynamicResource IconForegroundBrush}" BorderThickness="3,3,13,3" CornerRadius="0" Effect="{DynamicResource IconOuterShadow}"/>
        <Canvas Width="12" Height="24" Background="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Right" Margin="3,0" Effect="{DynamicResource IconInnerShadow}">
            <Canvas.OpacityMask>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Border Width="12" Height="24" Background="Transparent" BorderBrush="Black" BorderThickness="0,2">
                            <Canvas Width="2" Background="Black"/>
                        </Border>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Canvas.OpacityMask>
        </Canvas>
    </Grid>

    <Grid x:Key="NewFolderButtonLargeIcon" Width="30" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path Data="M 0 0 L 20 4 L 20 18 L 22 20 L 22 28 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
            <Path Data="M 0 0 L 7 5 L 8 32 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
    </Grid>


    <!--#endregion Ribbon Icons-->
</ResourceDictionary>