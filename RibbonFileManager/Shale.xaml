<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RibbonFileManager"
                    xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                    xmlns:FluentHelpers="clr-namespace:Fluent.Helpers;assembly=Fluent"
                    xmlns:converters="clr-namespace:Fluent.Converters;assembly=Fluent"
                    xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
                    xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
                    xmlns:win="clr-namespace:Start9.UI.Wpf.Windows;assembly=Start9.UI.Wpf"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
                    xmlns:e="http://schemas.microsoft.com/xaml/behaviors">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Fluent;Component/Themes/Generic.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Shale;component/Themes/Shale.xaml"/>
        <!--ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Shale;component/Themes/Colors/Accent.xaml"/-->
        <ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Shale;component/Themes/Colors/BaseLight.xaml"/>
        <!--TEMP: Un-comment the line below and comment the line above for Dark Shale-->
        <!--ResourceDictionary Source="pack://application:,,,/Start9.Wpf.Styles.Shale;component/Themes/Colors/BaseDark.xaml"/-->
    </ResourceDictionary.MergedDictionaries>
    
    <!--#region Converters-->
    
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <converters:ObjectToImageConverter x:Key="ObjectToImageConverter"/>
    <local:DiskItemSubItemsTreeFilterConverter x:Key="DiskItemSubItemsTreeFilterConverter"/>
    <local:DriveFreeSpaceToUsedSpaceConverter x:Key="DriveFreeSpaceToUsedSpaceConverter"/>
    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>

    <!--#endregion Converters-->


    <!--#region Main Window Styles-->

    <Style x:Key="{x:Type local:MainWindow}" TargetType="{x:Type local:MainWindow}" BasedOn="{StaticResource {x:Type win:DecoratableWindow}}">
        <Setter Property="Padding" Value="0"/>
        <!--Setter Property="BorderThickness" Value="0,64,0,0"/-->
        <!--Setter Property="ShowTitlebarText" Value="{Binding ShowTitlebarText, Source={x:Static local:Config.Instance}}"/-->
        <Style.Triggers>
            <Trigger Property="InterfaceMode" Value="Ribbon">
                <Setter Property="TitlebarHeight" Value="62"/><!--54-->
                <!--Setter Property="Padding" Value="0,-24,0,0"/-->
                <!--Setter Property="BorderThickness" Value="0,54,0,0"/-->
            </Trigger>
            <Trigger Property="InterfaceMode" Value="CommandBar">
                <Setter Property="TitlebarHeight" Value="71"/><!--64-->
                <Setter Property="ShowTitlebarIcon" Value="{Binding ShowTitlebarText, Source={x:Static local:Config.Instance}}"/>
                <!--Setter Property="Padding" Value="0,-24,0,0"/-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RootGridStyle" TargetType="{x:Type Grid}">
        <!--Setter Property="Margin" Value="0,24,0,0"/--> <!--{Binding BorderThickness, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}}/-->
    </Style>

    <!--#endregion Main Window Styles-->


    <!--#region Main Ribbon Styles-->

    <Style x:Key="{x:Type Fluent:Ribbon}" TargetType="{x:Type Fluent:Ribbon}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource HorizontalPanelBackgroundGradientStops}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource HorizontalPanelBorderBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <!--Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" /-->
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Fluent:FrameworkHelper.UseLayoutRounding" Value="True" />
        <!--Setter Property="TitleBar" Value="{Binding TitleBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue={x:Null}}" /-->
        <Setter Property="QuickAccessToolBarHeight" Value="31"/> <!--{Binding TitleBar.ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue=23}" /-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:Ribbon}">
                    <!--ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
                    </ControlTemplate.Resources-->
                    <Border Background="Transparent">
                        <Grid x:Name="PART_LayoutRoot"  Width="Auto" Height="Auto">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Fluent:RibbonTabControl x:Name="PART_RibbonTabControl" Menu="{TemplateBinding Menu}" ContentHeight="{TemplateBinding ContentHeight}" ContextMenu="{Binding ContextMenu, ElementName=PART_LayoutRoot}" AreTabHeadersVisible="{TemplateBinding AreTabHeadersVisible}" IsToolBarVisible="{TemplateBinding IsToolBarVisible}" IsMouseWheelScrollingEnabled="{TemplateBinding IsMouseWheelScrollingEnabled}" />
                            <ContentControl x:Name="quickAccessToolBarHolder" Grid.Row="1" Height="{TemplateBinding QuickAccessToolBarHeight}" HorizontalAlignment="Left">
                                <Fluent:QuickAccessToolBar x:Name="PART_QuickAccessToolBar" ShowAboveRibbon="{Binding ShowQuickAccessToolBarAboveRibbon, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsMenuDropDownVisible="{TemplateBinding IsQuickAccessToolBarMenuDropDownVisible}" HorizontalAlignment="Left" Focusable="False" />
                            </ContentControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsQuickAccessToolBarVisible" Value="False">
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_QuickAccessToolBar" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" TargetName="PART_RibbonTabControl" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="QuickAccessToolBar" Value="{x:Null}">
                            <Setter Property="Content" TargetName="quickAccessToolBarHolder" Value="{x:Null}" />
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ShowQuickAccessToolBarAboveRibbon" Value="True">
                            <Setter Property="Content" TargetName="quickAccessToolBarHolder" Value="{x:Null}" />
                            <Setter Property="Visibility" TargetName="quickAccessToolBarHolder" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" IsHitTestVisible="True">
                        <ScrollContentPresenter  Margin="{TemplateBinding Padding}" x:Name="PART_ScrollContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" IsHitTestVisible="True" />
                        <RepeatButton Style="{DynamicResource CaptionRepeatButtonStyle}" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" HorizontalAlignment="Left" Width="13" Height="Auto" VerticalAlignment="Stretch">
                            <!--Style="{DynamicResource ScrollButtonStyle}"-->
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedHorizontalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="HorizontalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentWidth" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportWidth" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 6 0 L 0 6 L 6 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type RepeatButton}}}" StrokeThickness="2"/>
                            <!--Path Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="3" Height="5" Data="M0,0L1,1 1,-1z" /-->
                        </RepeatButton>
                        <RepeatButton Style="{DynamicResource CaptionRepeatButtonStyle}" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" HorizontalAlignment="Right" Width="13" Height="Auto" VerticalAlignment="Stretch">
                            <!--Style="{DynamicResource ScrollButtonStyle}"-->
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedHorizontalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="HorizontalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentWidth" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportWidth" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type RepeatButton}}}" StrokeThickness="2"/>
                            <!--Path Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RepeatButton}}}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" Width="3" Height="5" Data="M1,0L0,1 0,-1z" /-->
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="CanContentScroll" Value="True" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="PanningMode" Value="HorizontalOnly" />
    </Style>

    <Style x:Key="{x:Type Fluent:RibbonTabControl}" TargetType="{x:Type Fluent:RibbonTabControl}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="CanMinimize" Value="{Binding CanMinimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Mode=TwoWay}" />
        <Setter Property="IsMinimized" Value="{Binding IsMinimized, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}, Mode=TwoWay}" />
        <Setter Property="ContentGapHeight" Value="{Binding ContentGapHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTabControl}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource TabScrollViewerStyle}"/>
                    </ControlTemplate.Resources>
                    <Grid x:Name="ContentGrid" KeyboardNavigation.TabNavigation="Local" Height="Auto" VerticalAlignment="Top">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="rowDefinition" MaxHeight="{TemplateBinding ContentHeight}" />
                            <!--RowDefinition x:Name="rowDefinition" MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" /-->
                            <RowDefinition x:Name="rowDefinition1" MinHeight="{TemplateBinding ContentGapHeight}" MaxHeight="{TemplateBinding ContentGapHeight}" />
                        </Grid.RowDefinitions>
                        <!--Border x:Name="border" HorizontalAlignment="Stretch" Margin="0,-1,0,0" Width="Auto" BorderThickness="0" Grid.Row="1" BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" /-->
                        <!--Border HorizontalAlignment="Stretch" Margin="1,0,1,0" Grid.Row="1" Grid.RowSpan="1" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2"-->
                        <Border Background="{TemplateBinding Background}"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.Row="1" Grid.RowSpan="1" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" HorizontalAlignment="Stretch">
                            <!--Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.BorderBrush}" BorderThickness="{DynamicResource Fluent.Ribbon.Values.RibbonTabControl.Content.BorderThickness}" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground}"-->
                            <ContentControl x:Name="mainContentControl" Margin="0" Focusable="False" HorizontalAlignment="Stretch" Height="94">
                                <ContentControl.LayoutTransform>
                                    <ScaleTransform x:Name="mainContentControlTransform" ScaleY="1"/>
                                </ContentControl.LayoutTransform>
                                <ContentPresenter x:Name="PART_SelectedContentPresenter" ContentSource="SelectedContent" HorizontalAlignment="Stretch" Margin="0"/>
                            </ContentControl>
                        </Border>
                        <!--Border Margin="0" VerticalAlignment="Stretch" Grid.Row="2" Background="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" /-->
                        <Grid x:Name="TabsGrid" HorizontalAlignment="Stretch" Width="Auto" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1">
                            <!--Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Background}" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Foreground}"-->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Fluent:WindowSteeringHelperControl Grid.ColumnSpan="4" />
                            <!-- Margin on bottom is need to keep the border surrounding the content area visible below the menu presenter -->
                            <ContentPresenter Grid.Column="0" VerticalAlignment="Stretch" ContentSource="Menu" Margin="0,0,0,1" />
                            <Fluent:RibbonScrollViewer Grid.Column="1" Visibility="{Binding AreTabHeadersVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" HorizontalAlignment="Left" Margin="0" Width="Auto" Style="{DynamicResource RibbonTabScrollViewer}" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" IsHitTestVisible="True" IsTabStop="False">
                                <Grid HorizontalAlignment="Stretch">
                                    <ui:TravellingSelector x:Name="SelectorLine" TargetPanel="{Binding ElementName=PART_TabsContainer, Mode=OneWay}" SelectedObjectIndex="{Binding SelectedIndex, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" CollectionSize="{Binding Items.Count, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" AnimationDuration="0:0:0.250" Width="{Binding ActualWidth, ElementName=PART_TabsContainer, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=PART_TabsContainer, Mode=OneWay}" IsHitTestVisible="False">
                                        <!--Collection="{Binding ItemsSource, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}" SelectedObject="{Binding SelectedItem, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}"-->
                                        <ui:TravellingSelector.AnimationEase>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </ui:TravellingSelector.AnimationEase>
                                        <ui:TravellingSelector.Template>
                                            <ControlTemplate TargetType="{x:Type ui:TravellingSelector}">
                                                <Grid Background="#01000000">
                                                    <Border x:Name="PART_Selector" HorizontalAlignment="Left" VerticalAlignment="Top" Width="{TemplateBinding SelectionWidth}" Height="{TemplateBinding SelectionHeight}">
                                                        <!--Background="#01000000"-->
                                                        <Border Margin="-2,0,-2,1" ClipToBounds="True">
                                                            <!--RenderTransform="{Binding SelectorTransform, RelativeSource={RelativeSource Mode=TemplatedParent}}"-->
                                                            <Border x:Name="SelectedBorder" Margin="4,0" BorderBrush="{DynamicResource SelectedHighlightBrush}" BorderThickness="0,0,0,2" RenderTransformOrigin="0.5,1">
                                                                <Border.RenderTransform>
                                                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                                </Border.RenderTransform>
                                                                <Rectangle Fill="{Binding BorderBrush, ElementName=SelectedBorder}" Opacity="1" Height="2" VerticalAlignment="Bottom" Margin="0,-2">
                                                                    <Rectangle.Effect>
                                                                        <BlurEffect Radius="5"/>
                                                                    </Rectangle.Effect>
                                                                </Rectangle>
                                                            </Border>
                                                        </Border>
                                                    </Border>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                                                        <DoubleAnimation.EasingFunction>
                                                                            <CubicEase EasingMode="EaseOut"/>
                                                                        </DoubleAnimation.EasingFunction>
                                                                    </DoubleAnimation>
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                                                        <DoubleAnimation.EasingFunction>
                                                                            <CubicEase EasingMode="EaseOut"/>
                                                                        </DoubleAnimation.EasingFunction>
                                                                    </DoubleAnimation>
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                                <!--ControlTemplate.Triggers>
                                            <Trigger Property="SelectionExists" Value="True">
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CubicEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CubicEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                            </Trigger>
                                        </ControlTemplate.Triggers-->
                                            </ControlTemplate>
                                        </ui:TravellingSelector.Template>
                                    </ui:TravellingSelector>
                                    <Fluent:RibbonTabsContainer x:Name="PART_TabsContainer" IsItemsHost="True" Height="Auto" HorizontalAlignment="Left" Margin="0" KeyboardNavigation.TabIndex="1"/>
                                </Grid>
                            </Fluent:RibbonScrollViewer>
                            <StackPanel HorizontalAlignment="Right" Grid.Column="3" Orientation="Horizontal" Margin="0,0,0,1">
                                <Fluent:ToggleButton x:Name="PART_MinimizeButton" Width="30" Height="30" IsChecked="{Binding Path=IsMinimized, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding CanMinimize, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Fluent:ToggleButton.Style>
                                        <Style TargetType="{x:Type Fluent:ToggleButton}">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}" />
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                                                        <Grid Background="{TemplateBinding Background}">
                                                            <!--ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,0,1,0" Effect="{DynamicResource DropShadow}" RenderTransformOrigin="0.5,0.5"-->
                                                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Effect="{DynamicResource DropShadow}" RenderTransformOrigin="0.5,0.5">
                                                                <Path.RenderTransform>
                                                                    <RotateTransform Angle="0"/>
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="False">
                                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" />
                                                            </DataTrigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <!--Setter Property="Foreground" Value="{DynamicResource TitlebarDisabledForegroundBrush}" /-->
                                                                <Setter Property="Opacity" Value="0.5"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Fluent:ToggleButton.Style>
                                </Fluent:ToggleButton>
                                <StackPanel x:Name="PART_ToolbarPanel" Visibility="{Binding IsToolBarVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" Orientation="Horizontal" />
                            </StackPanel>
                        </Grid>
                        <Popup x:Name="PART_Popup" PlacementTarget="{Binding Path=SelectedTabItem, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" Placement="Custom" AllowsTransparency="True" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" IsOpen="{TemplateBinding IsDropDownOpen}" HorizontalOffset="0" VerticalOffset="-10">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MinHeight="20" MaxHeight="20" />
                                    <!-- Needed for overlapping Keytips -->
                                    <RowDefinition MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" />
                                    <RowDefinition MinHeight="{TemplateBinding ContentGapHeight}" MaxHeight="{TemplateBinding ContentGapHeight}" />
                                    <RowDefinition Height="20" />
                                    <!-- Needed for overlapping Keytips -->
                                </Grid.RowDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}" Grid.Row="1" Grid.RowSpan="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained">
                                    <!--Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground}"-->
                                    <ContentControl x:Name="popupContentControl" Focusable="False" Margin="0" />
                                </Border>
                                <Rectangle x:Name="ShadowRectangle" VerticalAlignment="Top" Height="18" IsHitTestVisible="False" Grid.Row="3">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMinimized" Value="False">
                            <!--Setter TargetName="PART_MinimizeButton" Property="Icon" Value="{DynamicResource Fluent.Ribbon.Images.RibbonCollapse}" /-->
                            <Setter TargetName="PART_MinimizeButton" Property="ToolTip">
                                <Setter.Value>
                                    <Fluent:ScreenTip Title="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipTitle, Mode=OneWay}" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipText, Mode=OneWay}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mainContentControl" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <!--ObjectAnimationUsingKeyFrames Storyboard.TargetName="mainContentControl" Storyboard.TargetProperty="Content">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Null}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="popupContentControl" Storyboard.TargetProperty="Content">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{Binding ElementName=PART_SelectedContentPresenter, Mode=OneWay}"/>
                                        </ObjectAnimationUsingKeyFrames-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="mainContentControl" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <!--ObjectAnimationUsingKeyFrames Storyboard.TargetName="mainContentControl" Storyboard.TargetProperty="Content">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding ElementName=PART_SelectedContentPresenter, Mode=OneWay}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="popupContentControl" Storyboard.TargetProperty="Content">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Null}"/>
                                        </ObjectAnimationUsingKeyFrames-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="MinHeight" TargetName="rowDefinition" Value="0" />
                            <Setter Property="MinHeight" TargetName="rowDefinition1" Value="0" /-->
                            <!--Setter TargetName="PART_MinimizeButton" Property="Icon" Value="{DynamicResource Fluent.Ribbon.Images.RibbonExpand}" /-->
                            <Setter TargetName="PART_MinimizeButton" Property="ToolTip">
                                <Setter.Value>
                                    <Fluent:ScreenTip Title="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipTitle, Mode=OneWay}" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipText, Mode=OneWay}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownOpen" Value="False" />
                                <Condition Property="IsMinimized" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectorLine" Storyboard.TargetProperty="Opacity" To="0.99" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectorLine" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions-->
                            <Setter TargetName="SelectorLine" Property="IsEnabled" Value="False"/>
                            <!--Setter TargetName="SelectorLine" Property="SelectedObjectIndex" Value="-1"/-->
                        </MultiTrigger>
                        <!--Trigger SourceName="mainContentControl.LayoutTransform" Property="ScaleTransform.ScaleY" Value="0"-->
                        <DataTrigger Binding="{Binding LayoutTransform.ScaleY, ElementName=mainContentControl}" Value="0">
                            <Setter Property="Content" TargetName="mainContentControl" Value="{x:Null}" />
                            <Setter Property="Content" TargetName="popupContentControl" Value="{Binding ElementName=PART_SelectedContentPresenter, Mode=OneWay}" />
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownOpen" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--Setter TargetName="PART_MinimizeButton" Property="Icon" Value="{DynamicResource Fluent.Ribbon.Images.RibbonPin}" /-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:RibbonTabItem}" TargetType="{x:Type Fluent:RibbonTabItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="IsMinimized" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsMinimized, Mode=OneWay, FallbackValue=False}" />
        <Setter Property="IsOpen" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsDropDownOpen, Mode=OneWay, FallbackValue=True}" />
        <Setter Property="Indent" Value="12" />
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}" />
        <Setter Property="ActiveTabBackground" Value="Transparent" />
        <Setter Property="ActiveTabBorderBrush" Value="Transparent" />
        <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="Transparent"/>
        <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="White"/>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Text="{Binding}" TextWrapping="NoWrap" TextTrimming="None" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTabItem}">
                    <Grid x:Name="grid" Height="Auto" Background="#01000000">
                        <Grid Visibility="Collapsed">
                            <Border x:Name="mouseOverBorder" Margin="1,0,1,0" Background="{TemplateBinding Background}" />
                            <Border x:Name="groupBorder" Margin="0,0,0,1" BorderThickness="0" Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}"/>
                            <!--OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Contextual.Background.OpacityMask}"-->
                            <Border x:Name="selectedBorder" Visibility="Collapsed" Margin="1,0,1,0" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding ActiveTabBorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding ActiveTabBackground}" />
                        </Grid>
                        <Grid ClipToBounds="True" Margin="-2,0,-2,1">
                            <Border x:Name="HoverBorder" Margin="4,0" BorderThickness="0,0,0,2" BorderBrush="{DynamicResource HoverHighlightBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,1">
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleX="0" ScaleY="1"/>
                                </Border.RenderTransform>
                                <Rectangle Fill="{Binding BorderBrush, ElementName=HoverBorder}" Opacity="1" Height="2" VerticalAlignment="Bottom" Margin="0,-2">
                                    <Rectangle.Effect>
                                        <BlurEffect Radius="5"/>
                                    </Rectangle.Effect>
                                </Rectangle>
                            </Border>
                        </Grid>
                        <Border x:Name="PART_ContentContainer" HorizontalAlignment="Stretch" Margin="6,2,4,0" VerticalAlignment="Stretch" Padding="15,0,0,0">
                            <ContentControl AutomationProperties.Name="{TemplateBinding Header}" AutomationProperties.AutomationId="{TemplateBinding Name}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="5,1,5,4" HorizontalAlignment="Center" VerticalAlignment="Center" Height="Auto" Effect="{DynamicResource DropShadow}"/>
                        </Border>
                        <Grid x:Name="separatorGrid" Margin="0" Visibility="Collapsed" HorizontalAlignment="Right" Width="1">
                            <!--Rectangle x:Name="separatorRectangle1" Fill="{TemplateBinding BorderBrush}" Stroke="{TemplateBinding BorderBrush}" Margin="0" Width="1"/-->
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="PART_ContentContainer" Value="0.5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasRightGroupBorder" Value="False" />
                                <Condition Property="HasLeftGroupBorder" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="2,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasLeftGroupBorder" Value="False" />
                                <Condition Property="HasRightGroupBorder" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="0,0,2,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasLeftGroupBorder" Value="False" />
                                <Condition Property="HasRightGroupBorder" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="0,0,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasLeftGroupBorder" Value="True" />
                                <Condition Property="HasRightGroupBorder" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="groupBorder" Value="2,0,2,0" />
                        </MultiTrigger>
                        <Trigger Property="IsSeparatorVisible" Value="True">
                            <Setter Property="Visibility" TargetName="separatorGrid" Value="Visible" />
                            <Setter Property="Margin" TargetName="PART_ContentContainer" Value="6,2,6,0" />
                        </Trigger>
                        <Trigger Property="Group" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="groupBorder" Value="Collapsed" />
                            <Setter Property="Margin" TargetName="separatorGrid" Value="-1,0,0,1" />
                        </Trigger>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>
                        <!-- Foreground for Selected, with group -->
                        <!--Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{Binding Group.TabItemSelectedForeground, RelativeSource={RelativeSource Self}}" />
                        </Trigger-->
                        <!-- Foreground for selected, no group -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="Group" Value="{x:Null}" />
                                <Condition Property="IsMinimized" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" /-->
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="Group" Value="{x:Null}" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </MultiTrigger>
                        <!-- Background and foreground for MouseOver, with group -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=(Fluent:RibbonProperties.MouseOverBackground), RelativeSource={RelativeSource Self}}" />
                            <!--Setter Property="Foreground" Value="{Binding Group.TabItemMouseOverForeground, RelativeSource={RelativeSource Self}}" /-->
                        </MultiTrigger>
                        <!-- Foreground for selected MouseOver, with group -->
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{Binding Group.TabItemSelectedMouseOverForeground, RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                                <Condition Property="Group" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Group" Value="{x:Null}" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Group" Value="{x:Null}" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </MultiTrigger>
                        <!-- Background for Selected, Minimized, IsOpen, with group -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="grid" Value="Transparent" />
                        </MultiTrigger>
                        <!-- Background for Selected, Minimized, IsOpen, no group -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMinimized" Value="True" />
                                <Condition Property="IsOpen" Value="True" />
                                <Condition Property="Group" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="grid" Value="Transparent" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Trigger Property="Group" Value="{x:Null}">
                <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
            </Trigger-->
            <!--Trigger Property="IsSelected" Value="True">
                <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.MouseOver.Foreground}" />
            </Trigger-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsContextual, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Group.Visibility, RelativeSource={RelativeSource Self}}" Value="Collapsed" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:RibbonGroupBox}" TargetType="{x:Type Fluent:RibbonGroupBox}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" /><!--Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}}"/> , DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,15,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonGroupBox}">
                    <ControlTemplate.Resources>
                        <ResourceDictionary>
                            <Style TargetType="Separator" BasedOn="{StaticResource {x:Type Separator}}" />
                            <!--Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Type ScrollBar}}" /-->
                            <!--Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Type ScrollViewer}}" /-->
                            <Style TargetType="ScrollBar" x:Key="{x:Type ScrollBar}">
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="Foreground"  Value="{DynamicResource BlackBrush}" />
                                <Style.Triggers>
                                    <Trigger Property="Orientation" Value="Horizontal">
                                        <Setter Property="Width" Value="Auto" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition MaxWidth="18" />
                                                            <ColumnDefinition Width="0.00001*" />
                                                            <ColumnDefinition MaxWidth="18" />
                                                        </Grid.ColumnDefinitions>
                                                        <Border Grid.ColumnSpan="3" Margin="0"/>
                                                        <!-- Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollBar.Background}"-->
                                                        <RepeatButton x:Name="repeatButton" Grid.Column="0" Style="{DynamicResource ScrollBarLineButton}" Width="17" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" Margin="1,1,0,1" Background="{DynamicResource WhiteBrush}" />
                                                        <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False" Margin="0,1,0,1" ViewportSize="{TemplateBinding ViewportSize}">
                                                            <Track.Resources>
                                                                <!-- Set the Thumb's minimum height to 50.
                      The Thumb's minimum height is half the
                      value of VerticalScrollBarButtonHeightKey. -->
                                                                <sys:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}">36</sys:Double>
                                                            </Track.Resources>
                                                            <Track.DecreaseRepeatButton>
                                                                <RepeatButton Style="{DynamicResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                                                            </Track.DecreaseRepeatButton>
                                                            <Track.Thumb>
                                                                <Thumb Style="{DynamicResource ScrollBarThumb}" Margin="0,0,0,0" />
                                                            </Track.Thumb>
                                                            <Track.IncreaseRepeatButton>
                                                                <RepeatButton Style="{DynamicResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                                                            </Track.IncreaseRepeatButton>
                                                        </Track>
                                                        <RepeatButton x:Name="repeatButton1" Grid.Column="3" Style="{DynamicResource ScrollBarLineButton}" Width="17" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" Margin="0,1,1,1" Background="{DynamicResource WhiteBrush}" />
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" TargetName="repeatButton" Value="{x:Null}" />
                                                            <Setter Property="Background" TargetName="repeatButton1" Value="{x:Null}" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Height" Value="17" />
                                    </Trigger>
                                    <Trigger Property="Orientation" Value="Vertical">
                                        <Setter Property="Height" Value="Auto" />
                                        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
                                        <Setter Property="Width" Value="17" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                            <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                </Style.Triggers>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*" />
                                                        <ColumnDefinition Width="Auto" />
                                                    </Grid.ColumnDefinitions>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1" />
                                                    <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
                                                    <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" />
                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" />
                                                </Grid>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ResourceDictionary>
                    </ControlTemplate.Resources>
                    <!--ControlTemplate.Resources>
                        <ResourceDictionary>
                            <Style TargetType="Separator" BasedOn="{StaticResource GroupBoxSeparator}" />
                            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" />
                            <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" />
                        </ResourceDictionary>
                    </ControlTemplate.Resources-->
                    <Grid x:Name="grid2" HorizontalAlignment="Stretch">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" />
                        <Grid>
                            <ContentControl x:Name="border1" Focusable="False">
                                <Grid x:Name="PART_ParentPanel" Margin="0,1,0,2" Height="Auto">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Fluent:RibbonGroupBoxWrapPanel x:Name="PART_UpPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" Width="Auto" Height="Auto" IsItemsHost="True" Margin="4,0,4,0" />
                                    <Grid x:Name="PART_DownGrid" MaxWidth="{Binding ActualWidth, ElementName=PART_ParentPanel}" Margin="0,-2,2,2" Grid.Row="1" VerticalAlignment="Bottom" Height="Auto">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentControl Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2,0" KeyboardNavigation.IsTabStop="False" />
                                        <!--ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}"-->
                                        <Fluent:Button Margin="0,0,1,1" x:Name="PART_DialogLauncherButton" HorizontalAlignment="Stretch" Width="15" Height="14" Grid.Column="1" Focusable="False" IsTabStop="False" Background="Transparent" BorderBrush="Transparent" VerticalAlignment="Bottom" Icon="{TemplateBinding LauncherIcon}" Header="{TemplateBinding LauncherText}" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}">
                                            <!--Template="{DynamicResource DialogLauncherButtonControlTemplate}"-->
                                        </Fluent:Button>
                                    </Grid>
                                </Grid>
                            </ContentControl>
                            <Grid x:Name="grid1" Margin="0" Width="Auto" Height="Auto" Visibility="Collapsed" Grid.RowSpan="2">
                                <ContentControl Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Fluent:RibbonGroupBox.IsCollapsedHeaderContentPresenter="True" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="5,38,5,0" KeyboardNavigation.IsTabStop="False" />
                                <!-- Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" Style="{DynamicResource Fluent.Ribbon.Styles.RibbonGroupBox.TwoLineHeaderContentControl}"-->
                                <Border HorizontalAlignment="Center" VerticalAlignment="Top" Width="31" Height="31" BorderThickness="1" Margin="5,3,8,0">
                                    <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush}"-->
                                    <ContentPresenter x:Name="iconImage" Height="16" Content="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" Width="16" SnapsToDevicePixels="True" />
                                </Border>
                                <Popup x:Name="PART_Popup" Width="Auto" Height="Auto" AllowsTransparency="True" PlacementTarget="{Binding ElementName=grid1, Mode=OneWay}" IsOpen="{TemplateBinding IsDropDownOpen}">
                                    <Grid Width="Auto" Height="Auto" Margin="0,20">
                                        <Border x:Name="border" Height="Auto" BorderThickness="1">
                                            <!--Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}"-->
                                            <!--d:LayoutOverrides="Width"-->
                                            <ContentControl x:Name="popupContent" />
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <Rectangle x:Name="separator" Fill="{DynamicResource HorizontalPanelBorderBrush}" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="1" Height="Auto" Grid.RowSpan="2" Margin="0,4" Visibility="{Binding IsSeparatorVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <!--Fill="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}"-->
                        </Grid>
                        <Image x:Name="PART_SnappedImage" Stretch="Uniform" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Collapsed">
                            <Setter Property="Visibility" TargetName="grid1" Value="Visible" />
                            <Setter Property="UIElement.Visibility" TargetName="border1" Value="Collapsed" />
                            <Setter Property="HorizontalAlignment" TargetName="grid2" Value="Left" />
                            <Setter Property="Content" TargetName="border1" Value="{x:Null}" />
                            <Setter Property="Content" TargetName="popupContent" Value="{Binding ElementName=PART_ParentPanel}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="State" Value="Collapsed" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background}" /-->
                        </MultiTrigger>
                        <!--Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background}" />
                        </Trigger-->
                        <Trigger Property="IsLauncherVisible" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DialogLauncherButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--Setter Property="HeaderTemplateSelector" Value="{Binding Source={x:Static templateSelectors:RibbonGroupBoxHeaderTemplateSelector.Instance}}" /-->
        <Style.Triggers>
            <Trigger Property="State" Value="QuickAccess">
                <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxDropDownButtonControlTemplate}" />
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="22" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="SnapsToDevicePixels" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:TwoLineLabel}" TargetType="{x:Type Fluent:TwoLineLabel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:TwoLineLabel}">
                    <StackPanel x:Name="stackPanel" Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <AccessText TextWrapping="Wrap" x:Name="PART_TextRun" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <StackPanel x:Name="stackPanel1" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <AccessText TextWrapping="Wrap" x:Name="PART_TextRun2" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Border x:Name="border" Height="Auto" Width="5" HorizontalAlignment="Center" Margin="0">
                                <Path x:Name="path" Width="5" Height="3" StrokeThickness="0" Data="M0,0L5,0 2.5,3z" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,2,0,0" SnapsToDevicePixels="True" Fill="{TemplateBinding Foreground}" />
                            </Border>
                        </StackPanel>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasTwoLines" Value="False">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="HorizontalAlignment" TargetName="stackPanel" Value="Left" />
                            <Setter Property="Margin" TargetName="border" Value="0" />
                            <Setter Property="VerticalAlignment" TargetName="stackPanel" Value="Center" />
                            <Setter Property="VerticalAlignment" TargetName="border" Value="Center" />
                            <Setter Property="Margin" TargetName="stackPanel1" Value="3,0,0,0" />
                            <Setter Property="VerticalAlignment" TargetName="stackPanel1" Value="Center" />
                        </Trigger>
                        <Trigger Property="HasGlyph" Value="False">
                            <Setter Property="Visibility" TargetName="path" Value="Collapsed" />
                            <Setter Property="Width" TargetName="border" Value="0.1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:QuickAccessToolBar}" TargetType="{x:Type Fluent:QuickAccessToolBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="31"/>
        <Setter Property="Margin" Value="21,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:QuickAccessToolBar}">
                    <DockPanel x:Name="PART_RootPanel" KeyboardNavigation.TabNavigation="Local" Background="#01000000">
                        <ContentControl x:Name="menuContentControl" DockPanel.Dock="Right" HorizontalAlignment="Right" Focusable="False">
                            <Fluent:DropDownButton CanAddToQuickAccessToolBar="False" x:Name="PART_MenuDownButton" HorizontalAlignment="Right" VerticalAlignment="Stretch" DockPanel.Dock="Right" IsEnabled="{TemplateBinding IsEnabled}" Size="Small" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarDropDownButtonTooltip, Mode=OneWay}" KeyboardNavigation.TabIndex="3">
                                <!--Visibility="{Binding IsMenuDropDownVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" -->
                                <!--Icon="{DynamicResource Fluent.Ribbon.Images.QuickAccessToolbarDropDown}"-->
                                <Fluent:DropDownButton.Style>
                                    <Style TargetType="{x:Type Fluent:DropDownButton}">
                                        <Setter Property="Width" Value="45"/>
                                        <Setter Property="Height" Value="31"/>
                                        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}" />
                                        <Setter Property="Padding" Value="0"/>
                                        <Setter Property="ItemsPanel">
                                            <Setter.Value>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Vertical" />
                                                </ItemsPanelTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
                                                    <Grid Background="#01000000">
                                                        <Grid x:Name="PART_ButtonBorder" Background="#01000000">
                                                            <!--ContentPresenter x:Name="iconImage" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True"/-->
                                                            <StackPanel Background="#01000000" Width="5" Orientation="Vertical" UseLayoutRounding="True" Effect="{DynamicResource DropShadow}" VerticalAlignment="Center">
                                                                <Rectangle Fill="{TemplateBinding Foreground}" Height="1" HorizontalAlignment="Stretch" Margin="0,0,0,3"/>
                                                                <Path Width="5" Height="3" Data="M0,0L5,0 2.5,3z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Stretch"/>
                                                            </StackPanel>
                                                        </Grid>
                                                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                                                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                                    <Border CornerRadius="3" Margin="4,3,4,5" Effect="{DynamicResource DropShadow}">
                                                                        <Border.Background>
                                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                                        </Border.Background>
                                                                        <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1"-->
                                                                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                                            <!--Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" /-->
                                                                            <Grid Margin="3,1,3,0" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                                                <Grid.RowDefinitions>
                                                                                    <RowDefinition Height="*" />
                                                                                    <RowDefinition Height="Auto" />
                                                                                </Grid.RowDefinitions>
                                                                                <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" IsTabStop="False" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" Margin="0,0,0,1" />
                                                                                </ScrollViewer>
                                                                                <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                                                                    <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"-->
                                                                                    <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"-->
                                                                                    <Grid>
                                                                                        <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                                                        <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                                                    </Grid>
                                                                                </Border>
                                                                            </Grid>
                                                                        </Grid>
                                                                    </Border>
                                                                </Border>
                                                            </Grid>
                                                        </Popup>
                                                    </Grid>
                                                    <!--ControlTemplate.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                                                            <Setter Property="Effect" TargetName="iconImage">
                                                                <Setter.Value>
                                                                    <Fluent:GrayscaleEffect />
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers-->
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="ResizeMode" Value="None">
                                                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                                                        </Trigger>
                                                        <Trigger Property="ResizeMode" Value="Both">
                                                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                                                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                                                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                                                        </Trigger>
                                                        <Trigger Property="ResizeMode" Value="Vertical">
                                                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                                                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                                                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.5"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Mode=OneWay}" Value="False">
                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" />
                                            </DataTrigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                            </Trigger>
                                            <Trigger Property="IsDropDownOpen" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Fluent:DropDownButton.Style>
                                <!--Fluent:DropDownButton.Icon>
                                    <StackPanel Background="Red" Width="5" Orientation="Vertical" UseLayoutRounding="True" Effect="{DynamicResource DropShadow}" VerticalAlignment="Center">
                                        <Rectangle Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:DropDownButton}}}" Height="1" HorizontalAlignment="Stretch" Margin="0,0,0,3"/>
                                        <Path Width="5" Height="3" Data="M0,0L5,0 2.5,3z" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:DropDownButton}}}" HorizontalAlignment="Stretch"/>
                                    </StackPanel>
                                </Fluent:DropDownButton.Icon-->
                            <!--Style="{DynamicResource ToolbarDropDownButtonStyle}"-->
                                <Fluent:GroupSeparatorMenuItem Style="{DynamicResource MenuGroupSeparatorStyle}" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuHeader, Mode=OneWay}" />
                                <StackPanel x:Name="PART_MenuPanel" />
                                <Rectangle Width="1" VerticalAlignment="Stretch" Margin="2" Fill="{DynamicResource TitlebarBorderBrush}"/>
                                <!--Separator x:Name="menuSeparator"/-->
                                <Rectangle x:Name="menuSeparator" Width="1" Fill="{DynamicResource TitlebarBorderBrush}" VerticalAlignment="Stretch" Margin="2"/>
                                <Fluent:MenuItem x:Name="PART_ShowBelow" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowBelow, Mode=OneWay}" />
                                <Fluent:MenuItem x:Name="PART_ShowAbove" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowAbove, Mode=OneWay}" Visibility="Collapsed" />
                            </Fluent:DropDownButton>
                        </ContentControl>
                        <Fluent:DropDownButton x:Name="PART_ToolbarDownButton" HorizontalAlignment="Right" Visibility="Collapsed" VerticalAlignment="Stretch" Style="{DynamicResource ToolbarDropDownButtonStyle}" DockPanel.Dock="Right" Fluent:KeyTip.Keys="00" Size="Small" IsEnabled="{TemplateBinding IsEnabled}" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMoreControlsButtonTooltip, Mode=OneWay}" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <Fluent:DropDownButton.ContextMenu>
                                <ContextMenu />
                            </Fluent:DropDownButton.ContextMenu>
                            <!--Icon="{DynamicResource Fluent.Ribbon.Images.QuickAccessToolbarExtender}" -->
                            <StackPanel Orientation="Horizontal" Background="{TemplateBinding Background}" Width="Auto" Height="26" Margin="-1">
                                <StackPanel Orientation="Horizontal" x:Name="PART_ToolBarOverflowPanel" HorizontalAlignment="Left" Width="Auto" Height="Auto" VerticalAlignment="Center" Margin="1,0,0,0" />
                                <ContentControl x:Name="popupContentControl" VerticalAlignment="Center" HorizontalAlignment="Left" Background="{x:Null}" Focusable="False" Padding="0" Margin="1,0" />
                            </StackPanel>
                        </Fluent:DropDownButton>
                        <StackPanel x:Name="PART_ToolBarPanel" Orientation="Horizontal" Width="Auto" Height="Auto" VerticalAlignment="Stretch" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="1" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CanQuickAccessLocationChanging" Value="False">
                            <Setter Property="Visibility" TargetName="PART_ShowBelow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ShowAbove" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="menuSeparator" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ShowAboveRibbon" Value="False">
                            <Setter Property="Visibility" TargetName="PART_ShowBelow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ShowAbove" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasOverflowItems" Value="True">
                            <Setter Property="Visibility" TargetName="PART_ToolbarDownButton" Value="Visible" />
                            <Setter Property="Content" TargetName="popupContentControl" Value="{Binding ElementName=PART_MenuDownButton, Mode=OneWay}" />
                            <Setter Property="Content" TargetName="menuContentControl" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:RibbonTitleBar}" TargetType="{x:Type Fluent:RibbonTitleBar}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Height" Value="31"/><!--24-->
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:RibbonTitleBar}">
                    <Grid>
                        <ContentPresenter x:Name="PART_QuickAccessToolbarHolder" Content="{TemplateBinding QuickAccessToolBar}" HorizontalAlignment="Left" />
                        <ContentPresenter x:Name="PART_HeaderHolder" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsHitTestVisible="False" />
                        <Fluent:RibbonContextualGroupsContainer x:Name="PART_ItemsContainer" IsItemsHost="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_QuickAccessToolbarHolder" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_ItemsContainer" />
                        </Trigger>
                        <Trigger Property="HideContextTabs" Value="True">
                            <Setter Property="Visibility" Value="Hidden" TargetName="PART_ItemsContainer" />
                            <Setter Property="Visibility" Value="Hidden" TargetName="PART_QuickAccessToolbarHolder" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:KeyTip}" TargetType="{x:Type Fluent:KeyTip}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="3"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:KeyTip}">
                    <!--Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"-->
                    <Border SnapsToDevicePixels="True" UseLayoutRounding="True" Effect="{DynamicResource DropShadow}" CornerRadius="3" Margin="4,3,4,5">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <Grid Margin="{TemplateBinding Padding}">
                                <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" TextWrapping="Wrap" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,-1,4,1" />
                            </Grid>
                        </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:ScreenTip}" TargetType="{x:Type Fluent:ScreenTip}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Width" Value="205" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:ScreenTip}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="5" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="5" />
                        </Grid.RowDefinitions>
                        <Border Grid.RowSpan="1" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Grid>
                                <StackPanel x:Name="screenTipPanel">
                                    <TextBlock x:Name="title" TextWrapping="Wrap" Margin="7,8,7,10" FontWeight="Bold" Text="{TemplateBinding Property=Title}" />
                                    <Grid x:Name="imageAndTextSection">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Image x:Name="image" Margin="7,5,3,7" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="Uniform" Source="{TemplateBinding Property=Image}" MaxHeight="48" />
                                        <TextBlock Text="{TemplateBinding Property=Text}" TextWrapping="Wrap" Margin="8,0,8,6" Grid.Column="1" />
                                    </Grid>
                                    <Border x:Name="separator" Height="2" Width="Auto" HorizontalAlignment="Stretch" Visibility="{Binding ElementName=disableReasonSection, Path=Visibility}" Margin="5" Background="{DynamicResource GrayBrush6}" BorderThickness="0,0,0,1" IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Control, AncestorLevel=2}}" />
                                    <Grid x:Name="disableReasonSection">
                                        <Image Width="16" Height="16" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,0,0" Stretch="Uniform" Source="{DynamicResource Fluent.Ribbon.Images.Warning}" />
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <TextBlock x:Name="disableReasonHeader" x:Uid="disableReasonHeader" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ScreenTipDisableReasonHeader, Mode=OneWay}" TextWrapping="Wrap" Margin="28,0,5,2" HorizontalAlignment="Stretch" Grid.Row="0" FontWeight="Bold" />
                                            <TextBlock x:Name="disableReasonText" Text="{TemplateBinding Property=DisableReason}" TextWrapping="Wrap" Margin="28,0,5,6" HorizontalAlignment="Stretch" Grid.Row="1" />
                                            <TextBlock x:Name="helpText" TextWrapping="Wrap" Margin="28,0,5,6" Grid.RowSpan="1" Grid.Row="2" HorizontalAlignment="Stretch" Text="{Binding Text, ElementName=textBlock, Mode=Default}" />
                                        </Grid>
                                    </Grid>
                                    <Border x:Name="separator2" Height="2" Width="Auto" HorizontalAlignment="Stretch" Visibility="{TemplateBinding Property=HelpLabelVisibility}" Margin="5" Background="{DynamicResource GrayBrush6}" BorderThickness="0,0,0,1" />
                                    <Grid x:Name="helpSection" Visibility="{TemplateBinding Property=HelpLabelVisibility}">
                                        <Image Width="16" Height="16" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5,0,0,0" Stretch="Uniform" Source="{DynamicResource Fluent.Ribbon.Images.Help}" />
                                        <TextBlock x:Uid="HelpText" x:Name="textBlock" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ScreenTipF1LabelHeader, Mode=OneWay}" TextWrapping="Wrap" Margin="28,0,6,6" FontWeight="Bold" HorizontalAlignment="Stretch" />
                                        <ContentControl x:Name="helpTopic" Content="{TemplateBinding Property=HelpTopic}" Visibility="Collapsed" />
                                    </Grid>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" SourceName="separator" Value="False">
                            <Setter Property="Visibility" TargetName="disableReasonSection" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="separator" Value="True">
                            <Setter Property="Visibility" TargetName="disableReasonSection" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Content" SourceName="helpTopic" Value="{x:Null}" />
                                <Condition Property="Text" Value="" SourceName="disableReasonText" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="separator" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="Text" SourceName="disableReasonText" Value="">
                            <Setter Property="Visibility" TargetName="disableReasonSection" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" SourceName="helpTopic" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="helpText" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="helpSection" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="separator2" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Visibility" SourceName="disableReasonSection" Value="Visible">
                            <Setter Property="Visibility" TargetName="helpText" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                                <Condition Property="Image" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="imageAndTextSection" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="Image" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="image" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Main Ribbon Styles-->
    
    
    <!--#region Ribbon Control Styles-->

    <Style x:Key="{x:Type Fluent:Button}" TargetType="{x:Type Fluent:Button}">
        <!--Setter Property="Height" Value="68" /-->
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:Ribbon}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2,-3,2,-4"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <!--Border x:Name="HoverBackground" Background="Transparent" BorderBrush="{DynamicResource ToolbarButtonHoverBorderBrush}" BorderThickness="1" CornerRadius="4" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource ToolbarButtonHoverSecondaryBorderBrush}">
                                <Border BorderThickness="0,1,0,2" CornerRadius="2" Background="{DynamicResource ToolbarButtonHoverTertiaryBackgroundBrush}" BorderBrush="{DynamicResource ToolbarButtonHoverTertiaryBorderBrush}"/>
                            </Border>
                        </Border-->
                        <Rectangle x:Name="SizingAidRectangle" Fill="#01000000" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <Border x:Name="HoverBackground" Opacity="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-4,-2,-4,-6" UseLayoutRounding="True">
                            <Border.Background>
                                <VisualBrush Stretch="None" TileMode="None" AlignmentX="Center" AlignmentY="Center">
                                    <!--RenderOptions.BitmapScalingMode="NearestNeighbor" RenderOptions.EdgeMode="Aliased"-->
                                    <VisualBrush.Visual>
                                        <Grid UseLayoutRounding="True" Background="#01000000" Width="{Binding ActualWidth, Source={x:Reference Name=SizingAidRectangle}}" Height="{Binding ActualHeight, Source={x:Reference Name=SizingAidRectangle}}">
                                            <Border CornerRadius="3" Effect="{DynamicResource TertiaryDropShadow}" Margin="3" UseLayoutRounding="True">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                                </Border.Background>
                                            </Border>
                                        </Grid>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Border.Background>
                        </Border>
                        <StackPanel x:Name="ContentStackPanel" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" SnapsToDevicePixels="True" Content="{TemplateBinding Icon}"/>
                            <!--Breaks Stuff if un-commented out -->
                            <!--{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}-->
                            <Fluent:TwoLineLabel x:Name="ControlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Small">
                            <Setter TargetName="ControlLabel" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter TargetName="ControlLabel" Property="HasTwoLines" Value="False"/>
                            <Setter TargetName="ContentStackPanel" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="ControlLabel" Property="Margin" Value="2,0"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Large">
                            <Setter TargetName="iconImage" Property="Width" Value="32"/>
                            <Setter TargetName="iconImage" Property="Height" Value="32"/>
                            <Setter TargetName="iconImage" Property="Content" Value="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <Setter TargetName="iconImage" Property="Margin" Value="0,0,0,5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <!--Setter Property="Foreground" Value="{DynamicResource ToolbarButtonDisabledForegroundBrush}" /-->
                        </Trigger>
                        <!--Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,2,0" />
                            <Setter Property="Content" TargetName="iconImage" Value="{TemplateBinding Icon, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,0" />
                        </Trigger-->
                        <!--Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto" />
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,0" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,2,0" />
                            <Setter Property="Content" TargetName="iconImage" Value="{TemplateBinding Icon, Converter={StaticResource ObjectToImageConverter}, ConverterParameter='16,16'}" />
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center" />
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="76" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="30" />
                <Setter Property="Width" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:DropDownButton}" TargetType="{x:Type Fluent:DropDownButton}">
        <!--Setter Property="Height" Value="68" /-->
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <!--Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="Margin" Value="2,-3,2,-4"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
                    <!--ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
                    </ControlTemplate.Resources-->
                    <Grid>
                        <!--Border x:Name="PART_ButtonBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"                     HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Height="Auto"-->
                        <!--StackPanel x:Name="stackPanel" Margin="{TemplateBinding Padding}" Width="Auto" Orientation="Vertical">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}, '32,32', {Binding RelativeSource={RelativeSource TemplatedParent}}}" Width="32" Margin="0,2,0,0" SnapsToDevicePixels="True" /> 
                            <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2 0 2 2" HasGlyph="{TemplateBinding HasTriangle}" />
                        </StackPanel-->
                        <Grid x:Name="PART_ButtonBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Rectangle x:Name="SizingAidRectangle" Fill="#01000000" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            <Border x:Name="HoverBackground" Opacity="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-4,-2,-4,-6" UseLayoutRounding="True">
                                <Border.Background>
                                    <VisualBrush Stretch="None" TileMode="None" AlignmentX="Center" AlignmentY="Center">
                                        <VisualBrush.Visual>
                                            <Grid UseLayoutRounding="True" Background="#01000000" Width="{Binding ActualWidth, Source={x:Reference Name=SizingAidRectangle}}" Height="{Binding ActualHeight, Source={x:Reference Name=SizingAidRectangle}}">
                                                <Border CornerRadius="3" Effect="{DynamicResource TertiaryDropShadow}" Margin="3" UseLayoutRounding="True">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                                    </Border.Background>
                                                </Border>
                                            </Grid>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Border.Background>
                            </Border>
                            <StackPanel x:Name="stackPanel" Margin="{TemplateBinding Padding}" Width="Auto" Orientation="Vertical">
                                <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="32" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" Width="32" Margin="0,2,0,0" SnapsToDevicePixels="True" />
                                <!--{converters:ObjectToImageConverter {Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}, '32,32', {Binding RelativeSource={RelativeSource TemplatedParent}}}-->
                                <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2 0 2 2" HasGlyph="{TemplateBinding HasTriangle}" />
                            </StackPanel>
                        </Grid>
                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <Border CornerRadius="3" Margin="4,3,4,5" Effect="{DynamicResource DropShadow}">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1"-->
                                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderThickness="1" />
                                            <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"-->
                                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" IsTabStop="False" Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" Margin="2,2,2,0"/>
                                                </ScrollViewer>
                                                <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                                    <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"-->
                                                    <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"-->
                                                    <Grid>
                                                        <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                        <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                    </Grid>
                                                </Border>
                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Content" TargetName="iconImage" Value="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Text" TargetName="controlLabel" Value="" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,0,0" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="-2,0,2,1" />
                            <Setter Property="Width" TargetName="controlLabel" Value="10" />
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center" />
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Content" TargetName="iconImage" Value="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" />
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto" />
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,0,2,1" />
                            <!--Setter Property="VerticalAlignment" TargetName="PART_ButtonBorder" Value="Stretch" /-->
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="2,0,2,0" />
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center" />
                        </Trigger>
                        <Trigger Property="Size" Value="Large">
                            <Setter TargetName="iconImage" Property="Margin" Value="0,2,0,5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsDropDownOpen" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!--Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        </Trigger-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5" />
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsDropDownOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        </MultiTrigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="32" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger-->
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="76" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="30" />
                <Setter Property="Width" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:MenuItem}" TargetType="{x:Type Fluent:MenuItem}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Margin" Value="0,0,0,3"/>
        <Setter Property="Background" Value="#01000000" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MinWidth="25" MaxWidth="41" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0" Grid.ColumnSpan="3">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Border>
                        <Border x:Name="border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" Grid.Column="0" Grid.ColumnSpan="3">
                        </Border>
                        <ContentPresenter x:Name="textBlock" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Width="Auto" Height="Auto" Margin="5,3,3,3" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                        <Image x:Name="checkedImage" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" Stretch="Uniform" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Visibility="Collapsed" SnapsToDevicePixels="True" />
                        <Border x:Name="iconImageBorder" BorderThickness="1">
                            <!--ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" MinHeight="16" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" MinWidth="16" Margin="3,2,2,2" SnapsToDevicePixels="True" /-->
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" MinHeight="16" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="16" Margin="3,2,2,2" SnapsToDevicePixels="True" />
                        </Border>
                        <TextBlock x:Name="gestureTextBlock" Text="{TemplateBinding InputGestureText}" Width="Auto" Height="Auto" Margin="3,3,15,3" VerticalAlignment="Center" Grid.Column="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="InputGestureText" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="gestureTextBlock" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="InputGestureText" Value="">
                            <Setter Property="Visibility" TargetName="gestureTextBlock" Value="Collapsed" />
                        </Trigger>
                        <!--Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="iconImageBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                            <Setter Property="BorderBrush" TargetName="iconImageBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
                        </Trigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Icon" Value="{x:Null}" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="checkedImage" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--Setter Property="Visibility" TargetName="border" Value="Visible" /-->
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                            <Setter Property="Opacity" TargetName="checkedImage" Value="0.5" />
                            <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                            <Setter Property="Opacity" TargetName="gestureTextBlock" Value="0.5" />
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Effect" TargetName="checkedImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" MinWidth="25" MaxWidth="41" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="2" HorizontalAlignment="Right" Margin="0,4,23,4" Width="1" />
                                <!--Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}"-->
                                <Grid HorizontalAlignment="Stretch" Margin="0" Width="Auto" Grid.Column="0" Grid.ColumnSpan="3">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="0.905*" />
                                        <ColumnDefinition x:Name="columnDefinition" Width="23" />
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="PART_ButtonBorder" Visibility="Collapsed" BorderThickness="1" Margin="0,0,-1,0">
                                        <!--Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}"-->
                                        <!--Background="#01000000"-->
                                    </Border>
                                    <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,0,0,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1,1,0,1" Opacity="0" IsHitTestVisible="False" Grid.Column="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border x:Name="InnerHoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,0,0,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="False">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <Border x:Name="SelectedBackground" CornerRadius="{Binding CornerRadius, ElementName=HoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1,1,0,1" Opacity="0" Grid.Column="0" IsHitTestVisible="False">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border CornerRadius="{Binding CornerRadius, ElementName=InnerHoverBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="False">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <Border x:Name="Submenu_Border" HorizontalAlignment="Stretch" Margin="0" Width="Auto" Visibility="Collapsed" BorderThickness="1" Grid.Column="1" />
                                    <!--Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}"-->
                                    <Border x:Name="SubmenuHoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,3,3,0;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0" IsHitTestVisible="False" Grid.Column="1">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border x:Name="SubmenuInnerHoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,2,2,0;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="False">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <Border x:Name="SubmenuSelectedBackground" CornerRadius="{Binding CornerRadius, ElementName=SubmenuHoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0" IsHitTestVisible="False" Grid.Column="1">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border CornerRadius="{Binding CornerRadius, ElementName=SubmenuInnerHoverBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" IsHitTestVisible="False">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <Path Data="M 0 0 L 4 4 L 0 8 Z" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1"/>
                                    <!--Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type MenuItem}}}"-->
                                </Grid>
                                <ContentPresenter x:Name="textBlock" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Width="Auto" Height="Auto" Margin="5,3,3,3" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                                <Image x:Name="checkedImage" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" Stretch="Uniform" Source="{DynamicResource Fluent.Ribbon.Images.Checked}" Visibility="Collapsed" SnapsToDevicePixels="True" />
                                <Border x:Name="iconImageBorder" BorderThickness="1">
                                    <!--ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" MinHeight="16" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" MinWidth="16" Margin="3,2,2,2" SnapsToDevicePixels="True" /-->
                                    <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" MinHeight="16" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="16" Margin="3,2,2,2" SnapsToDevicePixels="True" />
                                </Border>
                                <Path x:Name="path" Stretch="Fill" Stroke="{x:Null}" HorizontalAlignment="Right" Margin="1,0,9,0" Width="4" Data="M0,0L1,1 0,2z" Height="7" Grid.Column="3" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" />
                                <Popup x:Name="PART_Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                                    <Grid x:Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Stretch">
                                        <Border x:Name="DropDownBorder" SnapsToDevicePixels="True" Background="#01000000" BorderBrush="{DynamicResource HorizontalPanelBorderBrush}" BorderThickness="1,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto"/>
                                                <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"-->
                                                <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <Path Fill="{x:Null}" Stretch="Fill" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1" Height="Auto" Data="M0,0L0,1" Grid.RowSpan="2" Visibility="Visible" />
                                                    <!--Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}"-->
                                                    <ScrollViewer Margin="1" x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" SnapsToDevicePixels="True">
                                                        <StackPanel x:Name="PART_MenuPanel" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                                    </ScrollViewer>
                                                    <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                                        <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"-->
                                                        <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"-->
                                                        <Grid>
                                                            <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                            <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                        </Grid>
                                                    </Border>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Fluent:MenuItem.ResizeMode" Value="None">
                                    <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Both">
                                    <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                                    <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                                    <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                                </Trigger>
                                <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Vertical">
                                    <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                                    <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                                    <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                                </Trigger>
                                <!--Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" TargetName="iconImageBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                                    <Setter Property="BorderBrush" TargetName="iconImageBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
                                </Trigger-->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Icon" Value="{x:Null}" />
                                        <Condition Property="IsChecked" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Visibility" TargetName="checkedImage" Value="Visible" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsHighlighted" Value="False" />
                                        <!--Condition Property="IsEnabled" Value="False" /-->
                                        <Condition Property="IsSubmenuOpen" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <!--Setter Property="Visibility" TargetName="PART_ButtonBorder" Value="Visible" />
                                    <Setter Property="Visibility" TargetName="Submenu_Border" Value="Visible" /-->
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                <DoubleAnimation Storyboard.TargetName="SubmenuHoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                                <DoubleAnimation Storyboard.TargetName="SubmenuHoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <Trigger Property="IsSubmenuOpen" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SubmenuSelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SubmenuSelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                    <!--Setter Property="Background" TargetName="Submenu_Border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" /-->
                                </Trigger>
                                <!--Trigger Property="IsSubmenuOpen" Value="True">
                                    <Setter TargetName="SelectedBackground" Property="Visibility" Value="Visible"/>
                                </Trigger-->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!--SourceName="PART_ButtonBorder" -->
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                                    <Setter Property="Opacity" TargetName="checkedImage" Value="0.5" />
                                    <Setter Property="Opacity" TargetName="textBlock" Value="0.5" />
                                    <Setter Property="Effect" TargetName="iconImage">
                                        <Setter.Value>
                                            <Fluent:GrayscaleEffect />
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Effect" TargetName="checkedImage">
                                        <Setter.Value>
                                            <Fluent:GrayscaleEffect />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
                    <Condition Property="HasItems" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{DynamicResource HeaderMenuItemTemplate}" />
            </MultiTrigger>
            <DataTrigger Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={x:Static converters:IsNullConverter.Instance}}" Value="False">
                <Setter Property="Template" Value="{DynamicResource MenuItemWithDescriptionTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:ContextMenu}" TargetType="{x:Type Fluent:ContextMenu}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Padding" Value="3,3,3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:ContextMenu}">
                    <ControlTemplate.Resources>
                        <!--Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
                        <Style TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" BasedOn="{StaticResource MenuGroupSeparatorStyle}" /-->
                        <Style x:Key="{x:Type Fluent:MenuItem}" TargetType="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource {x:Type Fluent:MenuItem}}">
                            <Setter Property="Margin" Value="0,0,0,-6"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid Margin="4,3,4,5">
                        <Border UseLayoutRounding="True" Effect="{DynamicResource DropShadow}" CornerRadius="3">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <Grid Margin="{TemplateBinding Padding}">
                                <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ScrollViewer x:Name="PART_ScrollViewer" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                                        <!--Style="{DynamicResource MenuScrollViewer}"-->
                                        <StackPanel IsItemsHost="True" Orientation="Vertical" Margin="0,0,0,9" Width="Auto" Height="Auto" x:Name="PART_ItemsHost" HorizontalAlignment="Left" VerticalAlignment="Top" />
                                    </ScrollViewer>
                                    <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                        <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"-->
                                        <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"-->
                                        <Grid>
                                            <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                            <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                        </Grid>
                                    </Border>
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter Property="Cursor" TargetName="PART_ResizeBothThumb" Value="SizeNESW" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Fluent:ApplicationMenu}">
        <!--Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" /-->
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}" />
        <!--Setter Property="Header" Value="{DynamicResource Fluent.Ribbon.Images.ApplicationMenu}" /-->
        <!--Setter Property="ItemContainerStyleSelector" Value="{x:Static styleSelectors:ApplicationMenuItemContainerStyleSelector.Instance}" /-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:ApplicationMenu}">
                    <Grid Margin="0">
                        <ContentControl x:Name="buttonContent">
                            <!--Width="{Binding ActualWidth, ElementName=PART_ButtonBorder}" Height="{Binding ActualHeight, ElementName=PART_ButtonBorder}"-->
                            <Border x:Name="PART_ButtonBorder" MinWidth="60" Background="#01000000">
                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ClipToBounds="True">
                                    <Rectangle x:Name="PopupSizingAid" Fill="#01000000" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,5,4,0"/>
                                    <Border x:Name="ButtonHoverBackground" BorderThickness="0" BorderBrush="Transparent" Margin="0,0,3,-2" IsHitTestVisible="False" Background="{DynamicResource HoverHighlightBrush}" RenderTransformOrigin="0.5,1">
                                        <Border.RenderTransform>
                                            <ScaleTransform ScaleX="1" ScaleY="0"/>
                                        </Border.RenderTransform>
                                        <Border.OpacityMask>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientStop Offset="0" Color="Transparent"/>
                                                <GradientStop Offset="1" Color="#7F000000"/>
                                            </LinearGradientBrush>
                                        </Border.OpacityMask>
                                        <Border.Effect>
                                            <BlurEffect Radius="5"/>
                                        </Border.Effect>
                                    </Border>
                                    <ContentControl x:Name="contentPresenter" FontWeight="Bold" Content="{TemplateBinding Header}" Margin="10,0" VerticalAlignment="Center" HorizontalAlignment="Center" Effect="{DynamicResource DropShadow}"/>
                                    <!--{converters:ObjectToImageConverter {Binding Header, RelativeSource={RelativeSource TemplatedParent}}, '32,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}-->
                                </Grid>
                            </Border>
                        </ContentControl>
                        <Popup x:Name="PART_Popup" Placement="Custom" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" PlacementTarget="{Binding ElementName=buttonContent}" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <!--MaxHeight="{TemplateBinding MaxDropDownHeight}"-->
                            <!--VerticalOffset="{Binding ElementName=buttonContent, Path=ActualHeight}"-->
                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <Grid>
                                        <DockPanel Margin="5,5,14,24" Effect="{DynamicResource SecondaryDropShadow}">
                                            <DockPanel DockPanel.Dock="Top" Height="{Binding Path=ActualHeight, ElementName=PopupSizingAid}">
                                                <Grid Width="{Binding Path=ActualWidth, ElementName=PopupSizingAid}" ClipToBounds="True" DockPanel.Dock="Left">
                                                    <Border BorderBrush="{Binding Background,ElementName=PopupHeaderRightBorder}" BorderThickness="5" CornerRadius="0,0,7,0" Margin="-10,-10,-5,-5"/>
                                                </Grid>
                                                <Border x:Name="PopupHeaderRightBorder" CornerRadius="3,3,0,0">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,10" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                    </Border.Background>
                                                </Border>
                                            </DockPanel>
                                            <Border CornerRadius="3,0,3,3">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,-0.1" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                </Border.Background>
                                            </Border>
                                        </DockPanel>
                                        <DockPanel Margin="7">
                                            <Rectangle DockPanel.Dock="Top" Height="{Binding Path=ActualHeight, ElementName=PopupSizingAid}" Fill="Transparent" Opacity="0" Visibility="Hidden"/>
                                            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" MinHeight="17" />
                                                    </Grid.RowDefinitions>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto" MinWidth="100" />
                                                        <ColumnDefinition Width="*" />
                                                    </Grid.ColumnDefinitions>
                                                    <ScrollViewer Style="{DynamicResource MenuScrollViewer}" Grid.Row="0" Grid.Column="0" IsTabStop="False" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
                                                        <StackPanel Orientation="Vertical" ScrollViewer.VerticalScrollBarVisibility="Auto" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                    </ScrollViewer>
                                                    <Border Grid.Row="0" Grid.Column="1" BorderThickness="1,0,0,0" Width="{TemplateBinding RightPaneWidth}">
                                                        <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}"-->
                                                        <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" IsTabStop="False" Margin="1" SnapsToDevicePixels="True" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
                                                            <ContentPresenter ContentSource="RightPaneContent" x:Name="PART_RightContentPresenter" />
                                                        </ScrollViewer>
                                                    </Border>
                                                    <Border Grid.Row="1" Grid.ColumnSpan="2" BorderThickness="0,1,0,0" Margin="0">
                                                        <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}"-->
                                                        <ContentPresenter ContentSource="FooterPaneContent" />
                                                    </Border>
                                                </Grid>
                                            </Grid>
                                        </DockPanel>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" />
                        </MultiDataTrigger>
                        <Trigger SourceName="buttonContent" Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ButtonHoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ButtonHoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="PART_ButtonBorder" Value="0.5" />
                            <Setter Property="Effect" TargetName="contentPresenter">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:SplitButton}" TargetType="{x:Type Fluent:SplitButton}">
        <!--Setter Property="Height" Value="68" /-->
        <Setter Property="Width" Value="Auto" />
        <!--Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.AutoPlacement" Value="False" />
        <Setter Property="Margin" Value="2,-3,2,-4"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:SplitButton}">
                    <!--ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
                    </ControlTemplate.Resources-->
                    <Grid>
                        <Rectangle x:Name="SizingAidRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="#01000000"/>
                        <Border x:Name="HoverBackground" Opacity="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-4,-2,-4,-6" UseLayoutRounding="True">
                            <!--Margin="-3,-3,-3,-11"-->
                            <Border.Background>
                                <VisualBrush Stretch="None" TileMode="None" AlignmentX="Center" AlignmentY="Center">
                                    <VisualBrush.Visual>
                                        <Grid UseLayoutRounding="True" Background="#01000000" Width="{Binding ActualWidth, Source={x:Reference Name=SizingAidRectangle}}" Height="{Binding ActualHeight, Source={x:Reference Name=SizingAidRectangle}}">
                                            <Border CornerRadius="3" Effect="{DynamicResource TertiaryDropShadow}" Margin="3" UseLayoutRounding="True">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                </Border.Background>
                                            </Border>
                                        </Grid>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Border.Background>
                        </Border>
                        <Border Name="PART_ButtonBorder" Background="#01000000" BorderBrush="Transparent" VerticalAlignment="Stretch">
                            <StackPanel Orientation="Vertical" Name="stackPanel" KeyboardNavigation.TabNavigation="Local">
                                <Grid Margin="0">
                                    <Fluent:ToggleButton x:Name="PART_Button" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" IsEnabled="{TemplateBinding IsButtonEnabled}" ToolTip="{TemplateBinding ToolTip}" GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="{TemplateBinding IsDefinitive}" CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}">
                                        <Fluent:ToggleButton.Style>
                                            <Style TargetType="{x:Type Fluent:ToggleButton}">
                                                <Setter Property="Width" Value="Auto" />
                                                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                <Setter Property="BorderThickness" Value="1" />
                                                <Setter Property="Margin" Value="-10,2,-10,0"/>
                                                <!--Setter Property="Padding" Value="2,6,2,2"/-->
                                                <!--Setter Property="Padding" Value="6,0,6,6"/-->
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                                                            <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Height="Auto">
                                                                <Grid Margin="10,0">
                                                                    <Border x:Name="HoverBackground" CornerRadius="3,3,0,0" Margin="2,1,2,-1" Opacity="0">
                                                                        <Border.Background>
                                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1.5" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                                                        </Border.Background>
                                                                    </Border>
                                                                    <StackPanel x:Name="stackPanel" Width="Auto" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                                                                        <Canvas Width="32" Height="32">
                                                                            <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="0,-1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" SnapsToDevicePixels="True" />
                                                                        </Canvas>
                                                                        <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2,0,2,-2" />
                                                                    </StackPanel>
                                                                </Grid>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="Size" Value="Small">
                                                                    <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                                                                    <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed" />
                                                                    <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                                                                    <Setter Property="Width" TargetName="iconImage" Value="16" />
                                                                    <Setter Property="Height" TargetName="iconImage" Value="16" />
                                                                    <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0" />
                                                                    <Setter Property="Content" TargetName="iconImage" Value="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                                    <Setter Property="Margin" TargetName="controlLabel" Value="2,-2,2,2" />
                                                                </Trigger>
                                                                <Trigger Property="Size" Value="Middle">
                                                                    <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                                                                    <Setter Property="Width" TargetName="stackPanel" Value="Auto" />
                                                                    <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center" />
                                                                    <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                                                                    <Setter Property="Margin" TargetName="controlLabel" Value="2,2,2,2" />
                                                                    <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch" />
                                                                    <Setter Property="Width" TargetName="iconImage" Value="16" />
                                                                    <Setter Property="Height" TargetName="iconImage" Value="16" />
                                                                    <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0" />
                                                                    <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center" />
                                                                    <Setter Property="Content" TargetName="iconImage" Value="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                                </Trigger>
                                                                <Trigger Property="Size" Value="Large">
                                                                    <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed"/>
                                                                </Trigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                                                                    <Setter Property="Opacity" TargetName="controlLabel" Value="0.5" />
                                                                    <Setter Property="Effect" TargetName="iconImage">
                                                                        <Setter.Value>
                                                                            <Fluent:GrayscaleEffect />
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Trigger>
                                                                <MultiTrigger>
                                                                    <MultiTrigger.Conditions>
                                                                        <Condition Property="IsMouseOver" Value="False"/>
                                                                        <Condition Property="IsChecked" Value="False"/>
                                                                    </MultiTrigger.Conditions>
                                                                    <MultiTrigger.EnterActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </MultiTrigger.EnterActions>
                                                                    <MultiTrigger.ExitActions>
                                                                        <BeginStoryboard>
                                                                            <Storyboard>
                                                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                            </Storyboard>
                                                                        </BeginStoryboard>
                                                                    </MultiTrigger.ExitActions>
                                                                </MultiTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Style.Triggers>
                                                    <Trigger Property="Size" Value="Middle">
                                                        <Setter Property="Height" Value="30" />
                                                        <Setter Property="HorizontalAlignment" Value="Left" />
                                                    </Trigger>
                                                    <Trigger Property="Size" Value="Small">
                                                        <Setter Property="Height" Value="30" />
                                                        <Setter Property="Width" Value="30" />
                                                        <Setter Property="HorizontalAlignment" Value="Left" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Fluent:ToggleButton.Style>
                                    </Fluent:ToggleButton>
                                    <!--Style="{DynamicResource InnerButtonStyle}"-->
                                    <!--Header="{TemplateBinding Header}" -->
                                    <!--ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="0,2,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" SnapsToDevicePixels="True" /-->
                                </Grid>
                                <Border BorderThickness="0,0,0,0" Name="downBorder" BorderBrush="Transparent" Background="Transparent" Margin="0,0,0,0">
                                    <Grid>
                                        <Border x:Name="LowerHoverBackground" CornerRadius="0,0,3,3" Margin="3,0,3,2" Opacity="0">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,-1" EndPoint="0,0.75" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                        <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,1,0,2" HasGlyph="{TemplateBinding HasTriangle}" />
                                    </Grid>
                                </Border>
                            </StackPanel>
                        </Border>
                        <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <Grid Name="DropDown" IsEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Top"> <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                        <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}"-->
                                        <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderThickness="1" />
                                        <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"-->
                                        <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                <StackPanel x:Name="PART_MenuPanel" Orientation="Vertical" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                            </ScrollViewer>
                                            <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                                <!--BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"-->
                                                <!--Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}"-->
                                                <Grid>
                                                    <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                    <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                </Grid>
                                            </Border>
                                        </Grid>
                                    </Grid>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <!--Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        </Trigger-->
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Size" TargetName="PART_Button" Value="Small" />
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Width" TargetName="controlLabel" Value="10" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="0,-19,0,0" />
                            <Setter Property="Text" TargetName="controlLabel" Value="" />
                            <Setter Property="Padding" TargetName="downBorder" Value="1,0,0,0" />
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Size" TargetName="PART_Button" Value="Middle" />
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Width" TargetName="controlLabel" Value="10" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="0,-19,0,0" />
                            <Setter Property="Text" TargetName="controlLabel" Value="" />
                            <Setter TargetName="PART_Button" Property="Header" Value="{Binding Header,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Large">
                            <Setter TargetName="PART_Button" Property="Height" Value="42"/>
                        </Trigger>
                        <Trigger Property="IsButtonEnabled" Value="False">
                            <Setter Property="IsEnabled" TargetName="PART_Button" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsEnabled" TargetName="PART_Button" Value="False" />
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsDropDownOpen" Value="False"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="downBorder" Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsDropDownOpen" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="LowerHoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="LowerHoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!--Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="PART_Button" />
                                <Condition Property="IsDropDownOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="downBorder" />
                                <Condition Property="IsDropDownOpen" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="PART_ButtonBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                            <Setter Property="Background" TargetName="downBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="downBorder" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        </MultiTrigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
                <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
                <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22" />
                <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
                <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
                <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="32" />
                <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
                <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
                <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
            </Trigger-->
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="76" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="30" />
                <Setter Property="Width" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:ToggleButton}" TargetType="{x:Type Fluent:ToggleButton}">
        <!--Setter Property="Height" Value="68" /-->
        <Setter Property="Width" Value="Auto" />
        <!--Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" /-->
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2,-3,2,-4"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                    <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Height="Auto">
                        <Grid>
                            <Rectangle x:Name="SizingAidRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="#01000000"/>
                            <Border x:Name="HoverBackground" Opacity="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-4,-2,-4,-6" UseLayoutRounding="True">
                                <Border.Background>
                                    <VisualBrush Stretch="None" TileMode="None" AlignmentX="Center" AlignmentY="Center">
                                        <VisualBrush.Visual>
                                            <Grid UseLayoutRounding="True" Background="#01000000" Width="{Binding ActualWidth, Source={x:Reference Name=SizingAidRectangle}}" Height="{Binding ActualHeight, Source={x:Reference Name=SizingAidRectangle}}">
                                                <Border CornerRadius="3" Effect="{DynamicResource TertiaryDropShadow}" Margin="3" UseLayoutRounding="True">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                                    </Border.Background>
                                                </Border>
                                            </Grid>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Border.Background>
                            </Border>
                            <StackPanel x:Name="stackPanel" Width="Auto" Margin="{TemplateBinding Padding}" Orientation="Vertical">
                                <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="0,2,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource Mode=TemplatedParent}}" SnapsToDevicePixels="True" />
                                <!--Content="{converters:ObjectToImageConverter {Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}, '32,32', {Binding RelativeSource={RelativeSource TemplatedParent}}}"-->
                                <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2 0 2 0" />
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0" />
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <!--Setter Property="Content" TargetName="iconImage" Value="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" /-->
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-2,2,2" />
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal" />
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto" />
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center" />
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False" />
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,2,2,2" />
                            <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch" />
                            <Setter Property="Width" TargetName="iconImage" Value="16" />
                            <Setter Property="Height" TargetName="iconImage" Value="16" />
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0" />
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center" />
                            <Setter Property="Content" TargetName="iconImage" Value="{Binding Icon, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            <!--Setter Property="Content" TargetName="iconImage" Value="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" /-->
                        </Trigger>
                        <!--Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
                        </Trigger-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.5" />
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5" />
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.Background}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.BorderBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="76" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="30" />
                <Setter Property="Width" Value="30" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <!--Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="68" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="22" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger-->
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="TransferToDataTemplate" DataType="{x:Type local:DiskItem}">
        <StackPanel Orientation="Horizontal" Margin="-24,0,0,0">
            <Rectangle Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" VerticalAlignment="Center"/>
            <TextBlock Text="{Binding ItemDisplayName}" Margin="6,0" VerticalAlignment="Center"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="RecentsDataTemplate" DataType="{x:Type local:Location}">
        <StackPanel Orientation="Horizontal" Margin="-24,0,0,0" HorizontalAlignment="Left">
            <Rectangle Width="16" Height="16" Fill="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" VerticalAlignment="Center"/>
            <TextBlock Text="{Binding Name}" Margin="6,0" VerticalAlignment="Center"/>
        </StackPanel>
    </DataTemplate>


    <Style x:Key="{x:Type Fluent:GalleryItem}" TargetType="{x:Type Fluent:GalleryItem}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:GalleryItem}">
                    <Grid Background="Transparent">
                        <!--Border x:Name="hoverBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.MouseOver}" />
                        <Border x:Name="selectedBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Selected}" /-->
                        <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border x:Name="InnerHoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Border>
                        <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=HoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border CornerRadius="{Binding CornerRadius, ElementName=InnerHoverBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Border>
                        <!--ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1" /-->
                        <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" TextBlock.Foreground="{TemplateBinding Foreground}"/>
                        <Border x:Name="pressedBorder" Visibility="Collapsed" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Pressed}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5" />
                        </Trigger>
                        <!--Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="selectedBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="hoverBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="pressedBorder" Value="Visible" />
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Fluent:InRibbonGallery}" TargetType="{x:Type Fluent:InRibbonGallery}" BasedOn="{StaticResource {x:Type Fluent:InRibbonGallery}}">
        <Setter Property="Margin" Value="2,0,3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:InRibbonGallery}">
                    <Grid Width="Auto" Height="Auto" x:Name="PART_LayoutRoot" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <!--Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Border-->
                        <Border x:Name="border" Width="Auto" Height="{TemplateBinding GalleryPanelContainerHeight}" Background="Transparent" BorderThickness="0" BorderBrush="Transparent" ClipToBounds="True" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid Width="Auto" Height="Auto">
                                <Grid>
                                    <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,0,0,3;0,0,0,0'}" Margin="0,0,18,0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1,1,0,1">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,0,0,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <ScrollViewer Margin="2" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Visible" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                        <ScrollViewer.Resources>
                                            <Style TargetType="{x:Type ScrollBar}">
                                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                                <Setter Property="Width" Value="16"/>
                                                <Setter Property="ui:AttachedProperties.CornerCurves" Value="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                <Setter Property="Margin" Value="0,-2"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                            <StackPanel HorizontalAlignment="Stretch">
                                                                <RepeatButton x:Name="upButton" Height="21" Command="ScrollBar.PageUpCommand" Margin="0" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                                                    <RepeatButton.Style>
                                                                        <Style TargetType="{x:Type RepeatButton}">
                                                                            <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
                                                                            <Setter Property="Padding" Value="0"/>
                                                                            <Setter Property="Background">
                                                                                <Setter.Value>
                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,3" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                            <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,3,0,0;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                                                                <Border.Background>
                                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                                                                </Border.Background>
                                                                                                <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,2,0,0;0,0,0,0'}" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                                                            </Border>
                                                                                            <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                                                                <Border.Background>
                                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                                                                </Border.Background>
                                                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                                                                    <Border.Background>
                                                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                                                                    </Border.Background>
                                                                                                </Border>
                                                                                            </Border>
                                                                                            <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                                                                <Border.Background>
                                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                                                                </Border.Background>
                                                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                                                                    <Border.Background>
                                                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                                                                    </Border.Background>
                                                                                                </Border>
                                                                                            </Border>
                                                                                            <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                                                            </Border>
                                                                                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False"/>
                                                                                        </Grid>
                                                                                        <ControlTemplate.Triggers>
                                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                                <Trigger.EnterActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.EnterActions>
                                                                                                <Trigger.ExitActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.ExitActions>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsPressed" Value="True">
                                                                                                <Trigger.EnterActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.EnterActions>
                                                                                                <Trigger.ExitActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.ExitActions>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsEnabled" Value="False">
                                                                                                <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                                                                <Trigger.EnterActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.EnterActions>
                                                                                                <Trigger.ExitActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.ExitActions>
                                                                                            </Trigger>
                                                                                        </ControlTemplate.Triggers>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </RepeatButton.Style>
                                                                    <!--Path RenderOptions.EdgeMode="Aliased" Data="M0,0 L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" Width="5" Height="3" Stretch="Fill" /-->
                                                                    <RepeatButton.Content>
                                                                        <Path Data="M 0 4 L 8 4 L 4 0 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}"/>
                                                                    </RepeatButton.Content>
                                                                </RepeatButton>
                                                                <RepeatButton x:Name="downButton" Height="20" Command="ScrollBar.PageDownCommand" Margin="0">
                                                                    <!--Style="{DynamicResource InRibbonGalleryRepeatButton}"-->
                                                                    <RepeatButton.Style>
                                                                        <Style TargetType="{x:Type RepeatButton}">
                                                                            <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
                                                                            <Setter Property="Padding" Value="0"/>
                                                                            <Setter Property="Background">
                                                                                <Setter.Value>
                                                                                    <LinearGradientBrush StartPoint="0,-1" EndPoint="0,2" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                            <Setter Property="Template">
                                                                                <Setter.Value>
                                                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                                                            <Border x:Name="IdleBackground" CornerRadius="0" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1,0,1,1">
                                                                                                <Border.Background>
                                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                                                                </Border.Background>
                                                                                                <Border x:Name="IdleInnerBackground" CornerRadius="0" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                                                            </Border>
                                                                                            <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1,0,1,1" Opacity="0">
                                                                                                <Border.Background>
                                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                                                                </Border.Background>
                                                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                                                                    <Border.Background>
                                                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                                                                    </Border.Background>
                                                                                                </Border>
                                                                                            </Border>
                                                                                            <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1,0,1,1" Opacity="0">
                                                                                                <Border.Background>
                                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                                                                </Border.Background>
                                                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                                                                    <Border.Background>
                                                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                                                                    </Border.Background>
                                                                                                </Border>
                                                                                            </Border>
                                                                                            <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1,0,1,1" Opacity="0">
                                                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                                                            </Border>
                                                                                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False"/>
                                                                                        </Grid>
                                                                                        <ControlTemplate.Triggers>
                                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                                <Trigger.EnterActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.EnterActions>
                                                                                                <Trigger.ExitActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.ExitActions>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsPressed" Value="True">
                                                                                                <Trigger.EnterActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.EnterActions>
                                                                                                <Trigger.ExitActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.ExitActions>
                                                                                            </Trigger>
                                                                                            <Trigger Property="IsEnabled" Value="False">
                                                                                                <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                                                                <Trigger.EnterActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.EnterActions>
                                                                                                <Trigger.ExitActions>
                                                                                                    <BeginStoryboard>
                                                                                                        <Storyboard>
                                                                                                            <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                                                        </Storyboard>
                                                                                                    </BeginStoryboard>
                                                                                                </Trigger.ExitActions>
                                                                                            </Trigger>
                                                                                        </ControlTemplate.Triggers>
                                                                                    </ControlTemplate>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                        </Style>
                                                                    </RepeatButton.Style>
                                                                    <RepeatButton.Content>
                                                                        <Path Data="M 0 0 L 8 0 L 4 4 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}"/>
                                                                    </RepeatButton.Content>
                                                                    <!--Path RenderOptions.EdgeMode="Aliased" Data="M0,0 L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Width="5" Height="3" Stretch="Fill" /-->
                                                                </RepeatButton>
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ContextMenu" Value="{x:Null}" />
                                            </Style>
                                        </ScrollViewer.Resources>
                                        <Grid>
                                            <ContentControl x:Name="PART_ContentPresenter" Focusable="False">
                                                <Fluent:GalleryPanel x:Name="PART_GalleryPanel" ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent" IsItemsHost="True" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" Orientation="{TemplateBinding Orientation}" Filter="{TemplateBinding SelectedFilterGroups}" GroupBy="{TemplateBinding GroupBy}" GroupByAdvanced="{TemplateBinding GroupByAdvanced}" IsGrouped="False" />
                                            </ContentControl>
                                            <Image x:Name="PART_FakeImage" Stretch="Uniform" Visibility="Collapsed" />
                                        </Grid>
                                    </ScrollViewer>
                                </Grid>
                                <Fluent:ToggleButton IsDefinitive="False" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="16" Height="19" x:Name="PART_ExpandButton" Margin="2,0" ClickMode="Press" CanAddToQuickAccessToolBar="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                    <Fluent:ToggleButton.Style>
                                        <Style TargetType="{x:Type Fluent:ToggleButton}">
                                            <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}" />
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,-2" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
                                                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                                            <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,0,3,0;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1,0,1,1">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                                </Border.Background>
                                                                <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,0,2,0;0,0,0,0'}" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                            </Border>
                                                            <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1,0,1,1" Opacity="0">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                                </Border.Background>
                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1,0,1,1" Opacity="0">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                                </Border.Background>
                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1,0,1,1" Opacity="0">
                                                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                            </Border>
                                                            <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False"/-->
                                                            <Grid x:Name="PART_ButtonBorder" Background="#01000000">
                                                                <ContentPresenter x:Name="iconImage" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True" TextElement.Foreground="{TemplateBinding Foreground}"/>
                                                            </Grid>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Fluent:ToggleButton.Style>
                                    <Fluent:ToggleButton.Icon>
                                        <StackPanel Width="5" Orientation="Vertical" VerticalAlignment="Center">
                                            <Rectangle Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:ToggleButton}}}" Height="1" HorizontalAlignment="Stretch" Margin="0,0,0,3"/>
                                            <Path Width="5" Height="3" Data="M0,0L5,0 2.5,3z" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:ToggleButton}}}" HorizontalAlignment="Stretch"/>
                                        </StackPanel>
                                    </Fluent:ToggleButton.Icon>
                                </Fluent:ToggleButton>
                                <Popup x:Name="PART_Popup" Placement="Custom" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" PlacementTarget="{Binding ElementName=PART_LayoutRoot}" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                                    <!--Popup.Resources>
                                        <ResourceDictionary>
                                            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" />
                                        </ResourceDictionary>
                                    </Popup.Resources-->
                                    <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                        <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_LayoutRoot}" SnapsToDevicePixels="True" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
                                                <Border VerticalAlignment="Stretch" Width="Auto" Height="Auto" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
                                                <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="*" />
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <Rectangle Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" HorizontalAlignment="Left" Margin="24,0,0,0" Width="1" Height="Auto" Grid.RowSpan="2" Visibility="Visible" VerticalAlignment="Stretch" />
                                                    <Grid x:Name="PART_MenuPanel" MinWidth="{Binding MinWidth, ElementName=PART_DropDownBorder}" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*" />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" x:Name="layoutRoot">
                                                            <Grid Width="Auto">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="Auto" />
                                                                    <RowDefinition Height="*" />
                                                                </Grid.RowDefinitions>
                                                                <Border Grid.Row="0" x:Name="border_" BorderBrush="{x:Null}" BorderThickness="0" Height="13" Background="{DynamicResource Fluent.Ribbon.Brushes.Gallery.Header.Background}">
                                                                    <Fluent:DropDownButton x:Name="PART_FilterDropDownButton" Style="{DynamicResource GalleryDropDownButtonStyle}" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top" Header="{TemplateBinding SelectedFilterTitle}" />
                                                                </Border>
                                                                <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" MinHeight="{Binding ActualHeight, ElementName=PART_LayoutRoot}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0,0,0,1" Margin="1">
                                                                    <ContentControl x:Name="PART_PopupContentPresenter" Content="{x:Null}" />
                                                                </ScrollViewer>
                                                            </Grid>
                                                        </Border>
                                                        <ContentPresenter x:Name="menuPresenter" ContentSource="Menu" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="None" VerticalAlignment="Top" />
                                                    </Grid>
                                                    <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" Grid.Row="2" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgroundBrush}">
                                                        <Grid>
                                                            <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                            <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                        </Grid>
                                                    </Border>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                        <Fluent:ToggleButton IsDefinitive="False" Margin="0,0,0,0" Visibility="Collapsed" x:Name="PART_DropDownButton" Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" LargeIcon="{Binding Path=LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" Header="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" Size="{Binding Path=Size, RelativeSource={RelativeSource TemplatedParent}}" SizeDefinition="{Binding Path=SizeDefinition, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource InRibbonGalleryToggleButtonStyle}" HorizontalAlignment="Left" VerticalAlignment="Top" ClickMode="Press" CanAddToQuickAccessToolBar="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasFilter" Value="False">
                            <Setter Property="Visibility" TargetName="border_" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsEnabled" TargetName="PART_DropDownButton" Value="False" />
                            <Setter Property="IsEnabled" TargetName="PART_ExpandButton" Value="False" />
                        </Trigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" TargetName="border" Value="Collapsed" />
                            <Setter Property="Placement" TargetName="PART_Popup" Value="Bottom" />
                            <Setter Property="Visibility" TargetName="PART_DropDownButton" Value="Visible" />
                            <Setter Property="VerticalAlignment" TargetName="PART_LayoutRoot" Value="Top" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_LayoutRoot" Value="Left" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Menu" Value="{x:Null}">
                            <Setter Property="BorderThickness" TargetName="PART_ScrollViewer" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Name" Value="ShareWithGallery">
                <Setter Property="ItemWidth" Value="110"/>
                <Setter Property="ItemHeight" Value="20"/>
                <Setter Property="MinItemsInRow" Value="1"/>
                <Setter Property="MaxItemsInRow" Value="1"/>
                <Setter Property="MinItemsInDropDownRow" Value="1"/>
                <Setter Property="MaxItemsInDropDownRow" Value="1"/>
                <!--MinItemsInRow="1" MaxItemsInRow="1" MinItemsInDropDownRow="1" MaxItemsInDropDownRow="1"-->
            </Trigger>
            <Trigger Property="Name" Value="FolderViewsGallery">
                <Setter Property="ItemWidth" Value="110"/>
                <Setter Property="ItemHeight" Value="20"/>
                <Setter Property="MinItemsInRow" Value="2"/>
                <Setter Property="MaxItemsInRow" Value="3"/>
                <Setter Property="MinItemsInDropDownRow" Value="3"/>
                <Setter Property="MaxItemsInDropDownRow" Value="3"/>
                <!--MinItemsInRow="2" MaxItemsInRow="3" MinItemsInDropDownRow="3" MaxItemsInDropDownRow="3" -->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Fluent:CheckBox}" TargetType="{x:Type Fluent:CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="MinHeight" Value="13" />
        <Setter Property="ToolTipService.ShowDuration" Value="30000" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="MinWidth" Value="132" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:CheckBox}">
                    <!--Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="16" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                            <Border x:Name="border" Width="13" Height="13" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <Path x:Name="CheckIcon" Width="7.5" Height="6.9" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883" Fluent:FrameworkHelper.UseLayoutRounding="False" Opacity="0" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" StrokeThickness="1.5" />
                                    <Rectangle x:Name="IndeterminateIcon" Width="7" Height="7" Opacity="0" Fill="{DynamicResource GrayBrush2}" />
                                    <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}" Opacity="0" RadiusX="1" RadiusY="1" />
                                </Grid>
                            </Border>
                        </Grid>
                        <ContentControl Grid.Column="1" IsTabStop="False" Margin="2,0,0,0" Foreground="{TemplateBinding Foreground}">
                            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
                        </ContentControl>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
                            <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                            <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
                            <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                            <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".55" />
                            <Setter TargetName="DisabledVisualElement" Property="Opacity" Value=".55" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter TargetName="CheckIcon" Property="LayoutTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers-->
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000">
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <Grid Width="13" Height="13" DockPanel.Dock="Left">
                                <Border x:Name="IdleBackground" CornerRadius="3" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Border CornerRadius="3" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
                                        </Border.Background>
                                    </Border>
                                </Border>
                                <Border x:Name="HoverBackground" CornerRadius="3" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Border CornerRadius="3" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                        </Border.Background>
                                    </Border>
                                </Border>
                                <Border x:Name="PressedBackground" CornerRadius="3" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Border CornerRadius="3" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                        </Border.Background>
                                    </Border>
                                </Border>
                                <Border x:Name="DisabledBackground" CornerRadius="3" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                    <Border CornerRadius="3" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                </Border>
                                <Grid x:Name="OpacityLimiterCanvas" Opacity="1">
                                    <Path x:Name="CheckMark" Data="M 2 5 L 4 9 L 8 0" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource CheckBoxTickBrush}" StrokeThickness="1.125"
                              Opacity="0" />
                                    <Path x:Name="IndeterminateBox" Data="M 0.5 0.5 L 0.5 6 L 6 6 L 6 0.5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource CheckBoxTickBrush}" Stroke="{DynamicResource CheckBoxTickBrush}" StrokeThickness="1.25" Opacity="0" />
                                </Grid>
                            </Grid>
                            <Grid Margin="5,0,0,0">
                                <ContentPresenter Content="{TemplateBinding Header}"/>
                            </Grid>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsThreeState" Value="True" />
                                <Condition Property="IsChecked" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateBox" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateBox" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="OpacityLimiterCanvas" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="OpacityLimiterCanvas" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Ribbon Control Styles-->

    <!--#region Main Ribbon Icons-->

    <DropShadowEffect x:Key="IconOuterShadow" Color="Black" Direction="270" ShadowDepth="3" BlurRadius="12.5" Opacity="0.375" />
    <DropShadowEffect x:Key="IconStrongOuterShadow" Color="Black" Direction="270" ShadowDepth="3" BlurRadius="12.5" Opacity="0.625" />
    <DropShadowEffect x:Key="IconInnerShadow" Color="Black" Direction="270" ShadowDepth="3" BlurRadius="12.5" Opacity="0.625" />
    
    <LinearGradientBrush x:Key="IconPrimaryFillBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
    <LinearGradientBrush x:Key="IconSecondaryFillBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops2}"/>
    <LinearGradientBrush x:Key="IconTertiaryFillBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops3}"/>
    <LinearGradientBrush x:Key="IconForegroundBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource LightIconGradientStops}"/>

    <LinearGradientBrush x:Key="IconRedForegroundBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource RedIconGradientStops}"/>
    <LinearGradientBrush x:Key="IconGreenForegroundBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource GreenIconGradientStops}"/>

    <Grid x:Key="CopyButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#01000000">
        <Grid Width="30" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="#01000000">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
        </Grid>
    </Grid>

    <Grid x:Key="CopyButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="15" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="#01000000">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 7 0 L 9 2 L 9 12 L 0 12 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 2 L 2 2 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 7 0 L 9 2 L 9 12 L 0 12 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 2 L 2 2 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
        </Grid>
    </Grid>

    <Grid x:Key="PasteButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="24" Height="28" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border Background="{DynamicResource IconForegroundBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="3" CornerRadius="1" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 6 L 7 0 L 14 6 Z" HorizontalAlignment="Center" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" Margin="0,-6" Effect="{DynamicResource IconInnerShadow}"/>
            </Border>
        </Grid>
    </Grid>

    <Grid x:Key="PasteButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="12" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border Background="{DynamicResource IconForegroundBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1.5" CornerRadius="1" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 2 L 3 0 L 7 2 Z" HorizontalAlignment="Center" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" Margin="0,-2" Effect="{DynamicResource IconInnerShadow}"/>
            </Border>
        </Grid>
    </Grid>

    <Grid x:Key="CutButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconStrongOuterShadow}">
        <Canvas Effect="{DynamicResource IconStrongOuterShadow}">
            <Canvas.RenderTransform>
                <TransformGroup>
                    <ScaleTransform ScaleX="3.875" ScaleY="{Binding ScaleX,RelativeSource={RelativeSource Mode=Self}}"/>
                    <TranslateTransform X="0" Y="0"/>
                </TransformGroup>
            </Canvas.RenderTransform>
            <Path StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Fill="{DynamicResource IconPrimaryFillBrush}" Width="16" Height="16">
                <Path.Data>
                    <PathGeometry Figures="m 1.4708861 -0.00001 c 0 0 -0.2464724 0.49366 -0.1644 0.69142 l 0.670614 1.61589 c 0 0 0.189067 0.85221 0.395972 1.26078 0.288377 0.56945 1.124315 0.96138 1.1649 0.37407 0.07374 -1.06707 -1.184756 -1.78836 -1.184756 -1.78836 z m 0.960677 2.58553 c 0.59033 0.16408 1.17456 1.4012 0.751955 1.3918 -0.531087 -0.0118 -1.057042 -1.47661 -0.751955 -1.3918 z" FillRule="NonZero"/>
                </Path.Data>
            </Path>
            <Path StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat" Fill="{DynamicResource IconPrimaryFillBrush}" Width="16" Height="16">
                <Path.Data>
                    <PathGeometry Figures="m 2.7622621 -0.00001 c 0 0 0.2464724 0.49366 0.1644 0.69142 l -0.670613 1.61589 c 0 0 -0.189067 0.85221 -0.395973 1.26078 -0.288377 0.56945 -1.12431503 0.96138 -1.16490003 0.37407 -0.07374 -1.06707 1.18475603 -1.78836 1.18475603 -1.78836 z m -0.960677 2.58553 c -0.59033 0.16408 -1.17456003 1.4012 -0.751955 1.3918 0.531088 -0.0118 1.057042 -1.47661 0.751955 -1.3918 z" FillRule="NonZero"/>
                </Path.Data>
            </Path>
        </Canvas>
    </Grid>

    <Grid x:Key="CopyPathButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Border Height="12" VerticalAlignment="Center" Background="{DynamicResource IconPrimaryFillBrush}" BorderThickness="0" CornerRadius="1" Effect="{DynamicResource IconStrongOuterShadow}">
            <TextBlock Foreground="{DynamicResource IconForegroundBrush}" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Stretch" FontSize="7" Text="\\..."/>
        </Border>
    </Grid>

    <Grid x:Key="PasteShortcutButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Background="#01000000">
        <Border Width="14" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="{DynamicResource IconPrimaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="2" CornerRadius="1" Effect="{DynamicResource IconStrongOuterShadow}">
            <Grid>
                <Path Data="M 0 2 L 2 0 L 4 2 Z" HorizontalAlignment="Center" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="0,-2" Effect="{DynamicResource IconInnerShadow}"/>
                <Canvas Width="8" Height="8" Background="{DynamicResource IconForegroundBrush}" Margin="-2,0,1,0">
                    <Canvas.OpacityMask>
                        <VisualBrush>
                            <VisualBrush.Visual>
                                <Grid Width="8" Height="8" Background="#01000000">
                                    <Path Data="M 0 0 L 4 0 L 4 4 Z" Fill="Black" Stroke="Black" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Top"/>
                                    <Path Data="M 8 0 L 4 4 L 4 8 L 4 4 Z" Fill="Black" Stroke="Black" StrokeThickness="1"/>
                                </Grid>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Canvas.OpacityMask>
                </Canvas>
            </Grid>
        </Border>
    </Grid>

    <Grid x:Key="MoveToButtonLargeIcon" x:Shared="False" Width="30" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path Data="M 0 0 L 20 4 L 20 18 L 22 20 L 22 28 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
            <Path Data="M 0 0 L 7 5 L 8 32 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
        <Path Data="M 0 8 L 8 0 L 8 5 L 16 5 L 16 11 L 8 11 L 8 16 Z" Fill="{DynamicResource IconTertiaryFillBrush}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Center" Effect="{DynamicResource IconInnerShadow}"/>
    </Grid>

    <Grid x:Key="CopyToButtonLargeIcon" x:Shared="False" Width="30" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path Data="M 0 0 L 20 4 L 20 18 L 22 20 L 22 28 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
            <Path Data="M 0 0 L 7 5 L 8 32 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
        <Grid Width="30" Height="32" HorizontalAlignment="Right" VerticalAlignment="Center" RenderTransformOrigin="1,0.5" Effect="{DynamicResource IconInnerShadow}">
            <Grid.RenderTransform>
                <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
            </Grid.RenderTransform>
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" Effect="{DynamicResource IconStrongOuterShadow}"/>
            </Grid>
            <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom" Effect="{DynamicResource IconInnerShadow}">
                <Path Data="M 0 0 L 13 0 L 18 5 L 18 22 L 0 22 Z" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" Effect="{DynamicResource IconStrongOuterShadow}"/>
            </Grid>
        </Grid>
    </Grid>

    <!--Grid x:Key="DeleteButtonLargeIcon" x:Shared="False" Width="28" Height="28" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{DynamicResource IconRedForegroundBrush}" Effect="{DynamicResource IconOuterShadow}"-->
    <Grid x:Key="DeleteButtonLargeIcon" x:Shared="False" Width="32" Height="32">
        <Path Data="M 0 0 L 24 24 M 0 24 L 24 0" UseLayoutRounding="True" StrokeThickness="4" Stroke="{DynamicResource IconRedForegroundBrush}" Effect="{DynamicResource IconOuterShadow}"  HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>

    <Grid x:Key="RenameButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Border Height="12" BorderBrush="{DynamicResource IconPrimaryFillBrush}" Background="{DynamicResource IconForegroundBrush}" BorderThickness="3,3,13,3" CornerRadius="0" Effect="{DynamicResource IconOuterShadow}"/>
        <Canvas Width="12" Height="24" Background="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Right" Margin="3,0" Effect="{DynamicResource IconInnerShadow}">
            <Canvas.OpacityMask>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Border Width="12" Height="24" Background="Transparent" BorderBrush="Black" BorderThickness="0,2">
                            <Canvas Width="2" Background="Black"/>
                        </Border>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Canvas.OpacityMask>
        </Canvas>
    </Grid>

    <Grid x:Key="ComputerRenameButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Border Height="12" BorderBrush="{DynamicResource IconPrimaryFillBrush}" Background="{DynamicResource IconForegroundBrush}" BorderThickness="3,3,13,3" CornerRadius="0" Effect="{DynamicResource IconOuterShadow}"/>
        <Canvas Width="12" Height="24" Background="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Right" Margin="3,0" Effect="{DynamicResource IconInnerShadow}">
            <Canvas.OpacityMask>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Border Width="12" Height="24" Background="Transparent" BorderBrush="Black" BorderThickness="0,2">
                            <Canvas Width="2" Background="Black"/>
                        </Border>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Canvas.OpacityMask>
        </Canvas>
    </Grid>

    <Grid x:Key="NewFolderButtonLargeIcon" x:Shared="False" Width="30" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <Path Data="M 0 0 L 20 4 L 20 18 L 22 20 L 22 28 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
            <Path Data="M 0 0 L 7 5 L 8 32 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconGreenForegroundBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
    </Grid>

    <Grid x:Key="NewItemButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid>
            <Border HorizontalAlignment="Left" VerticalAlignment="Top" Width="12" Height="10" Background="{DynamicResource IconPrimaryFillBrush}" BorderBrush="{DynamicResource IconTertiaryFillBrush}" BorderThickness="0,3,0,0" CornerRadius="2" Effect="{DynamicResource IconOuterShadow}"/>
            <Border HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="10" Height="12" Background="{DynamicResource IconGreenForegroundBrush}" BorderThickness="0" CornerRadius="0,3,0,0" Effect="{DynamicResource IconOuterShadow}"/>
        </Grid>
    </Grid>

    <Grid x:Key="EasyAccessButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Canvas UseLayoutRounding="True" Effect="{DynamicResource IconOuterShadow}">
            <Border HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="13" Height="16" Background="{DynamicResource IconSecondaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="0" CornerRadius="0,3,0,0" Canvas.Left="3"/>
            <Rectangle Fill="{DynamicResource IconForegroundBrush}" Width="6" Height="1" Canvas.Top="3" Canvas.Left="4"/>
            <Rectangle Fill="{DynamicResource IconForegroundBrush}" Width="6" Height="1" Canvas.Top="5" Canvas.Left="2"/>
            <Rectangle Fill="{DynamicResource IconForegroundBrush}" Width="6" Height="1" Canvas.Top="7" Canvas.Left="0"/>
        </Canvas>
    </Grid>

    <Grid x:Key="PropertiesButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="30" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="#01000000">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 15 0 L 20 5 L 20 24 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Path Data="M 0 11 L 2 9 L 7 13 L 15 0 L 17 2 L 8 18 Z" Fill="{DynamicResource SelectedHighlightBrush}" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True" Margin="4,8,-4,-8"/>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerPropertiesButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="30" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="#01000000">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 15 0 L 20 5 L 20 24 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Path Data="M 0 11 L 2 9 L 7 13 L 15 0 L 17 2 L 8 18 Z" Fill="{DynamicResource SelectedHighlightBrush}" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True" Margin="4,8,-4,-8"/>
        </Grid>
    </Grid>

    <Grid x:Key="EditButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Canvas UseLayoutRounding="True" Effect="{DynamicResource IconOuterShadow}">
            <Border HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="13" Height="16" Background="{DynamicResource IconSecondaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="0" CornerRadius="0,3,0,0" Canvas.Left="2"/>
            <!--Rectangle Fill="{DynamicResource IconForegroundBrush}" Width="6" Height="1" Canvas.Top="3" Canvas.Left="4"/>
            <Rectangle Fill="{DynamicResource IconForegroundBrush}" Width="6" Height="1" Canvas.Top="5" Canvas.Left="2"/>
            <Rectangle Fill="{DynamicResource IconForegroundBrush}" Width="6" Height="1" Canvas.Top="7" Canvas.Left="0"/-->
            <Path Data="M 8 0 L 0 8 L 0 9 L 1 9 L 9 1 Z" Fill="{DynamicResource IconForegroundBrush}" Canvas.Left="6" Canvas.Top="4"/>
        </Canvas>
    </Grid>

    <Grid x:Key="HistoryButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid>
            <!--Border HorizontalAlignment="Left" VerticalAlignment="Top" Width="12" Height="10" Background="{DynamicResource IconPrimaryFillBrush}" BorderBrush="{DynamicResource IconTertiaryFillBrush}" BorderThickness="0,3,0,0" CornerRadius="2" Effect="{DynamicResource IconOuterShadow}"/-->
            <Border HorizontalAlignment="Left" VerticalAlignment="Top" Width="10" Height="12" Background="{DynamicResource IconSecondaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="0" CornerRadius="0,3,0,0" Effect="{DynamicResource IconOuterShadow}"/>
            <Grid HorizontalAlignment="Right" VerticalAlignment="Bottom">
                <Ellipse Width="12" Height="12" Fill="{DynamicResource IconTertiaryFillBrush}" Stroke="{DynamicResource IconPrimaryFillBrush}" StrokeThickness="1"/>
                <Border Width="4" Height="3" BorderBrush="{DynamicResource IconForegroundBrush}" BorderThickness="1,0,0,1" Margin="0,3,2,0" HorizontalAlignment="Right" VerticalAlignment="Top"/>
            </Grid>
        </Grid>
    </Grid>

    <Grid x:Key="SelectAllButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}">
        <UniformGrid Rows="2" Columns="2">
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1"/>
        </UniformGrid>
    </Grid>

    <Grid x:Key="SelectNoneButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}">
        <UniformGrid Rows="2" Columns="2">
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="Transparent" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="Transparent" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="Transparent" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="Transparent" BorderThickness="1"/>
        </UniformGrid>
    </Grid>

    <Grid x:Key="InvertSelectionButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}">
        <UniformGrid Rows="2" Columns="2">
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="Transparent" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1"/>
            <Border Background="{DynamicResource IconTertiaryFillBrush}" BorderBrush="Transparent" BorderThickness="1"/>
        </UniformGrid>
    </Grid>

    <Grid x:Key="ComputerOpenButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="30" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="#01000000">
            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}">
                <Path Data="M 0 0 L 15 0 L 20 5 L 20 24 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Path Data="M 8 0 L 0 8 L 5 8 L 5 16 L 11 16 L 11 8 L 16 8 Z" Fill="{DynamicResource SelectedHighlightBrush}" Effect="{DynamicResource IconOuterShadow}" UseLayoutRounding="True" Margin="4,8,-4,-8"/>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerAccessMediaButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="6" Height="14" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5" Effect="{DynamicResource IconOuterShadow}">
            <Rectangle Width="1" HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="0,0,0,1.5" Fill="{DynamicResource IconTertiaryFillBrush}"/>
            <Ellipse Height="4" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource IconTertiaryFillBrush}"/>
        </Grid>
        <Path Data="M 1.414 4.338 A 8,8 90 0 1 12.73,4.338 L 14.145 2.922 A 10,10 90 0 0 0,2.924 Z
                      M 4.242 7.166 A 4,4 90 0 1 9.9,7.166 L 11.316 5.752 A 6,6 90 0 0 2.828,5.752 Z
                      M 7.072 9.996 L 8.486 8.582 A 2,2 90 0 0 5.658,8.582 Z" HorizontalAlignment="Right" VerticalAlignment="Top" Fill="{DynamicResource IconTertiaryFillBrush}" StrokeThickness="0" Effect="{DynamicResource IconOuterShadow}"/>
        <Grid Height="18" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Effect="{DynamicResource IconOuterShadow}" Margin="0,0,2,0">
            <Rectangle Width="2" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{DynamicResource IconPrimaryFillBrush}" Margin="0,0,4,8"/>
            <Grid Height="8" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="{DynamicResource IconSecondaryFillBrush}">
                <StackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Height="2" Margin="4,0" Orientation="Horizontal">
                    <Ellipse Width="2" Fill="{DynamicResource SelectedHighlightBrush}" Margin="0,0,3,0"/>
                    <Ellipse Width="2" Fill="{DynamicResource SelectedHighlightBrush}" Margin="0,0,3,0"/>
                </StackPanel>
                <Border HorizontalAlignment="Right" VerticalAlignment="Center" Height="2" Margin="4,0" Width="6" CornerRadius="1" Background="{DynamicResource IconForegroundBrush}"/>
            </Grid>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerMapNetworkDriveButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="26" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="{DynamicResource IconPrimaryFillBrush}" Effect="{DynamicResource IconOuterShadow}">
            <Grid Height="26" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Ellipse Fill="{DynamicResource IconSecondaryFillBrush}" Margin="2"/>
                <Path Data="M 1.414 4.338 A 8,8 90 0 1 12.73,4.338 L 14.145 2.922 A 10,10 90 0 0 0,2.924 Z
                      M 4.242 7.166 A 4,4 90 0 1 9.9,7.166 L 11.316 5.752 A 6,6 90 0 0 2.828,5.752 Z
                      M 7.072 9.996 L 8.486 8.582 A 2,2 90 0 0 5.658,8.582 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource IconForegroundBrush}" StrokeThickness="0"/>
                <Path Data="M 0 12 L 15 0 L 3 15 Z" HorizontalAlignment="Left" VerticalAlignment="Bottom" Fill="{DynamicResource IconForegroundBrush}" Effect="{DynamicResource IconInnerShadow}"/>
            </Grid>
            <Rectangle Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Margin="2" Fill="{DynamicResource IconTertiaryFillBrush}"/>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerAddNetworkLocationButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Border Width="22" HorizontalAlignment="Right" VerticalAlignment="Stretch" Effect="{DynamicResource IconOuterShadow}">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5">
                <Grid.RenderTransform>
                    <ScaleTransform ScaleX="0.875" ScaleY="0.875"/>
                </Grid.RenderTransform>
                <Rectangle VerticalAlignment="Stretch" Width="4" Margin="0,18,0,2" Fill="{DynamicResource IconPrimaryFillBrush}"/>
                <Rectangle Height="4" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource IconSecondaryFillBrush}" StrokeThickness="0"/>
                <Rectangle Height="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource IconTertiaryFillBrush}" StrokeThickness="2" Stroke="{DynamicResource IconSecondaryFillBrush}"/>
            </Grid>
        </Border>
        <Grid Width="22" HorizontalAlignment="Left" VerticalAlignment="Stretch" Effect="{DynamicResource IconOuterShadow}">
            <Rectangle VerticalAlignment="Stretch" Width="4" Margin="0,18,0,2" Fill="{DynamicResource IconPrimaryFillBrush}"/>
            <Rectangle Height="4" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource IconSecondaryFillBrush}" StrokeThickness="0"/>
            <Border Height="20" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource IconTertiaryFillBrush}" BorderThickness="2" BorderBrush="{DynamicResource IconSecondaryFillBrush}">
                <Path Data="M 1.414 4.338 A 8,8 90 0 1 12.73,4.338 L 14.145 2.922 A 10,10 90 0 0 0,2.924 Z
                      M 4.242 7.166 A 4,4 90 0 1 9.9,7.166 L 11.316 5.752 A 6,6 90 0 0 2.828,5.752 Z
                      M 7.072 9.996 L 8.486 8.582 A 2,2 90 0 0 5.658,8.582 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource IconForegroundBrush}" StrokeThickness="0" Effect="{DynamicResource IconInnerShadow}"/>
            </Border>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerOpenControlPanelButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}">
        <Grid Height="30" HorizontalAlignment="Stretch" VerticalAlignment="Center">
            <Rectangle Width="16" Height="6" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource IconPrimaryFillBrush}" StrokeThickness="0"/>
            <Border Height="26" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource IconTertiaryFillBrush}" BorderThickness="2" BorderBrush="{DynamicResource IconSecondaryFillBrush}">
                <DockPanel Margin="4" Effect="{DynamicResource IconInnerShadow}">
                    <Ellipse Width="10" Height="{Binding ActualWidth, RelativeSource={RelativeSource Mode=Self}}" VerticalAlignment="Center" Stroke="{DynamicResource IconForegroundBrush}" Fill="{DynamicResource SelectedHighlightBrush}" StrokeThickness="2" Margin="0,0,2,0" DockPanel.Dock="Left"/>
                    <UniformGrid Columns="1" Margin="0,2">
                        <Border BorderBrush="{DynamicResource IconForegroundBrush}" BorderThickness="1" Height="4">
                            <Rectangle Width="5" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{DynamicResource SelectedHighlightBrush}"/>
                        </Border>
                        <Border BorderBrush="{DynamicResource IconForegroundBrush}" BorderThickness="1" Height="4">
                            <Rectangle Width="2" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{DynamicResource SelectedHighlightBrush}"/>
                        </Border>
                    </UniformGrid>
                </DockPanel>
            </Border>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerOpenSettingsButtonLargeIcon" x:Shared="False" Width="32" Height="32" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}">
        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 11.96875 -0.001953125 L 7.390625 1.9980469 L 9.109375 5.9394531 C 7.8460921 6.7902446 6.7532639 7.8746698 5.8847656 9.125 L 1.8320312 7.5332031 L 0.009765625 12.191406 L 3.9394531 13.730469 C 3.795908 14.474032 3.7148438 15.23954 3.7148438 16.023438 C 3.7148438 16.80601 3.7963812 17.570113 3.9394531 18.3125 L 0.001953125 20.03125 L 2.0019531 24.607422 L 5.8808594 22.916016 C 6.7529657 24.173039 7.8523621 25.261833 9.1230469 26.115234 L 7.5390625 30.166016 L 12.189453 31.990234 L 13.759766 27.976562 C 14.445199 28.097761 15.14636 28.173828 15.865234 28.173828 C 16.682401 28.173828 17.480884 28.089266 18.253906 27.933594 L 20.029297 31.998047 L 24.613281 29.998047 L 22.839844 25.947266 C 24.049179 25.093279 25.103108 24.031367 25.933594 22.804688 L 30.164062 24.460938 L 31.988281 19.810547 L 27.8125 18.173828 C 27.938876 17.474431 28.015625 16.757858 28.015625 16.023438 C 28.015625 15.263896 27.935745 14.522656 27.800781 13.800781 L 32.001953 11.970703 L 30.001953 7.3867188 L 25.890625 9.1835938 C 25.057524 7.9686527 24.007145 6.9150154 22.800781 6.0703125 L 24.464844 1.8359375 L 19.806641 0.01171875 L 18.203125 4.1054688 C 17.445689 3.9562805 16.664771 3.8730469 15.865234 3.8730469 C 15.140959 3.8730469 14.434431 3.9492798 13.744141 4.0722656 L 11.96875 -0.001953125 z M 15.865234 8.4277344 C 20.086589 8.4277344 23.460938 11.80197 23.460938 16.023438 C 23.460938 20.244905 20.086589 23.619141 15.865234 23.619141 C 11.64388 23.619141 8.2695312 20.244905 8.2695312 16.023438 C 8.2695312 11.80197 11.64388 8.4277344 15.865234 8.4277344 z" Fill="{DynamicResource IconSecondaryFillBrush}" StrokeThickness="0"/>
    </Grid>

    <Grid x:Key="UninstallOrChangeProgramIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="12" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}">
            <Rectangle Height="12" HorizontalAlignment="Stretch" VerticalAlignment="Center" Fill="{DynamicResource IconPrimaryFillBrush}"/>
            <Ellipse Width="8" Height="8" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource IconTertiaryFillBrush}"/>
            <Path Data="M 0 2 L 5 0 L 5 16 L 0 14 Z" HorizontalAlignment="Left" VerticalAlignment="Center" Fill="{DynamicResource IconTertiaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerSystemPropertiesButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="11" HorizontalAlignment="Center" VerticalAlignment="Stretch" Effect="{DynamicResource IconOuterShadow}">
            <Rectangle VerticalAlignment="Stretch" Width="4" Margin="0,9,0,1" Fill="{DynamicResource IconPrimaryFillBrush}"/>
            <Rectangle Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource IconSecondaryFillBrush}" StrokeThickness="0"/>
            <Border Height="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource IconTertiaryFillBrush}" BorderThickness="1" BorderBrush="{DynamicResource IconSecondaryFillBrush}">
                <Path Data="M 0 2 L 2 4 L 6 0" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource SelectedHighlightBrush}" StrokeThickness="1">
                    <Path.RenderTransform>
                        <TranslateTransform X="0.5" Y="1"/>
                    </Path.RenderTransform>
                </Path>
            </Border>
        </Grid>
    </Grid>

    <Grid x:Key="ComputerManageSystemButtonIcon" x:Shared="False" Width="16" Height="16" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Grid Width="11" HorizontalAlignment="Center" VerticalAlignment="Stretch" Effect="{DynamicResource IconOuterShadow}">
            <Rectangle VerticalAlignment="Stretch" Width="4" Margin="0,9,0,1" Fill="{DynamicResource IconPrimaryFillBrush}"/>
            <Rectangle Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Fill="{DynamicResource IconSecondaryFillBrush}" StrokeThickness="0"/>
            <Rectangle Height="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource IconTertiaryFillBrush}" StrokeThickness="1" Stroke="{DynamicResource IconSecondaryFillBrush}"/>
        </Grid>
        <Grid Width="10" Height="10" HorizontalAlignment="Left" VerticalAlignment="Bottom" Effect="{DynamicResource IconOuterShadow}">
            <Border Width="5" Height="3" VerticalAlignment="Top" BorderBrush="{DynamicResource IconPrimaryFillBrush}" BorderThickness="1,1,1,0"/>
            <Border Height="7" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" BorderThickness="1" BorderBrush="{DynamicResource IconPrimaryFillBrush}" Background="{DynamicResource IconSecondaryFillBrush}">
                <Rectangle Height="2" Fill="{DynamicResource IconTertiaryFillBrush}"/>
            </Border>
        </Grid>
    </Grid>

    <!--#endregion Main Ribbon Icons-->


    <!--#region Ribbon ApplicationMenu Icons-->

    <Grid x:Key="NewWindowMenuItemIcon" x:Shared="False" Width="30" Height="25" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}" Margin="1,3,1,4">
        <Border BorderBrush="{DynamicResource WindowBorderBrush}" BorderThickness="1" CornerRadius="2">
            <Border.Background>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource WindowBackgroundGradientStops}"/>
            </Border.Background>
            <DockPanel>
                <Border BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="1" CornerRadius="1,1,0,0" Height="6" DockPanel.Dock="Top">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                    </Border.Background>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Height="1">
                        <Rectangle Fill="{DynamicResource TitlebarIdleForegroundBrush}" Width="1" Margin="1,0,0,0"/>
                        <Rectangle Fill="{DynamicResource TitlebarIdleForegroundBrush}" Width="1" Margin="1,0,0,0"/>
                        <Rectangle Fill="{DynamicResource TitlebarIdleForegroundBrush}" Width="1" Margin="1,0,0,0"/>
                    </StackPanel>
                </Border>
                <Grid>
                    <Rectangle Margin="5,0" Fill="{DynamicResource HorizontalPanelBorderBrush}" Width="1" HorizontalAlignment="Left" VerticalAlignment="Stretch"/>
                    <Rectangle Margin="7,0" Fill="{DynamicResource HorizontalPanelBorderBrush}" Width="1" HorizontalAlignment="Right" VerticalAlignment="Stretch"/>
                </Grid>
            </DockPanel>
        </Border>
    </Grid>

    <Grid x:Key="CommandPromptMenuItemIcon" x:Shared="False" Width="30" Height="25" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource IconOuterShadow}" Margin="1,3,1,4">
        <Border Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource WindowBorderBrush}" BorderThickness="1" CornerRadius="2">
            <DockPanel>
                <Border BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="1" CornerRadius="1,1,0,0" Height="6" DockPanel.Dock="Top">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                    </Border.Background>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Height="1">
                        <Rectangle Fill="{DynamicResource TitlebarIdleForegroundBrush}" Width="1" Margin="1,0,0,0"/>
                        <Rectangle Fill="{DynamicResource TitlebarIdleForegroundBrush}" Width="1" Margin="1,0,0,0"/>
                        <Rectangle Fill="{DynamicResource TitlebarIdleForegroundBrush}" Width="1" Margin="1,0,0,0"/>
                    </StackPanel>
                </Border>
                <Grid Background="Black">
                    <TextBlock Text="C:\&gt;" FontSize="8" Foreground="White" HorizontalAlignment="Left" TextAlignment="Left" VerticalAlignment="Top" Margin="1"/>
                </Grid>
            </DockPanel>
        </Border>
    </Grid>

    <Grid x:Key="PowerShellMenuItemIcon" x:Shared="False" Width="30" Height="22" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,5">
        <Rectangle Width="10" HorizontalAlignment="Left" VerticalAlignment="Stretch" Margin="0,2">
            <Rectangle.Effect>
                <BlurEffect Radius="2"/>
            </Rectangle.Effect>
            <Rectangle.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
            </Rectangle.Fill>
            <Rectangle.OpacityMask>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Offset="0" Color="Transparent"/>
                    <GradientStop Offset="1" Color="Black"/>
                </LinearGradientBrush>
            </Rectangle.OpacityMask>
        </Rectangle>
        <Grid Margin="5,0,0,0" UseLayoutRounding="True" Effect="{DynamicResource IconOuterShadow}">
            <Border BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="1" CornerRadius="2" RenderTransformOrigin="0.5,0.5">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                </Border.Background>
                <Border.RenderTransform>
                    <SkewTransform AngleX="-11.25"/>
                </Border.RenderTransform>
            </Border>
            <TextBlock Text="&gt;_" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center" TextAlignment="Center" VerticalAlignment="Center" Margin="1"/>
        </Grid>
    </Grid>

    <Grid x:Key="DeleteHistoryMenuItemIcon" x:Shared="False" Width="28" Height="28" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2" UseLayoutRounding="True" Effect="{DynamicResource IconOuterShadow}">
        <Ellipse Fill="{DynamicResource IconTertiaryFillBrush}" Stroke="{DynamicResource IconPrimaryFillBrush}" StrokeThickness="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
        <Border Width="9" Height="11" BorderBrush="{DynamicResource IconForegroundBrush}" BorderThickness="1,0,0,1" Margin="0,4,6,0" HorizontalAlignment="Right" VerticalAlignment="Top"/>
        <Path Data="M 1 1 L 13 13 M 1 13 L 13 1" UseLayoutRounding="True" StrokeThickness="1" Stroke="{DynamicResource IconRedForegroundBrush}" Effect="{DynamicResource IconOuterShadow}"  HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="1"/>
    </Grid>

    <!--#endregion Ribbon ApplicationMenu Icons-->


    <!--#region Navigation Bar Styles-->

    <Style x:Key="NavigationBarBackgroundStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Height" Value="45"/>
        <Setter Property="Padding" Value="6"/>
        <Setter Property="Margin" Value="0,0,0,-5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Rectangle x:Name="ShadowRectangle" VerticalAlignment="Top" Height="18" IsHitTestVisible="False" Grid.Column="0">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="BackgroundBorder" CornerRadius="3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                        </Border>
                        <Grid x:Name="ContainerGrid" Margin="5">
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="CommandBar">
                            <Setter TargetName="ShadowRectangle" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="BackgroundBorder" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ContainerGrid" Property="Margin" Value="0,0,0,5"/>
                        </DataTrigger>
                        <!--DataTrigger Binding="{Binding IsMinimized, ElementName=Ribbon}" Value="True">
                            <Setter TargetName="ShadowRectangle" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon">
                <Setter Property="Panel.ZIndex" Value="999"/>
                <Setter Property="Height" Value="50"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NavigationButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Style.Triggers>
            <!--DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon">
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </DataTrigger-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon"/>
                    <!--Condition Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:DecoratableWindow}}, FallbackValue=True}" Value="False"/-->
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>


    <Path x:Key="NavigationBackButtonIcon" x:Shared="False" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 6 0 L 0 6 L 6 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" StrokeThickness="2"/>

    <Style x:Key="NavigationBackButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationButtonStyle}">
        <Setter Property="Content" Value="{DynamicResource NavigationBackButtonIcon}"/>
    </Style>

    <Path x:Key="NavigationForwardButtonIcon" x:Shared="False"  HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" StrokeThickness="2"/>

    <Style x:Key="NavigationForwardButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationButtonStyle}">
        <Setter Property="Content" Value="{DynamicResource NavigationForwardButtonIcon}"/>
    </Style>

    <Style x:Key="NavigationHistoryButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
        <Setter Property="Icon" Value="{DynamicResource NavigationHistoryButtonIcon}"/>
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Effect" Value="{DynamicResource DropShadow}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
                    <Grid Background="#01000000">
                        <!--Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000" Margin="{TemplateBinding Padding}">
                                <Label x:Name="Glyph" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Content="{TemplateBinding Content}"  FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" RenderOptions.EdgeMode="Aliased" IsTabStop="False" Margin="0" Padding="0" />
                            </Grid-->
                        <Grid x:Name="PART_ButtonBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000">
                            <ContentPresenter x:Name="iconImage" HorizontalAlignment="Center" Height="16" VerticalAlignment="Center" Content="{converters:ObjectToImageConverter {Binding Icon, RelativeSource={RelativeSource TemplatedParent}}, '16,16', {Binding RelativeSource={RelativeSource TemplatedParent}}}" Width="16" Margin="0" SnapsToDevicePixels="True" TextElement.Foreground="{TemplateBinding Foreground}"/>
                            <Fluent:TwoLineLabel x:Name="controlLabel" Text="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2 0 2 2" HasGlyph="{TemplateBinding HasTriangle}" Visibility="Collapsed"/>
                        </Grid>
                        <!--{converters:ObjectToImageConverter {Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}, '32,32', {Binding RelativeSource={RelativeSource TemplatedParent}}}-->
                        <Popup x:Name="PART_Popup" Placement="Left" VerticalOffset="{Binding ActualHeight, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalOffset="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Margin="0,0,-4,0" VerticalAlignment="Top" Grid.ColumnSpan="2">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" Margin="0" VerticalAlignment="Top">
                                <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <Border CornerRadius="3" Margin="4,3,4,5" Effect="{DynamicResource DropShadow}">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                            <Border VerticalAlignment="Top" Width="Auto" Height="Auto" BorderThickness="1" />
                                            <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ScrollViewer x:Name="PART_ScrollViewer" Style="{DynamicResource MenuScrollViewer}" IsTabStop="False" Margin="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Hidden">
                                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Local" Margin="2,2,2,0"/>
                                                </ScrollViewer>
                                                <Border x:Name="resizeBorder" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="11" BorderThickness="0,1,0,0" Grid.Row="1">
                                                    <Grid>
                                                        <Thumb x:Name="PART_ResizeVerticalThumb" HorizontalAlignment="Stretch" Margin="0,0,0,-90" Width="Auto" Height="10" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                                                        <Thumb x:Name="PART_ResizeBothThumb" HorizontalAlignment="Right" Margin="0,0,0,-90" Width="10" Height="10" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                                                    </Grid>
                                                </Border>
                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="None">
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Both">
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="Vertical">
                            <Setter Property="Visibility" TargetName="PART_ResizeBothThumb" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ResizeVerticalThumb" Value="Visible" />
                            <Setter Property="Visibility" TargetName="resizeBorder" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                    <!--Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/-->
                    <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
            </Trigger>
            <!--Trigger Property="IsDropDownOpen" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
            </Trigger-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Path x:Key="NavigationHistoryButtonIcon" x:Shared="False" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 3 3 L 6 0 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:DropDownButton}}}"/>
    <!--M 0 0 L 6 6 L 12 0-->
    
    <Path x:Key="NavigationUpButtonIcon" x:Shared="False" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" StrokeThickness="2"/>
    
    <Style x:Key="NavigationUpButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NavigationButtonStyle}">
        <Setter Property="Content" Value="{DynamicResource NavigationUpButtonIcon}"/>
    </Style>

    <Style x:Key="NavigationSearchBoxStyle" TargetType="{x:Type ui:ActionBox}" BasedOn="{StaticResource {x:Type ui:ActionBox}}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="ButtonContent">
            <Setter.Value>
                <Canvas Width="16" Height="16">
                    <Path Data="M 0 7 L 7 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Top="9"/>
                    <Ellipse Width="11" Height="11" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Left="5"/>
                </Canvas>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ButtonContent">
                    <Setter.Value>
                        <Path x:Name="CancelIconPath" Data="M 0 0 L 16 16 M 0 16 L 16 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Visibility="Collapsed"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="zNavigationSearchBoxStyle" TargetType="{x:Type local:SearchBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SearchBox}">
                    <DockPanel>
                        <ToggleButton x:Name="PART_GoStopToggleButton" DockPanel.Dock="Right">
                            <ui:AttachedProperties.CornerCurves>
                                <ui:CornerCurves TopLeft="False" TopRight="True" BottomRight="True" BottomLeft="False"/>
                            </ui:AttachedProperties.CornerCurves>
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                                    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid>
                                                    <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="#FFB58888" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="#FFEEB3B3"/>
                                                                <GradientStop Offset="1" Color="#FFDAA4A4"/>
                                                            </LinearGradientBrush>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE0A8A8"/>
                                                                    <GradientStop Offset="1" Color="#FFCC9999"/>
                                                                </LinearGradientBrush>
                                                            </Border.Background>
                                                        </Border>
                                                        <!-- BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border-->
                                                    </Border>
                                                    <!--Border x:Name="CheckedIdleBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="#FFB58888" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="#FFEEB3B3"/>
                                                                <GradientStop Offset="1" Color="#FFDAA4A4"/>
                                                            </LinearGradientBrush>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE0A8A8"/>
                                                                    <GradientStop Offset="1" Color="#FFCC9999"/>
                                                                </LinearGradientBrush>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border-->
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <!--ContentControl Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False" IsTabStop="False" /-->
                                                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                        <Canvas x:Name="SearchIconCanvas" Width="16" Height="16">
                                                            <Path Data="M 0 7 L 7 0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Top="9"/>
                                                            <Ellipse Width="11" Height="11" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Left="5"/>
                                                        </Canvas>
                                                        <!--Canvas x:Name="SearchIconCanvas" Width="16" Height="16">
                                                            <Ellipse Width="10" Height="10" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Left="6" Canvas.Top="0"/>
                                                            <Path Data="M 0 8 L 8 0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Canvas.Left="0" Canvas.Top="8"/>
                                                        </Canvas-->
                                                        <Path x:Name="CancelIconPath" Data="M 0 0 L 16 16 M 0 16 L 16 0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Visibility="Collapsed"/>
                                                    </Grid>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True" />
                                                            <Condition Property="IsPressed" Value="False" />
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.EnterActions>
                                                        <MultiTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.ExitActions>
                                                    </MultiTrigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                        <Setter TargetName="SearchIconCanvas" Property="Visibility" Value="Collapsed"/>
                                                        <Setter TargetName="CancelIconPath" Property="Visibility" Value="Visible"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="False"/>
                                                            <Condition Property="IsChecked" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.EnterActions>
                                                        <MultiTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.ExitActions>
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="False"/>
                                                            <Condition Property="IsChecked" Value="True"/>
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.EnterActions>
                                                        <MultiTrigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </MultiTrigger.ExitActions>
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <Grid>
                            <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,0,0,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1,1,0,1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,0,0,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1,1,0,1" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                </Border.Background>
                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TextBoxIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1,1,0,1" Opacity="0">
                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="0" Padding="0" Background="Transparent" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                    </Border.BorderBrush>
                                </Border>
                            </Border>
                            <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1,1,0,1" Opacity="0">
                                <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                            </Border>
                            <Grid Margin="{TemplateBinding Padding}">
                                <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center" Margin="0" Padding="0"/>
                                <TextBlock x:Name="PART_WatermarkTextBlock" Text="{TemplateBinding WatermarkText}" Foreground="{TemplateBinding Foreground}" Opacity="0.5" VerticalAlignment="Center" TextAlignment="Left"/>
                            </Grid>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="PART_ContentHost" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="PART_ContentHost" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavigationAddressBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Margin" Value="5,0,0,0"/>
    </Style>

    <!--#endregion Navigation Bar Styles-->
    

    <!--#region Main Content Styles-->

    <Style x:Key="ToolbarBackgroundContentControlStyle" TargetType="ContentControl">
        <Setter Property="Panel.ZIndex" Value="9999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}"/>
                        <ContentPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="None">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource HorizontalPanelBackgroundGradientStops}"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="{DynamicResource HorizontalPanelBorderBrush}"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Style x:Key="FileLabelStyle" TargetType="Label">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border>
                        <AccessText Text="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextWrapping="Wrap" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <Control x:Key="DiskItemIconDisplayControl" x:Shared="False" HorizontalAlignment="Center" Width="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.BitmapScalingMode="NearestNeighbor" RenderTransformOrigin="0.5,0.5">
        <!--RenderOptions.EdgeMode="Aliased"-->
        <!--DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"-->
        <Control.Style>
            <Style TargetType="{x:Type Control}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Control}">
                            <Grid Width="48" Height="48">
                                <Rectangle x:Name="IconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{Binding ItemExtraLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='48'}" RenderOptions.BitmapScalingMode="Linear"/>
                                <Grid x:Name="FolderIconGrid" Width="48" HorizontalAlignment="Center" Visibility="Collapsed">
                                    <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
                                    <Border x:Name="FirstChildIconBorder" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="32" Height="32" Margin="16,2,-16,2" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Effect="{DynamicResource IconInnerShadow}" RenderTransformOrigin="0,0">
                                        <Rectangle x:Name="FirstChildIconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{Binding FirstChildIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}"/>
                                    </Border>
                                    <Border x:Name="SecondChildIconBorder" CornerRadius="2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="32" Height="32" Margin="10,12,-10,-12" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Effect="{DynamicResource IconInnerShadow}" RenderTransformOrigin="0,0">
                                        <Rectangle x:Name="SecondChildIconRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{Binding SecondChildIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}"/>
                                    </Border>
                                    <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
                                </Grid>
                                <ContentPresenter x:Name="SpecialIconPresenter" Visibility="Collapsed" Content="{Binding SpecialIcon}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ItemCategory}" Value="Directory"/>
                                        <Condition Binding="{Binding IsDrive}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="FolderIconGrid" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding FirstChildIcon}" Value="{x:Null}">
                                    <Setter TargetName="FirstChildIconBorder" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="FirstChildIconRectangle" Property="Fill" Value="Transparent"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SecondChildIcon}" Value="{x:Null}">
                                    <Setter TargetName="SecondChildIconBorder" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SecondChildIconRectangle" Property="Fill" Value="Transparent"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding HasSpecialIcon}" Value="True">
                                    <Setter TargetName="FolderIconGrid" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IconRectangle" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="SpecialIconPresenter" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Control.Style>
    </Control>

    <Style x:Key="CurrentDirectoryListViewStyle" TargetType="{x:Type ListView}">
        <Style.Resources>
            <DataTemplate x:Key="CurrentDirectoryListViewColumnHeaderAscendingTemplate">
                <Grid>
                    <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" HorizontalAlignment="Left" TextAlignment="Left" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <RotateTransform Angle="-90"/>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="CurrentDirectoryListViewColumnHeaderDescendingTemplate">
                <Grid>
                    <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" HorizontalAlignment="Left" TextAlignment="Left" VerticalAlignment="Center"/>
                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M 0 0 L 6 6 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=GridViewColumnHeader}}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <RotateTransform Angle="90"/>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
            </DataTemplate>

            <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Type ScrollViewer}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition x:Name="GridViewHeaderRow" Height="0"/>
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                          AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                          ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                          Grid.Column="0" Grid.Row="0" />
                                <ScrollContentPresenter Margin="{TemplateBinding Padding}" Grid.Column="0" Grid.Row="1"/>
                                <Rectangle x:Name="BottomShadow" VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False" Grid.Column="0" Grid.Row="1">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <ScrollBar x:Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2">
                                    <ui:AttachedProperties.CornerCurves>
                                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                                    </ui:AttachedProperties.CornerCurves>
                                </ScrollBar>
                                <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="Horizontal" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="2">
                                    <ui:AttachedProperties.CornerCurves>
                                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                                    </ui:AttachedProperties.CornerCurves>
                                </ScrollBar>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Details">
                                    <Setter TargetName="GridViewHeaderRow" Property="Height" Value="24"/>
                                </DataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="ComputedHorizontalScrollBarVisibility" Value="Visible"/>
                                        <Condition Property="ComputedVerticalScrollBarVisibility" Value="Visible"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="BottomShadow" Property="Grid.Column" Value="1"/>
                                    <Setter TargetName="BottomShadow" Property="Grid.Row" Value="1"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu x:Name="ItemContextMenu">
                    <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                    <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                    <Separator/>
                    <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                    <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                    <Separator/>
                    <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                    <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                    <Separator/>
                    <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                    <e:Interaction.Behaviors>
                        <local:ItemContextMenuBehavior OpenMenuItem="{Binding Source={x:Reference OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference RenameMenuItem}}" PropertiesMenuItem="{Binding Source={x:Reference PropertiesMenuItem}}"/>
                        <!--RenameTextBox="{Binding Source={x:Reference RenameTextBox}}"-->
                        <!--WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}, Mode=OneWay}"-->
                        <!--TargetItem="{Binding}"-->
                    </e:Interaction.Behaviors>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Panel.ZIndex" Value="-100"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="GridView.AllowsColumnReorder" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" KeyboardNavigation.DirectionalNavigation="Local" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <!--DockPanel-->
                    <!--GridViewHeaderRowPresenter/>
                        < Columns="{TemplateBinding View.Columns}"
                                          ColumnHeaderContainerStyle="{TemplateBinding View.ColumnHeaderContainerStyle}"
                                          ColumnHeaderTemplate="{TemplateBinding View.ColumnHeaderTemplate}"
                                          ColumnHeaderTemplateSelector="{TemplateBinding View.ColumnHeaderTemplateSelector}"
                                          AllowsColumnReorder="{TemplateBinding View.AllowsColumnReorder}"
                                          ColumnHeaderContextMenu="{TemplateBinding View.ColumnHeaderContextMenu}"
                                          ColumnHeaderToolTip="{TemplateBinding View.ColumnHeaderToolTip}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"-->
                    <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                        <ItemsPresenter/>
                        <!--WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" KeyboardNavigation.DirectionalNavigation="Local" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/-->
                    </ScrollViewer>
                    <!--/DockPanel-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                    <!--Setter Property="ContextMenu" Value="{DynamicResource ItemContextMenu}"/-->
                    <Setter Property="ui:AttachedProperties.CornerCurves">
                        <Setter.Value>
                            <ui:CornerCurves TopLeft="True" TopRight="True" BottomRight="True" BottomLeft="True"/>
                        </Setter.Value>
                    </Setter>
                    <!--Setter Property="Opacity" Value="0"/>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                    <Setter Property="LayoutTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX="0" ScaleY="1"/>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" To="1" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </Style.Triggers-->
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Ribbon">
                <Setter Property="ui:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <ui:CornerCurves TopLeft="False" TopRight="True" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding InterfaceMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="CommandBar">
                <Setter Property="ui:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Icons">
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid>
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <StackPanel x:Name="RootStackPanel" Orientation="Vertical">
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}" />
                                    <!--WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}, Mode=OneWay}"-->
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <!--StackPanel.ContextMenu>
                                    <ContextMenu x:Name="ItemContextMenu">
                                        <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                        <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                        <Separator/>
                                        <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                        <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                        <Separator/>
                                        <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                        <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                        <Separator/>
                                        <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                        <e:Interaction.Behaviors>
                                            <local:ItemContextMenuBehavior WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}, Mode=OneWay}" OpenMenuItem="{Binding Source={x:Reference OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                        </e:Interaction.Behaviors>
                                    </ContextMenu>
                                </StackPanel.ContextMenu-->
                                <!--Width="52" MinHeight="52"-->
                                <!--StackPanel.ContextMenu>
                            <ui:TouchableContextMenu>
                                <MenuItem Header="Open"/>
                                <MenuItem Header="Properties"/>
                            </ui:TouchableContextMenu>
                        </StackPanel.ContextMenu-->
                                <!--{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}-->
                                <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="48">
                                    <e:Interaction.Behaviors>
                                        <local:IconScaleBehavior/>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter>
                                <Grid x:Name="NameGrid" Width="48">
                                    <Grid x:Name="InnerNameGrid" Margin="-3,3,-3,0" MaxHeight="57">
                                        <TextBlock x:Name="NameTextBlock" Text="{Binding ItemDisplayName}" HorizontalAlignment="Stretch" TextAlignment="Center" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" TextWrapping="Wrap"/>
                                        <!-- Style="{DynamicResource FileLabelStyle}"-->
                                        <!--TextElement.TextWrapping="Wrap"-->
                                        <!--{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}-->
                                        <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Stretch" MaxWidth="48" TextWrapping="Wrap">
                                            <e:Interaction.Behaviors>
                                                <!--{Binding WindowContent, Source={x:Reference ClickToOpen}}-->
                                                <local:ItemRenameBehavior TargetItem="{Binding}" IsRenaming="{Binding IsRenaming}"/>
                                            </e:Interaction.Behaviors>
                                        </TextBox>
                                    </Grid>
                                </Grid>
                            </StackPanel>
                            <DataTemplate.Triggers>
                                <!--DataTrigger Binding="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}, FallbackValue=1.0}" Value="16">
                                    <Setter TargetName="RootStackPanel" Property="Orientation" Value="Horizontal"/>
                                    <Setter TargetName="RootStackPanel" Property="Width" Value="225"/>
                                    <Setter TargetName="NameGrid" Property="Width" Value="Auto"/>
                                    <Setter TargetName="InnerNameGrid" Property="Margin" Value="3,0,0,0"/>
                                </DataTrigger-->
                                <Trigger SourceName="RenameTextBox" Property="IsVisible" Value="True">
                                    <Setter TargetName="NameTextBlock" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Details">
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <DockPanel>
                                <GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns,RelativeSource={RelativeSource Mode=TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top"/>
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="View">
                    <Setter.Value>
                        <GridView>
                            <GridViewColumn Header="Name" Width="160">
                                <!-- DisplayMemberBinding="{Binding ItemDisplayName}"-->
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type local:DiskItem}">
                                        <DockPanel>
                                            <e:Interaction.Behaviors>
                                                <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                                <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                            </e:Interaction.Behaviors>
                                            <DockPanel.ContextMenu>
                                                <ContextMenu x:Name="ItemContextMenu">
                                                    <!-- Opened="TouchableContextMenu_Opened"-->
                                                    <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                                    <!--Click="OpenMenuItem_Click"-->
                                                    <!--Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}"-->
                                                    <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                                    <!-- Click="RunAsAdminMenuItem_Click"-->
                                                    <Separator/>
                                                    <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                                    <!-- Click="CopyMenuItem_Click"-->
                                                    <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                                    <!-- Click="CutMenuItem_Click"-->
                                                    <Separator/>
                                                    <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                                    <!-- Click="DeleteMenuItem_Click"-->
                                                    <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                                    <Separator/>
                                                    <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                                    <!-- Click="PropertiesMenuItem_Click"-->
                                                    <e:Interaction.Behaviors>
                                                        <local:ItemContextMenuBehavior WindowContent="{Binding Path=WindowContent, Source={x:Reference ClickToOpen}, Mode=OneWay}" OpenMenuItem="{Binding Source={x:Reference Name=OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference Name=RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference Name=CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference Name=CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference Name=RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference Name=RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference Name=PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                                    </e:Interaction.Behaviors>
                                                </ContextMenu>
                                            </DockPanel.ContextMenu>
                                            <Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" DockPanel.Dock="Left"/>
                                            <Grid>
                                                <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap" Margin="5,0,0,0"/>
                                                <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                                    <e:Interaction.Behaviors>
                                                        <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}"/>
                                                    </e:Interaction.Behaviors>
                                                </TextBox>
                                            </Grid>
                                        </DockPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="Type" Width="120" DisplayMemberBinding="{Binding ItemDisplayType}"/>
                            <GridViewColumn Header="Size" Width="80" DisplayMemberBinding="{Binding FriendlyItemSize}"/>
                        </GridView>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Tiles">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <DockPanel Width="240" Height="42">
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="32">
                                    <e:Interaction.Behaviors>
                                        <local:IconScaleBehavior/>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter>
                                <StackPanel Margin="5,0,0,0" Orientation="Vertical" VerticalAlignment="Center">
                                    <Grid>
                                        <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap"/>
                                        <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Stretch" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                            <e:Interaction.Behaviors>
                                                <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}"/>
                                            </e:Interaction.Behaviors>
                                        </TextBox>
                                    </Grid>
                                    <ProgressBar x:Name="DriveSpaceProgressBar" HorizontalAlignment="Stretch" Minimum="0" Maximum="{Binding ItemSize, Mode=OneWay}" Visibility="Collapsed">
                                        <ProgressBar.Value>
                                            <MultiBinding Converter="{StaticResource DriveFreeSpaceToUsedSpaceConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding Path="DriveFreeSpace" Mode="OneWay"/>
                                                    <Binding Path="ItemSize" Mode="OneWay"/>
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </ProgressBar.Value>
                                    </ProgressBar>
                                    <StackPanel x:Name="DriveSpaceStackPanel" Orientation="Horizontal" HorizontalAlignment="Left" Visibility="Collapsed">
                                        <TextBlock Text="{Binding FriendlyDriveFreeSpace, Mode=OneWay}" HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                        <TextBlock Text=" free of " HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                        <TextBlock Text="{Binding FriendlyItemSize, Mode=OneWay}" HorizontalAlignment="Left" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                    </StackPanel>
                                </StackPanel>
                            </DockPanel>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsDrive}" Value="True">
                                    <Setter TargetName="DriveSpaceProgressBar" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="DriveSpaceStackPanel" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" KeyboardNavigation.DirectionalNavigation="Local" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="List">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <DockPanel>
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <!--Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" DockPanel.Dock="Left"/-->
                                <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="16">
                                    <e:Interaction.Behaviors>
                                        <local:IconScaleBehavior/>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter>
                                <Grid>
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap" Margin="5,0,0,0"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                            </DockPanel>
                        </DataTemplate>
                        <!--DataTemplate DataType="{x:Type local:DiskItem}">
                            <StackPanel Orientation="Horizontal" Height="16">
                                <StackPanel.ContextMenu>
                                    <ContextMenu x:Name="ItemContextMenu">
                                        <e:Interaction.Behaviors>
                                            <local:ItemContextMenuBehavior WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" OpenMenuItem="{Binding Source={x:Reference Name=OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference Name=RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference Name=CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference Name=CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference Name=RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference Name=RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference Name=PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                        </e:Interaction.Behaviors>
                                        <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                        <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                        <Separator/>
                                        <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                        <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                        <Separator/>
                                        <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                        <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                        <Separator/>
                                        <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                    </ContextMenu>
                                </StackPanel.ContextMenu>
                                <Rectangle HorizontalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>
                                <Grid HorizontalAlignment="Left" Margin="5,0,0,0">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                            </StackPanel>
                        </DataTemplate-->
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <WrapPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" Value="Content">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type local:DiskItem}">
                            <Grid>
                                <e:Interaction.Behaviors>
                                    <local:ClickToOpenBehavior x:Name="ClickToOpen" WindowContent="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" ParentListViewItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}"/>
                                    <local:DiskItemDragBehavior TargetItem="{Binding}"/>
                                </e:Interaction.Behaviors>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="32"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="192"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <!--Rectangle HorizontalAlignment="Center" Width="32" Height="32" Fill="{Binding ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"/-->
                                <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="32" Grid.Column="0" Grid.Row="0">
                                    <e:Interaction.Behaviors>
                                        <local:IconScaleBehavior/>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter>
                                <Grid HorizontalAlignment="Left" Grid.Column="1" Grid.Row="0">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:WindowContent}}}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Type:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding FriendlyItemType}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="0">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Date modified:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="NYI"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Size:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding FriendlyItemSize}"/>
                                </StackPanel>
                            </Grid>
                        </DataTemplate>
                        <!--DataTemplate DataType="{x:Type local:DiskItem}">
                            <Grid Height="32">
                                <Grid.ContextMenu>
                                    <ContextMenu x:Name="ItemContextMenu">
                                        <e:Interaction.Behaviors>
                                            <local:ItemContextMenuBehavior WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" OpenMenuItem="{Binding Source={x:Reference Name=OpenMenuItem}}" RunAsAdminMenuItem="{Binding Source={x:Reference Name=RunAsAdminMenuItem}}" CopyMenuItem="{Binding Source={x:Reference Name=CopyMenuItem}}" CutMenuItem="{Binding Source={x:Reference Name=CutMenuItem}}" RenameMenuItem="{Binding Source={x:Reference Name=RenameMenuItem}}" RenameTextBox="{Binding Source={x:Reference Name=RenameTextBox}}" PropertiesMenuItem="{Binding Source={x:Reference Name=PropertiesMenuItem}}" TargetItem="{Binding}"/>
                                        </e:Interaction.Behaviors>
                                        <MenuItem x:Name="OpenMenuItem" Header="Open"/>
                                        <MenuItem x:Name="RunAsAdminMenuItem" Header="Run as administrator"/>
                                        <Separator/>
                                        <MenuItem x:Name="CopyMenuItem" Header="Copy"/>
                                        <MenuItem x:Name="CutMenuItem" Header="Cut"/>
                                        <Separator/>
                                        <MenuItem x:Name="DeleteMenuItem" Header="Delet"/>
                                        <MenuItem x:Name="RenameMenuItem" Header="Rename"/>
                                        <Separator/>
                                        <MenuItem x:Name="PropertiesMenuItem" Header="Properties"/>
                                    </ContextMenu>
                                </Grid.ContextMenu>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="32"/>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="192"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle HorizontalAlignment="Center" Width="32" Height="32" Fill="{Binding ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"/>
                                <Grid HorizontalAlignment="Left" Grid.Column="1" Grid.Row="0">
                                    <TextBlock Text="{Binding ItemDisplayName}" HorizontalAlignment="Left" TextAlignment="Center" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextWrapping="Wrap"/>
                                    <TextBox x:Name="RenameTextBox" Visibility="Collapsed" HorizontalAlignment="Left" MaxWidth="{Binding IconSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" TextWrapping="Wrap">
                                        <e:Interaction.Behaviors>
                                            <local:ItemRenameBehavior TargetItem="{Binding}" WindowContent="{Binding WindowContent, Source={x:Reference ClickToOpen}}" IsRenaming="{Binding IsRenamingFiles, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                        </e:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="1" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Type:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding FriendlyItemType}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="0">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Date modified:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="NYI"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Grid.Column="2" Grid.Row="1">
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Opacity="0.5" Margin="0,0,5,0">Size:</TextBlock>
                                    <TextBlock Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Text="{Binding FriendlyItemSize}"/>
                                </StackPanel>
                            </Grid>
                        </DataTemplate-->
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <!--Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <StackPanel IsItemsHost="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" Orientation="Vertical" KeyboardNavigation.DirectionalNavigation="Local"/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter-->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Grid x:Key="DesktopFolderIcon" x:Shared="False" Width="48" Height="48" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        <Border CornerRadius="1" Background="{DynamicResource IconTertiaryFillBrush}" Width="30" Height="22" Effect="{DynamicResource IconInnerShadow}" UseLayoutRounding="True" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="-5,10,5,-10">
            <Border BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="1" CornerRadius="0,0,1,1" Height="5" VerticalAlignment="Bottom">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                </Border.Background>
                <StackPanel Orientation="Horizontal" Margin="1" HorizontalAlignment="Left" VerticalAlignment="Center">
                    <Rectangle Fill="{DynamicResource TitlebarBorderBrush}" Width="1" Height="1" Margin="0,0,1,0"/>
                    <Rectangle Fill="{DynamicResource TitlebarBorderBrush}" Width="1" Height="1" Margin="0,0,1,0"/>
                    <Rectangle Fill="{DynamicResource TitlebarBorderBrush}" Width="1" Height="1" Margin="0,0,1,0"/>
                </StackPanel>
            </Border>
        </Border>
        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
    </Grid>

    <Grid x:Key="DocumentsFolderIcon" x:Shared="False" Width="48" Height="48" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        <Grid HorizontalAlignment="Right" VerticalAlignment="Top" Width="26" Height="32" Effect="{DynamicResource IconInnerShadow}" Margin="-5,3,5,-3">
            <Path Data="M 0 0 L 21 0 L 26 5 L 26 32 L 0 32 Z" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}"/>
            <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconTertiaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
        </Grid>
        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
    </Grid>

    <Grid x:Key="DownloadsFolderIcon" x:Shared="False" Width="48" Height="48" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        <Path Data="M 0 0 L 0 4 L 16 20 L 32 4 L 32 0 L 28 0 L 16 12 L 4 0 Z" Fill="{DynamicResource IconTertiaryFillBrush}" HorizontalAlignment="Right" VerticalAlignment="Top" UseLayoutRounding="True" Effect="{DynamicResource IconInnerShadow}" Margin="-5,9,5,-9"/>
        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
    </Grid>

    <Grid x:Key="MusicFolderIcon" x:Shared="False" Width="48" Height="48" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        <Grid Width="16" Height="32" HorizontalAlignment="Right" VerticalAlignment="Top" UseLayoutRounding="True" Effect="{DynamicResource IconInnerShadow}" Margin="-16,3,15,-3">
            <Rectangle Width="5" HorizontalAlignment="Right" VerticalAlignment="Stretch" Margin="0,0,0,4">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,32" GradientStops="{DynamicResource DarkIconGradientStops3}" MappingMode="Absolute"/>
                </Rectangle.Fill>
            </Rectangle>
            <Ellipse Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Bottom">
                <Ellipse.Fill>
                    <LinearGradientBrush StartPoint="0,-23" EndPoint="0,9" GradientStops="{DynamicResource DarkIconGradientStops3}" MappingMode="Absolute"/>
                </Ellipse.Fill>
            </Ellipse>
        </Grid>
        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
    </Grid>

    <Grid x:Key="PicturesFolderIcon" x:Shared="False" Width="48" Height="48" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        <Border CornerRadius="1" Background="{DynamicResource IconForegroundBrush}" BorderBrush="{DynamicResource IconTertiaryFillBrush}" BorderThickness="1" Width="30" Height="22" Effect="{DynamicResource IconInnerShadow}" UseLayoutRounding="True" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="-5,10,5,-10">
            <Path Data="M 0 0 L 11 4 L 22 6 L 26 11 L 0 11 Z" Fill="{DynamicResource IconPrimaryFillBrush}" VerticalAlignment="Bottom"/>
        </Border>
        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
    </Grid>

    <Grid x:Key="VideosFolderIcon" x:Shared="False" Width="48" Height="48" UseLayoutRounding="True" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Path Data="M 0 0 L 36 0 L 36 24 L 38 26 L 38 38 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconPrimaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
        <Grid Width="32" Height="24" Effect="{DynamicResource IconInnerShadow}" UseLayoutRounding="True" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="-5,9,5,-9">
            <Path Data="M 0 2 Q 4,0.5 16,0 Q 28,0.5 32,2 L 32 22 Q 28,23.5 16,24 Q 4,23.5 0,22 Z" Fill="{DynamicResource IconTertiaryFillBrush}"/>
            <!--M 0 2 C 0,2 7,0 16,0 C 23,0 32,2 32,2 L 32 18 C 32,18 23,20 16,20 C  0,18-->
            <!--m 7.9375 0.52917 c 0 0 -1.5162244 -0.52916 -3.96875 -0.52916 C 1.5162244 0 0 0.52917 0 0.52917 v 4.23334 c 0 0 1.5162244 0.52916 3.96875 0.52916 2.4525256 0 3.96875 -0.52916 3.96875 -0.52916 z-->
            <!--Path Data="M 0 0 L 11 4 L 22 6 L 26 11 L 0 11 Z" Fill="{DynamicResource IconPrimaryFillBrush}" VerticalAlignment="Bottom"/-->
            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{DynamicResource IconForegroundBrush}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5" Effect="{DynamicResource IconInnerShadow}">
                <!--Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}"-->
                <Path.RenderTransform>
                    <RotateTransform Angle="0"/>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <Path Data="M 0 0 L 15 11 L 15 32 L 14 33 L 14 48 L 0 38 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" HorizontalAlignment="Left" VerticalAlignment="Top" Effect="{DynamicResource IconOuterShadow}"/>
    </Grid>




    <DataTemplate x:Key="CurrentDirectoryListViewGroupHeaderTemplate"/>

    <Style x:Key="CurrentDirectoryListViewGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Expander x:Name="ContentExpander" Header="{Binding Name}" IsExpanded="True">
                        <Expander.Template>
                            <ControlTemplate TargetType="{x:Type Expander}">
                                <Border CornerRadius="3,4,4,3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}" Grid.RowSpan="2">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Grid Margin="4">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <!--RowDefinition x:Name="ContentRow" Height="{Binding DesiredHeight, ElementName=Content}" /-->
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <DockPanel Grid.Row="0">
                                            <ToggleButton OverridesDefaultStyle="True" IsChecked="{Binding IsExpanded, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Left">
                                                <ToggleButton.Style>
                                                    <Style TargetType="ToggleButton">
                                                        <Setter Property="Background" Value="Transparent" />
                                                        <Setter Property="BorderBrush" Value="Transparent" />
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
                                                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                        <Setter Property="BorderThickness" Value="0"/>
                                                        <Setter Property="Margin" Value="0"/>
                                                        <Setter Property="Width" Value="30"/>
                                                        <Setter Property="Height" Value="30"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="ToggleButton">
                                                                    <Grid Background="#01000000" Effect="{DynamicResource DropShadow}" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True">
                                                                        <!--ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="8,0"-->
                                                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 0 12" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                                                            <!--Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}"-->
                                                                            <Path.RenderTransform>
                                                                                <RotateTransform Angle="0"/>
                                                                            </Path.RenderTransform>
                                                                        </Path>
                                                                        <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,0,1,0" Effect="{DynamicResource DropShadow}" RenderTransformOrigin="0.5,0.5"/>
                                                                    </Grid>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsPressed" Value="True">
                                                                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                                                                        </Trigger>
                                                                        <Trigger Property="IsChecked" Value="True">
                                                                            <Trigger.EnterActions>
                                                                                <BeginStoryboard>
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="90" Duration="0:0:0.125"/>
                                                                                    </Storyboard>
                                                                                </BeginStoryboard>
                                                                            </Trigger.EnterActions>
                                                                            <Trigger.ExitActions>
                                                                                <BeginStoryboard>
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125"/>
                                                                                    </Storyboard>
                                                                                </BeginStoryboard>
                                                                            </Trigger.ExitActions>
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ToggleButton.Style>
                                            </ToggleButton>
                                            <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" TextElement.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" TextElement.FontSize="14" Opacity="0.5" VerticalAlignment="Center"/>
                                        </DockPanel>
                                        <Border x:Name="Content" Grid.Row="1">
                                            <Border.LayoutTransform>
                                                <ScaleTransform ScaleY="1"/>
                                            </Border.LayoutTransform>
                                            <ContentPresenter Margin="0,5,0,0"/>
                                        </Border>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsExpanded" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                        <!--Setter TargetName="ContentRow" Property="Height" Value="{Binding DesiredHeight, ElementName=Content}" /-->
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Expander.Template>
                        <ItemsPresenter/>
                    </Expander>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Name}" Value="False">
                            <Setter TargetName="ContentExpander" Property="Header" Value="Folders"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Name}" Value="True">
                            <Setter TargetName="ContentExpander" Property="Header" Value="Devices and drives"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="CurrentDirectoryListViewItemControlTemplate" TargetType="{x:Type ListViewItem}">
        <Grid>
            <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                </Border.Background>
                <Border x:Name="HoverInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                    </Border.Background>
                </Border>
            </Border>
            <Border x:Name="SelectedBackground" CornerRadius="{Binding CornerRadius, ElementName=HoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                </Border.Background>
                <Border CornerRadius="{Binding CornerRadius, ElementName=HoverInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                    </Border.Background>
                </Border>
            </Border>
            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                <ContentPresenter x:Name="PART_ContentPresenter" Margin="0" Visibility="Hidden"/>
                <DockPanel>
                    <Grid x:Name="SelectorCheckBoxGrid" VerticalAlignment="Top">
                        <CheckBox x:Name="SelectorCheckBox" IsThreeState="False" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="Collapsed" DockPanel.Dock="Left"/>
                    </Grid>
                    <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" Visibility="Visible" />
                </DockPanel>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="FavoritesTreeViewStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="Panel.ZIndex" Value="9999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Rectangle x:Name="BottomShadow" VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border CornerRadius="3,4,4,3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <ScrollViewer Focusable="False" CanContentScroll="False">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="FavoritesTreeViewFavoritesItemStyle" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}"/-->

    <LinearGradientBrush x:Key="EmblemPathFillBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>

    <Style x:Key="FavoritesItemHeaderStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <StackPanel Orientation="Horizontal" Height="16" ClipToBounds="False">
                        <ContentControl>
                            <ContentControl.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </ContentControl.Effect>
                            <Path Data="M 3 16 L 8 12 L 13 16 L 11 9 L 16 6 L 10 6 L 8 0 L 6 6 L 0 6 L 5 9" Fill="{DynamicResource EmblemPathFillBrush}" Effect="{DynamicResource DropShadow}" UseLayoutRounding="True"/>
                            <!--RenderOptions.EdgeMode="Aliased"-->
                            <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0,0,0"/-->
                        </ContentControl>
                        <TextBlock Margin="5,0,0,0">Favorites</TextBlock>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComputerItemHeaderStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <StackPanel Orientation="Horizontal" Height="16" ClipToBounds="False">
                        <!--Path Data="M 3 16 L 8 12 L 13 16 L 11 9 L 16 6 L 10 6 L 8 0 L 6 6 L 0 6 L 5 9" Fill="{DynamicResource EmblemPathFillBrush}" Stroke="{DynamicResource EmblemPathStrokeBrush}" StrokeThickness="1" UseLayoutRounding="True">
                            <Path.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Path.Effect>
                        </Path-->
                        <Grid Width="16" Height="16">
                            <Grid.Effect>
                                <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.5" />
                            </Grid.Effect>
                            <Rectangle Width="4" Height="14" VerticalAlignment="Center" Fill="{DynamicResource EmblemPathFillBrush}" UseLayoutRounding="True"/>
                            <Rectangle Width="4" Height="14" VerticalAlignment="Center" Fill="#36000000" StrokeThickness="0" UseLayoutRounding="True"/>
                            <Rectangle Height="13" VerticalAlignment="Top" Fill="{DynamicResource IconTertiaryFillBrush}" Stroke="{DynamicResource EmblemPathFillBrush}" StrokeThickness="1" UseLayoutRounding="True"/>
                            <!--Rectangle.Effect>
                                    <DropShadowEffect Color="Black" Direction="320" ShadowDepth="3" BlurRadius="10" Opacity="0.125" />
                                </Rectangle.Effect>
                            </Rectangle-->
                            <Rectangle Height="2" VerticalAlignment="Bottom" Fill="{DynamicResource EmblemPathFillBrush}" StrokeThickness="1" UseLayoutRounding="True"/>
                            <Rectangle Height="2" VerticalAlignment="Bottom" Fill="#26000000" StrokeThickness="0" UseLayoutRounding="True"/>
                        </Grid>
                        <!--ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="10,0,0,0"/-->
                        <TextBlock Margin="5,0,0,0">This PC</TextBlock>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <HierarchicalDataTemplate x:Key="NavigationPaneDataTemplate" DataType="{x:Type local:DiskItem}" ItemsSource="{Binding SubItems}">
        <!--, Converter={StaticResource DiskItemSubItemsTreeFilterConverter}-->
        <StackPanel Orientation="Horizontal" Height="16">
            <!--Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" SnapsToDevicePixels="True" UseLayoutRounding="True" RenderOptions.EdgeMode="Aliased"/-->
            <ContentPresenter Content="{DynamicResource DiskItemIconDisplayControl}" VerticalAlignment="Stretch" Width="16">
                <e:Interaction.Behaviors>
                    <local:IconScaleBehavior/>
                </e:Interaction.Behaviors>
            </ContentPresenter>
            <ContentPresenter Content="{Binding ItemDisplayName}" RecognizesAccessKey="True" TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TreeViewItem}}}" Margin="5,0,0,0">
                <ContentPresenter.Resources>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </StackPanel>
    </HierarchicalDataTemplate>

    <Style x:Key="DetailsPaneStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="MaxWidth" Value="250"/>
        <Setter Property="Panel.ZIndex" Value="9999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Rectangle x:Name="BottomShadow" VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border CornerRadius="3,4,4,3" UseLayoutRounding="True" Margin="5" Effect="{DynamicResource TertiaryDropShadow}">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <ContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DetailsPaneIconContainerStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Height" Value="{Binding ActualWidth,RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Border>
                            <ContentPresenter Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PreviewPaneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource DetailsPaneStyle}"/>


    <!--ControlTemplate x:Key="CurrentDirectoryListViewItemControlTemplate" TargetType="{x:Type ListViewItem}">
        <ControlTemplate.Resources>
            <CubicEase x:Key="ScalingEase" EasingMode="EaseOut"/>
        </ControlTemplate.Resources>
        <Grid x:Name="RootGrid" Margin="5" Background="#01000000" Effect="{DynamicResource TertiaryDropShadow}">
            <Grid RenderTransformOrigin="0.5,0.5" UseLayoutRounding="True">
                <Border x:Name="SizingAid" Background="#01000000"/>
                <Border x:Name="BackgroundBorder" BorderBrush="Transparent" BorderThickness="0" CornerRadius="3" ClipToBounds="True" UseLayoutRounding="True">
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                    </Border.Background>
                    <Grid>
                        <Grid>
                            <Border x:Name="SelectedBorder" BorderBrush="Transparent" BorderThickness="0" CornerRadius="3" ClipToBounds="True" UseLayoutRounding="True" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource CardListViewSelectedBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                            <Border x:Name="RootBorder" Padding="0">
                                <Grid Background="{TemplateBinding Background}" Margin="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <ContentPresenter x:Name="PART_ContentPresenter" Margin="0" Visibility="Hidden"/>
                                    <DockPanel>
                                        <Grid x:Name="SelectorCheckBoxGrid" VerticalAlignment="Top">
                                            <CheckBox x:Name="SelectorCheckBox" IsThreeState="False" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Visibility="Collapsed" DockPanel.Dock="Left"/>
                                        </Grid>
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" Visibility="Visible" />
                                    </DockPanel>
                                </Grid>
                            </Border>
                        </Grid>
                    </Grid>
                </Border>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <DataTrigger Binding="{Binding ShowItemCheckboxes, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter TargetName="SelectorCheckBox" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Details">
                <Setter TargetName="SelectorCheckBoxGrid" Property="VerticalAlignment" Value="Center"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding CurrentView, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="List">
                <Setter TargetName="SelectorCheckBoxGrid" Property="VerticalAlignment" Value="Center"/>
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="SelectorCheckBoxGrid" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="Padding" To="5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                            <ThicknessAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="Padding" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                            <ThicknessAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Margin" To="5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate-->

    <Style x:Key="StatusBarDetailsViewToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Width" Value="24"/>
        <!--Setter Property="Height" Value="18"/-->
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="-3,-4,0,-3"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ui:AttachedProperties.CornerCurves">
            <Setter.Value>
                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{DynamicResource StatusBarDetailsViewToggleButtonIcon}"/>
    </Style>

    <UniformGrid x:Key="StatusBarDetailsViewToggleButtonIcon" x:Shared="false" Width="15" Height="15" Rows="3" Columns="3" SnapsToDevicePixels="True">
        <Rectangle Fill="{DynamicResource IconPrimaryFillBrush}" Margin="1"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="1,0"/>
        <Rectangle Fill="{DynamicResource IconPrimaryFillBrush}" Margin="1"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="1,0"/>
        <Rectangle Fill="{DynamicResource IconPrimaryFillBrush}" Margin="1"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="0,0,1,0"/>
        <Rectangle Height="1" VerticalAlignment="Center" Fill="{DynamicResource IconSecondaryFillBrush}" Margin="0,0,1,0"/>
    </UniformGrid>

    <Style x:Key="StatusBarIconsViewToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Width" Value="24"/>
        <!--Setter Property="Height" Value="18"/-->
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="-1,-4,-3,-3"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ui:AttachedProperties.CornerCurves">
            <Setter.Value>
                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="True" BottomLeft="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="{DynamicResource StatusBarIconsViewToggleButtonIcon}"/>
    </Style>

    <Border x:Key="StatusBarIconsViewToggleButtonIcon" x:Shared="false" Width="15" Height="12" Background="{DynamicResource IconForegroundBrush}" BorderBrush="{DynamicResource IconTertiaryFillBrush}" BorderThickness="1">
        <Path Data="M 0 0 L 5 2 L 10 3 L 12 5 L 0 5 Z" Fill="{DynamicResource IconPrimaryFillBrush}" VerticalAlignment="Bottom"/>
    </Border>

    <Style x:Key="TitleBarTabControlStyle" TargetType="{x:Type TabControl}" BasedOn="{StaticResource PrimaryTabControlStyle}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type local:Location}">
                <StackPanel Orientation="Horizontal" Margin="0,0,45,0">
                    <Rectangle Width="16" Height="16" Fill="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" Margin="0,0,5,0"/>
                    <TextBlock Text="{Binding Name}"/>
                </StackPanel>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Height" Value="31"/>
        <!--Setter Property="MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid}, Mode=OneWay}"/-->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource PrimaryTabItemStyle}">
                    <Setter Property="Padding" Value="10,0"/>
                    <Setter Property="Width" Value="250"/>
                    <Setter Property="LayoutTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX="0" ScaleY="1"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid Background="#01000000">
                                    <Grid ClipToBounds="True" Margin="-2,0">
                                        <Border x:Name="HoverBorder" Margin="4,0" BorderThickness="0,2,0,0" BorderBrush="{DynamicResource HoverHighlightBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0">
                                            <Border.RenderTransform>
                                                <ScaleTransform ScaleX="0" ScaleY="1"/>
                                            </Border.RenderTransform>
                                            <Rectangle Fill="{Binding BorderBrush, ElementName=HoverBorder}" Opacity="1" Height="2" VerticalAlignment="Top" Margin="0,-2">
                                                <Rectangle.Effect>
                                                    <BlurEffect Radius="5"/>
                                                </Rectangle.Effect>
                                            </Rectangle>
                                        </Border>
                                    </Grid>
                                    <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Left" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" Effect="{DynamicResource DropShadow}" TextElement.Foreground="{DynamicResource TitlebarIdleForegroundBrush}"/>
                                    <Button HorizontalAlignment="Right" Margin="0" Style="{DynamicResource CaptionButtonStyle}">
                                        <e:Interaction.Behaviors>
                                            <local:ClosableTabItemBehavior OwnerWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                        </e:Interaction.Behaviors>
                                        <Path Data="M 0 -1 L 2 -1 L 4.5 2 L 7 -1 L 9 -1 L 9 1 L 6 3.5 L 9 6 L 9 8 L 7 8 L 4.5 5 L 2 8 L 0 8 L 0 6 L 3 3.5 L 0 1 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>
                                    </Button>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.125" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="ContentSite" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                        <!--Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" /-->
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False">
                                        <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarInactiveIdleForegroundBrush}" />
                                    </DataTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.EnterActions>
                                        <MultiTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.ExitActions>
                                        <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                    </MultiTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="ContentSite" Property="TextElement.Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                    </Trigger>
                                    <Trigger Property="IsVisible" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" To="1" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="LayoutTransform.ScaleX" To="0" Duration="0:0:0.125">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CubicEase EasingMode="EaseIn"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <ScrollViewer Style="{DynamicResource TabScrollViewerStyle}" Margin="0,1,0,0" Padding="0" HorizontalAlignment="Left" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                        <Grid x:Name="RootGrid">
                            <ui:TravellingSelector x:Name="TravellingSelector" AnimationDuration="0:0:0.250" HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=HeaderPanel, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=HeaderPanel, Mode=OneWay}" TargetPanel="{Binding ElementName=HeaderPanel, Mode=OneWay}" CollectionSize="{Binding Items.Count, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Mode=OneWay}" SelectedObjectIndex="{Binding SelectedIndex, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                                <ui:TravellingSelector.AnimationEase>
                                    <CubicEase EasingMode="EaseOut"/>
                                </ui:TravellingSelector.AnimationEase>
                                <ui:TravellingSelector.Template>
                                    <ControlTemplate TargetType="{x:Type ui:TravellingSelector}">
                                        <Grid Background="#01000000">
                                            <Border x:Name="PART_Selector" HorizontalAlignment="Left" VerticalAlignment="Top" Width="{TemplateBinding SelectionWidth}" Height="{TemplateBinding SelectionHeight}">
                                                <Border Margin="-2,0" ClipToBounds="True">
                                                    <Border x:Name="SelectedBorder" Margin="4,0" BorderBrush="{DynamicResource SelectedHighlightBrush}" BorderThickness="0,2,0,0" RenderTransformOrigin="0.5,1">
                                                        <Border.RenderTransform>
                                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                        </Border.RenderTransform>
                                                        <Rectangle Fill="{Binding BorderBrush, ElementName=SelectedBorder}" Opacity="1" Height="2" VerticalAlignment="Top" Margin="0,-2">
                                                            <Rectangle.Effect>
                                                                <BlurEffect Radius="5"/>
                                                            </Rectangle.Effect>
                                                        </Rectangle>
                                                    </Border>
                                                </Border>
                                            </Border>
                                        </Grid>
                                    </ControlTemplate>
                                </ui:TravellingSelector.Template>
                            </ui:TravellingSelector>
                            <TabPanel Name="HeaderPanel" HorizontalAlignment="Left" VerticalAlignment="Stretch" MaxHeight="{TemplateBinding ActualHeight}" IsItemsHost="True" KeyboardNavigation.TabIndex="1"/>
                        </Grid>
                    </ScrollViewer>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWay}" Value="Maximized">
                            <Setter TargetName="RootGrid" Property="Margin" Value="0"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabStripPanelStyle" TargetType="{x:Type Panel}">
        <Setter Property="Margin" Value="0,0,135,0"/>
    </Style>

    <Grid x:Key="TabsSetAsideToggleButtonIcon" x:Shared="False" Height="10">
        <!--Path Data="M 0 0 L 0 5 L 5 5 L 5 0 Z" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="3,3,0,0"/>
                    <Path Data="M 5 0 L -1 0 L -1 6" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,3,3"/-->
        <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Horizontal">
            <Rectangle Width="3" Height="2" Margin="0,0,1,0" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}"/>
            <Rectangle Width="3" Height="2" Margin="0,0,1,0" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}"/>
        </StackPanel>
        <Path Data="M 0 0 L 0 6 L 9 6 L 9 0 Z" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
    </Grid>

    <Style x:Key="TabsSetAsideToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CaptionToggleButtonStyle}">
        <Setter Property="Content" Value="{DynamicResource TabsSetAsideToggleButtonIcon}"/>
    </Style>

    <Grid x:Key="SetTabsAsideButtonIcon" x:Shared="False" Width="10">
        <Path Data="M 4 0 L 0 0 L 0 7 L 4 7" Fill="Transparent" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2" HorizontalAlignment="Left" VerticalAlignment="Center"/>
        <Path Data="M 0 4 L 4 0 L 4 3 L 7 3 L 7 5 L 4 5 L 4 8 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Right" VerticalAlignment="Center"/>
        <!--M 0 3 L 3 0 L 3 1 L 7 1 L 7 2 L 3 2 L 3 3 Z-->
    </Grid>

    <Style x:Key="SetTabsAsideButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content" Value="{DynamicResource SetTabsAsideButtonIcon}"/>
    </Style>

    <Path x:Key="NewTabButtonIcon" x:Shared="False" Data="M 0 4 L 8 4 M 4 0 L 4 8" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased"/>

    <Style x:Key="NewTabButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Margin" Value="0,0,150,0"/>
        <Setter Property="Content" Value="{DynamicResource NewTabButtonIcon}"/>
    </Style>

    <Style x:Key="TabsOverviewContentControlStyle" TargetType="{x:Type ContentControl}">
        <!--Setter Property="Opacity" Value="0"/-->
        <!--Setter Property="Visibility" Value="Collapsed"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid x:Name="RootGrid" Opacity="0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="45"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="31"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{DynamicResource ModalPanelBackdropBrush}" Margin="0,0,-3,-3" BorderThickness="0,0,3,3" CornerRadius="0,0,4,0" Grid.Column="0" Grid.Row="0"/>
                        <Border Background="{DynamicResource ModalPanelBackdropBrush}" CornerRadius="0,3,0,0" Grid.Column="1" Grid.Row="0"/>
                        <Border Background="{DynamicResource ModalPanelBackdropBrush}" CornerRadius="0,0,3,3" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"/>
                        <Grid x:Name="ContentGrid" RenderTransformOrigin="0,0" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Grid.RowSpan="2">
                            <Grid.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="{Binding ScaleX, RelativeSource={RelativeSource Mode=Self}}"/>
                            </Grid.RenderTransform>
                            <Border x:Name="ContentPaneBorder" CornerRadius="3" Effect="{DynamicResource TertiaryDropShadow}" BorderBrush="Transparent" Margin="48" UseLayoutRounding="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <ContentPresenter Content="{TemplateBinding Content}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsManipulationEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsManipulationEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames-->
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.25" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames-->
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="LocationTabDataTemplate" DataType="{x:Type local:LocationTab}">
        <Grid Width="174" Height="154">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="24"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="24"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Text="{Binding Title}" TextAlignment="Center" HorizontalAlignment="Center" Grid.Column="0" Grid.Row="0"/>
            <Rectangle Fill="{Binding Thumbnail, Mode=OneWay}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"/>
            <Rectangle Width="32" Height="32" HorizontalAlignment="Left" VerticalAlignment="Bottom" Fill="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" Grid.Column="0" Grid.Row="1"/>
        </Grid>
    </DataTemplate>

    <Style x:Key="CurrentlyOpenTabsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <DockPanel>
                        <TextBlock Text="Currently Open Tabs" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" FontSize="14" Opacity="0.5" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" DockPanel.Dock="Top"/>
                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate" Value="{DynamicResource LocationTabDataTemplate}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabsSetAsideListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Width" Value="350"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <DockPanel>
                        <Rectangle Fill="{DynamicResource HorizontalPanelBorderBrush}" Width="1" Margin="0,4" DockPanel.Dock="Right"/>
                        <TextBlock Text="Tabs You've Set Aside" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListView}}}" FontSize="14" Opacity="0.5" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" DockPanel.Dock="Top"/>
                        <ScrollViewer CanContentScroll="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ui:AttachedProperties.CornerCurves>
                                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                            </ui:AttachedProperties.CornerCurves>
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type local:TabGroup}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="24"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <DockPanel Grid.Column="0" Grid.Row="0">
                            <Button Content="Restore tabs" DockPanel.Dock="Right"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Tabs.Count, Mode=OneWay}" FontSize="13"/>
                                <TextBlock Text=" tabs" FontSize="13"/>
                                <TextBlock Margin="15,0" Text="{Binding Time, Mode=OneWay}"/>
                            </StackPanel>
                        </DockPanel>
                        <Button Style="{DynamicResource CaptionButtonStyle}" Grid.Column="1" Grid.Row="0">
                            <Path Data="M 0 -1 L 2 -1 L 4.5 2 L 7 -1 L 9 -1 L 9 1 L 6 3.5 L 9 6 L 9 8 L 7 8 L 4.5 5 L 2 8 L 0 8 L 0 6 L 3 3.5 L 0 1 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                        </Button>
                        <ListView ItemsSource="{Binding Tabs}" ItemTemplate="{DynamicResource LocationTabDataTemplate}" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1">
                            <ListView.Style>
                                <Style TargetType="{x:Type ListView}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListView}">
                                                <Grid>
                                                    <ContentControl x:Name="ContentCon" HorizontalAlignment="Left">
                                                        <ContentControl.Content>
                                                            <ItemsPresenter/>
                                                        </ContentControl.Content>
                                                    </ContentControl>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition SourceName="ContentCon" Property="IsMouseOver" Value="True"/>
                                                            <Condition SourceName="ContentCon" Property="IsMouseOver" Value="False"/>
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="ContentCon" Property="Content">
                                                            <Setter.Value>
                                                                <!--ControlTemplate TargetType="{x:Type ListView}"-->
                                                                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled">
                                                                    <ItemsPresenter/>
                                                                </ScrollViewer>
                                                                <!--/ControlTemplate-->
                                                            </Setter.Value>
                                                        </Setter>
                                                        <!--Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ListView}">
                                                                    <DockPanel LastChildFill="False">
                                                                        <ScrollBar x:Name="ScrollBar" Orientation="Horizontal" Minimum="0" Maximum="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}}" DockPanel.Dock="Bottom"/>
                                                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                                                            <ItemsPresenter Width="Auto"/>
                                                                            <Rectangle Width="{Binding Value, ElementName=ScrollBar, Mode=OneWay}"/>
                                                                        </StackPanel>
                                                                    </DockPanel>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter-->
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="ItemsPanel">
                                        <Setter.Value>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListView.Style>
                        </ListView>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ui:CommandBar}" TargetType="{x:Type ui:CommandBar}" BasedOn="{StaticResource ShadowedCommandBarStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:CommandBar}">
                    <Grid>
                        <Border Style="{DynamicResource HorizontalBarBorderStyle}" HorizontalAlignment="Stretch" BorderThickness="{TemplateBinding BorderThickness}" ui:AttachedProperties.CornerCurves="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" IsItemsHost="True" Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <!--Rectangle x:Name="ShadowRectangle" VerticalAlignment="Bottom" Margin="0,-18" Height="18" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle-->
                    </Grid>
                    <!--ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(ScrollViewer.ComputedVerticalScrollBarVisibility), ElementName=CurrentDirectoryListView}" Value="Visible">
                            <Setter TargetName="ShadowRectangle" Property="Margin" Value="0,-18,18,-18"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}" BasedOn="{StaticResource ShadowedStatusBarStyle}">
        <Setter Property="Panel.ZIndex" Value="999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid>
                        <Rectangle x:Name="ShadowRectangle" VerticalAlignment="Top" Height="9" IsHitTestVisible="False" Margin="0,-9">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="Border" Style="{DynamicResource HorizontalBarBorderStyle}" CornerRadius="0,0,2,2" BorderThickness="0,1,0,0">
                            <ItemsPresenter/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(ScrollViewer.ComputedVerticalScrollBarVisibility), ElementName=CurrentDirectoryListView}" Value="Visible">
                            <Setter TargetName="ShadowRectangle" Property="Margin" Value="0,-9,18,-9"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <!--#endregion Main Content Styles-->
    

    <!--#region Settings UI Styles-->

    <Style x:Key="{x:Type local:SettingsWindow}" TargetType="{x:Type local:SettingsWindow}" BasedOn="{StaticResource {x:Type win:DecoratableWindow}}">
        <Setter Property="Height" Value="592"/>
        <Setter Property="Width" Value="500"/>
        <!--Setter Property="BorderThickness" Value="0,58,0,0"/-->
        <Setter Property="TitlebarHeight" Value="62"/>
        <Style.Resources>
            <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource PrimaryTabControlStyle}"/>

            <Style x:Key="{x:Type ui:ToggleSwitch}" TargetType="{x:Type ui:ToggleSwitch}" BasedOn="{StaticResource {x:Type ui:ToggleSwitch}}">
                <Setter Property="Margin" Value="0,5"/>
            </Style>

            <Style x:Key="OptionSideLabelTextBlockStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="160"/>
            </Style>

            <Style x:Key="OptionButtonsRowPanelStyle" TargetType="{x:Type Panel}">
                <Setter Property="Margin" Value="1,5,1,6"/>
            </Style>

            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Margin" Value="0,0,-1,-1"/>
            </Style>

            <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
            </Style>

            <Style x:Key="FooterContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
                <Style.Resources>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="Margin" Value="0,0,5,0"/>
                        <Setter Property="UseLayoutRounding" Value="True"/>
                    </Style>
                </Style.Resources>
                <Setter Property="Height" Value="40"/>
                <Setter Property="Padding" Value="5,5,0,5"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Border Style="{DynamicResource HorizontalBarBorderStyle}" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2">
                                <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

    <!--#endregion Settings UI Styles-->    
</ResourceDictionary>